
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e258  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800e408  0800e408  0001e408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e608  0800e608  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e608  0800e608  0001e608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e610  0800e610  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e610  0800e610  0001e610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e614  0800e614  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800e618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055ac  2000027c  0800e894  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005828  0800e894  00025828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d284  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d7f  00000000  00000000  0004d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  000532b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  00055050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c45c  00000000  00000000  00056b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a4c  00000000  00000000  00082ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f64d5  00000000  00000000  000a7a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019df15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008010  00000000  00000000  0019df68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e3f0 	.word	0x0800e3f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000280 	.word	0x20000280
 80001ec:	0800e3f0 	.word	0x0800e3f0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_ADC1_Init+0xb8>)
 80004fc:	4a29      	ldr	r2, [pc, #164]	; (80005a4 <MX_ADC1_Init+0xbc>)
 80004fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000506:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800050e:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000510:	2201      	movs	r2, #1
 8000512:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800052c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800053a:	2202      	movs	r2, #2
 800053c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000540:	2201      	movs	r2, #1
 8000542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_ADC1_Init+0xb8>)
 8000548:	2201      	movs	r2, #1
 800054a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800054e:	f001 f9d7 	bl	8001900 <HAL_ADC_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000558:	f000 fd86 	bl	8001068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800056e:	f001 fb39 	bl	8001be4 <HAL_ADC_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000578:	f000 fd76 	bl	8001068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800057c:	2301      	movs	r3, #1
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0xb8>)
 800058a:	f001 fb2b 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000594:	f000 fd68 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20004bdc 	.word	0x20004bdc
 80005a4:	40012000 	.word	0x40012000

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <HAL_ADC_MspInit+0xdc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d157      	bne.n	800067a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6453      	str	r3, [r2, #68]	; 0x44
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a26      	ldr	r2, [pc, #152]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <HAL_ADC_MspInit+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000602:	2303      	movs	r3, #3
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481d      	ldr	r0, [pc, #116]	; (800068c <HAL_ADC_MspInit+0xe4>)
 8000616:	f002 fa79 	bl	8002b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_ADC_MspInit+0xec>)
 800061e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 800063c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 800064c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000650:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000660:	f001 fe52 	bl	8002308 <HAL_DMA_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800066a:	f000 fcfd 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_ADC_MspInit+0xe8>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40012000 	.word	0x40012000
 8000688:	40023800 	.word	0x40023800
 800068c:	40020000 	.word	0x40020000
 8000690:	20004c24 	.word	0x20004c24
 8000694:	40026410 	.word	0x40026410

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_DMA_Init+0x68>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_DMA_Init+0x68>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_DMA_Init+0x68>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_DMA_Init+0x68>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_DMA_Init+0x68>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_DMA_Init+0x68>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2105      	movs	r1, #5
 80006da:	2010      	movs	r0, #16
 80006dc:	f001 fdea 	bl	80022b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006e0:	2010      	movs	r0, #16
 80006e2:	f001 fe03 	bl	80022ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	2038      	movs	r0, #56	; 0x38
 80006ec:	f001 fde2 	bl	80022b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006f0:	2038      	movs	r0, #56	; 0x38
 80006f2:	f001 fdfb 	bl	80022ec <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <MX_FREERTOS_Init+0x18>)
 800070a:	2100      	movs	r1, #0
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_FREERTOS_Init+0x1c>)
 800070e:	f009 f849 	bl	80097a4 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <MX_FREERTOS_Init+0x20>)
 8000716:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	0800e4d4 	.word	0x0800e4d4
 8000720:	08000729 	.word	0x08000729
 8000724:	20004c84 	.word	0x20004c84

08000728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000730:	f00c fdac 	bl	800d28c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f009 f9f5 	bl	8009b24 <osDelay>
 800073a:	e7fb      	b.n	8000734 <StartDefaultTask+0xc>

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a38      	ldr	r2, [pc, #224]	; (800083c <MX_GPIO_Init+0x100>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <MX_GPIO_Init+0x100>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <MX_GPIO_Init+0x100>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_GPIO_Init+0x100>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_GPIO_Init+0x100>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <MX_GPIO_Init+0x100>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_GPIO_Init+0x100>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0x100>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_GPIO_Init+0x100>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0x100>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0x100>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_GPIO_Init+0x100>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_GPIO_Init+0x100>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0x104>)
 80007e6:	f002 fb55 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80007ea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_GPIO_Init+0x108>)
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x10c>)
 8000800:	f002 f984 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000804:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000812:	2302      	movs	r3, #2
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0x104>)
 800081e:	f002 f975 	bl	8002b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	2028      	movs	r0, #40	; 0x28
 8000828:	f001 fd44 	bl	80022b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082c:	2028      	movs	r0, #40	; 0x28
 800082e:	f001 fd5d 	bl	80022ec <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40021000 	.word	0x40021000
 8000844:	10110000 	.word	0x10110000
 8000848:	40021400 	.word	0x40021400

0800084c <Get_Key>:
/* USER CODE BEGIN 0 */


/* this function used to get keypressed char  */
void Get_Key(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	KeyPad.status = false ;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <Get_Key+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1 );
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	482c      	ldr	r0, [pc, #176]	; (8000910 <Get_Key+0xc4>)
 800085e:	f002 fb19 	bl	8002e94 <HAL_GPIO_WritePin>
	osDelay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f009 f95e 	bl	8009b24 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0 );
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4828      	ldr	r0, [pc, #160]	; (8000910 <Get_Key+0xc4>)
 8000870:	f002 fb10 	bl	8002e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1 );
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4825      	ldr	r0, [pc, #148]	; (8000910 <Get_Key+0xc4>)
 800087c:	f002 fb0a 	bl	8002e94 <HAL_GPIO_WritePin>
	osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f009 f94f 	bl	8009b24 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0 );
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088c:	4820      	ldr	r0, [pc, #128]	; (8000910 <Get_Key+0xc4>)
 800088e:	f002 fb01 	bl	8002e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1 );
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <Get_Key+0xc4>)
 800089a:	f002 fafb 	bl	8002e94 <HAL_GPIO_WritePin>
	osDelay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f009 f940 	bl	8009b24 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0 );
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008aa:	4819      	ldr	r0, [pc, #100]	; (8000910 <Get_Key+0xc4>)
 80008ac:	f002 faf2 	bl	8002e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1 );
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <Get_Key+0xc4>)
 80008b8:	f002 faec 	bl	8002e94 <HAL_GPIO_WritePin>
	osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f009 f931 	bl	8009b24 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0 );
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <Get_Key+0xc4>)
 80008ca:	f002 fae3 	bl	8002e94 <HAL_GPIO_WritePin>
	if(KeyPad.status == false )
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <Get_Key+0xc0>)
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d005      	beq.n	80008ea <Get_Key+0x9e>
	{
		KeyPad.Key = 0 ;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Get_Key+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		CharKey = 0 ;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <Get_Key+0xc8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	}

	/* check first if there is any valid pressed Key */
	  if(KeyPad.Key != 0)
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <Get_Key+0xc0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d009      	beq.n	8000908 <Get_Key+0xbc>
	  CharKey = KeyPad.KeyChar[KeyPad.Key-1];
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <Get_Key+0xc0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <Get_Key+0xc0>)
 80008fe:	4413      	add	r3, r2
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <Get_Key+0xc8>)
 8000906:	701a      	strb	r2, [r3, #0]

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000004 	.word	0x20000004
 8000910:	40021000 	.word	0x40021000
 8000914:	20000298 	.word	0x20000298

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 ff8a 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f866 	bl	80009f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	MainTaskHandle = osThreadNew(MainTask_Fun, NULL, &MainTasK_Attr);
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <main+0x98>)
 8000926:	2100      	movs	r1, #0
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <main+0x9c>)
 800092a:	f008 ff3b 	bl	80097a4 <osThreadNew>
 800092e:	4603      	mov	r3, r0
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <main+0xa0>)
 8000932:	6013      	str	r3, [r2, #0]

	HC05TaskHandle = osThreadNew(HC05Task_Fun, NULL, &HC05TasK_Attr);
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <main+0xa4>)
 8000936:	2100      	movs	r1, #0
 8000938:	4821      	ldr	r0, [pc, #132]	; (80009c0 <main+0xa8>)
 800093a:	f008 ff33 	bl	80097a4 <osThreadNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <main+0xac>)
 8000942:	6013      	str	r3, [r2, #0]

	KeyPadTaskHandle = osThreadNew(KeyPadTask_Fun, NULL, &KeyPadTasK_Attr);
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <main+0xb0>)
 8000946:	2100      	movs	r1, #0
 8000948:	4820      	ldr	r0, [pc, #128]	; (80009cc <main+0xb4>)
 800094a:	f008 ff2b 	bl	80097a4 <osThreadNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <main+0xb8>)
 8000952:	6013      	str	r3, [r2, #0]

	HC05SemaHandle = osSemaphoreNew(1, 0, &HC05Sema_attributes);
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <main+0xbc>)
 8000956:	2100      	movs	r1, #0
 8000958:	2001      	movs	r0, #1
 800095a:	f009 f8fe 	bl	8009b5a <osSemaphoreNew>
 800095e:	4603      	mov	r3, r0
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <main+0xc0>)
 8000962:	6013      	str	r3, [r2, #0]

	KeyPadTaskHandle = osSemaphoreNew(1, 0, &KeyPadSema_attributes);
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <main+0xc4>)
 8000966:	2100      	movs	r1, #0
 8000968:	2001      	movs	r0, #1
 800096a:	f009 f8f6 	bl	8009b5a <osSemaphoreNew>
 800096e:	4603      	mov	r3, r0
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <main+0xb8>)
 8000972:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff fee2 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f7ff fe8e 	bl	8000698 <MX_DMA_Init>
  MX_ADC1_Init();
 800097c:	f7ff fdb4 	bl	80004e8 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000980:	f000 fd5c 	bl	800143c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000984:	f000 fe20 	bl	80015c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000988:	f000 fe48 	bl	800161c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

 /* register uart1 to used by system calls printf and scanf */
  RetargetInit(&huart1);
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <main+0xc8>)
 800098e:	f000 fb71 	bl	8001074 <RetargetInit>

  /* start timer 8 to work as trigger for ADC conversion */

  /* start TIM8 to generate periodic trigger event to capture anew ADC value */
  HAL_TIM_Base_Start(&htim8);
 8000992:	4814      	ldr	r0, [pc, #80]	; (80009e4 <main+0xcc>)
 8000994:	f004 f912 	bl	8004bbc <HAL_TIM_Base_Start>

  /* start ADC and initialize it to work with DMA mode */

  /*initialize ADC to work with DMA when trigger event is received*/
  HAL_ADC_Start_DMA(&hadc1,&JOYRes, 2);
 8000998:	2202      	movs	r2, #2
 800099a:	4913      	ldr	r1, [pc, #76]	; (80009e8 <main+0xd0>)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <main+0xd4>)
 800099e:	f000 fff3 	bl	8001988 <HAL_ADC_Start_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009a2:	f008 feb5 	bl	8009710 <osKernelInitialize>
  MX_FREERTOS_Init();
 80009a6:	f7ff fead 	bl	8000704 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009aa:	f008 fed5 	bl	8009758 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x96>
 80009b0:	0800e518 	.word	0x0800e518
 80009b4:	08000c75 	.word	0x08000c75
 80009b8:	20004c9c 	.word	0x20004c9c
 80009bc:	0800e53c 	.word	0x0800e53c
 80009c0:	08000dcd 	.word	0x08000dcd
 80009c4:	20004c8c 	.word	0x20004c8c
 80009c8:	0800e560 	.word	0x0800e560
 80009cc:	08000e1d 	.word	0x08000e1d
 80009d0:	20004c88 	.word	0x20004c88
 80009d4:	0800e4f8 	.word	0x0800e4f8
 80009d8:	20004ca0 	.word	0x20004ca0
 80009dc:	0800e508 	.word	0x0800e508
 80009e0:	20004e74 	.word	0x20004e74
 80009e4:	20004dcc 	.word	0x20004dcc
 80009e8:	20004d14 	.word	0x20004d14
 80009ec:	20004bdc 	.word	0x20004bdc

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00d f8e0 	bl	800dbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a64:	23a8      	movs	r3, #168	; 0xa8
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fbab 	bl	80041d0 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 faf2 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fe0c 	bl	80046c0 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aae:	f000 fadb 	bl	8001068 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	; 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

/* KEYPAD key is work through interrupt mode so here we only detect the Key pressed number
 */
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]

	KeyPad.status = false  ;
 8000ace:	4b67      	ldr	r3, [pc, #412]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	705a      	strb	r2, [r3, #1]
	if(GPIO_Pin == GPIO_PIN_11)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ada:	d12d      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0x74>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae0:	4863      	ldr	r0, [pc, #396]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ae2:	f002 f9bf 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <HAL_GPIO_EXTI_Callback+0x2e>
			KeyPad.Key = 1	;
 8000aec:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	485e      	ldr	r0, [pc, #376]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000af8:	f002 f9b4 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <HAL_GPIO_EXTI_Callback+0x44>
			KeyPad.Key = 2	;
 8000b02:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))
 8000b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0c:	4858      	ldr	r0, [pc, #352]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b0e:	f002 f9a9 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <HAL_GPIO_EXTI_Callback+0x5a>
			KeyPad.Key = 3	;
 8000b18:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4853      	ldr	r0, [pc, #332]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b24:	f002 f99e 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8096 	beq.w	8000c5c <HAL_GPIO_EXTI_Callback+0x198>
			KeyPad.Key = 4	;
 8000b30:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e091      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>

	}
	else if(GPIO_Pin == GPIO_PIN_12)
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3e:	d12c      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd6>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	484a      	ldr	r0, [pc, #296]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b46:	f002 f98d 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_GPIO_EXTI_Callback+0x92>

			KeyPad.Key = 5	;
 8000b50:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b52:	2205      	movs	r2, #5
 8000b54:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5a:	4845      	ldr	r0, [pc, #276]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b5c:	f002 f982 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_GPIO_EXTI_Callback+0xa8>
			KeyPad.Key = 6	;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b68:	2206      	movs	r2, #6
 8000b6a:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	483f      	ldr	r0, [pc, #252]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b72:	f002 f977 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <HAL_GPIO_EXTI_Callback+0xbe>
			KeyPad.Key = 7	;
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b7e:	2207      	movs	r2, #7
 8000b80:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	483a      	ldr	r0, [pc, #232]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b88:	f002 f96c 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d064      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>
			KeyPad.Key = 8	;
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e060      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>

	}
	else if(GPIO_Pin == GPIO_PIN_13)
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba0:	d12c      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x138>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000ba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba6:	4832      	ldr	r0, [pc, #200]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ba8:	f002 f95c 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <HAL_GPIO_EXTI_Callback+0xf4>
			KeyPad.Key = 9	;
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	482c      	ldr	r0, [pc, #176]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000bbe:	f002 f951 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <HAL_GPIO_EXTI_Callback+0x10a>
			KeyPad.Key = 10	;
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bca:	220a      	movs	r2, #10
 8000bcc:	701a      	strb	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	4827      	ldr	r0, [pc, #156]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000bd4:	f002 f946 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <HAL_GPIO_EXTI_Callback+0x120>
			KeyPad.Key = 11	;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000be0:	220b      	movs	r2, #11
 8000be2:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000bea:	f002 f93b 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d033      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>
			KeyPad.Key = 12	;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e02f      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>

	}
	else if(GPIO_Pin == GPIO_PIN_14)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c02:	d12b      	bne.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>
	{
		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10))
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4819      	ldr	r0, [pc, #100]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c0a:	f002 f92b 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0x156>
			KeyPad.Key = 13	;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c16:	220d      	movs	r2, #13
 8000c18:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11))
 8000c1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c20:	f002 f920 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_GPIO_EXTI_Callback+0x16c>
			KeyPad.Key = 14	;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c2c:	220e      	movs	r2, #14
 8000c2e:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12))
 8000c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c36:	f002 f915 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_GPIO_EXTI_Callback+0x182>
			KeyPad.Key = 15	;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c42:	220f      	movs	r2, #15
 8000c44:	701a      	strb	r2, [r3, #0]

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13))
 8000c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c4c:	f002 f90a 	bl	8002e64 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0x198>
			KeyPad.Key = 16	;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	701a      	strb	r2, [r3, #0]

	}

	/* to inform the GETKEY function we have anew event so go to calculate the KEY equivalent value */
	KeyPad.status = true ;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	705a      	strb	r2, [r3, #1]
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	40021000 	.word	0x40021000

08000c74 <MainTask_Fun>:

/* main task that receive the char from bluetooth or from Keypad and send them to USB host*/
void MainTask_Fun(void * arg)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint8_t index =0 ;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
	uint32_t flag =0 ; /* local var to  iterate over the string array */
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]

	while(1)
	{
			//osSemaphoreAcquire(JOYSemaHandle, osWaitForever);
			osThreadFlagsWait(HC05TaskDataReady_Flag_BIT |KeyPadTaskDataReady_Flag_BIT , osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	2102      	movs	r1, #2
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f008 fec9 	bl	8009a22 <osThreadFlagsWait>

			flag = osThreadFlagsGet();
 8000c90:	f008 fea6 	bl	80099e0 <osThreadFlagsGet>
 8000c94:	60b8      	str	r0, [r7, #8]
			index =0 ;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
			if(flag  ==  HC05TaskDataReady_Flag_BIT )
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d14c      	bne.n	8000d3a <MainTask_Fun+0xc6>
			{
				while(KeyBoardChar[index] != '\0') /* loop until send all char */
 8000ca0:	e034      	b.n	8000d0c <MainTask_Fun+0x98>
				{
				USBbuffer[0] = 	1;// MouseButtons.AllBits ;
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <MainTask_Fun+0x140>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
				USBbuffer[1] = 	0 ; // modifiers
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <MainTask_Fun+0x140>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	705a      	strb	r2, [r3, #1]
				USBbuffer[2] =  0 ;  // reserved
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <MainTask_Fun+0x140>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	709a      	strb	r2, [r3, #2]
				USBbuffer[4] = 	KeyBoardChar[index++] ; //first key
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	73fa      	strb	r2, [r7, #15]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <MainTask_Fun+0x144>)
 8000cbe:	5c9b      	ldrb	r3, [r3, r2]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <MainTask_Fun+0x140>)
 8000cc4:	711a      	strb	r2, [r3, #4]
				USBbuffer[3] = 	CapsLock ; //second key
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <MainTask_Fun+0x148>)
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <MainTask_Fun+0x140>)
 8000ccc:	70da      	strb	r2, [r3, #3]

				  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USBbuffer, 8);
 8000cce:	2208      	movs	r2, #8
 8000cd0:	4938      	ldr	r1, [pc, #224]	; (8000db4 <MainTask_Fun+0x140>)
 8000cd2:	483b      	ldr	r0, [pc, #236]	; (8000dc0 <MainTask_Fun+0x14c>)
 8000cd4:	f007 fa7c 	bl	80081d0 <USBD_CUSTOM_HID_SendReport>
				  osDelay(30); /* made so delay for next host request */
 8000cd8:	201e      	movs	r0, #30
 8000cda:	f008 ff23 	bl	8009b24 <osDelay>

				  /* now send no event to prevent repetation */
				  USBbuffer[0] = 	1;// MouseButtons.AllBits ;
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <MainTask_Fun+0x140>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
				  USBbuffer[1] = 	0 ; // modifiers
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <MainTask_Fun+0x140>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	705a      	strb	r2, [r3, #1]
				  USBbuffer[2] =  	0 ;  // reserved
 8000cea:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <MainTask_Fun+0x140>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	709a      	strb	r2, [r3, #2]
				  USBbuffer[3] = 	0; //first key
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <MainTask_Fun+0x140>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	70da      	strb	r2, [r3, #3]
				  USBbuffer[4] = 	0; //second key
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MainTask_Fun+0x140>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]
	              USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USBbuffer, 8);
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	492d      	ldr	r1, [pc, #180]	; (8000db4 <MainTask_Fun+0x140>)
 8000d00:	482f      	ldr	r0, [pc, #188]	; (8000dc0 <MainTask_Fun+0x14c>)
 8000d02:	f007 fa65 	bl	80081d0 <USBD_CUSTOM_HID_SendReport>

	    		  osDelay(30); /* need another  delay because the possibility of iteration */
 8000d06:	201e      	movs	r0, #30
 8000d08:	f008 ff0c 	bl	8009b24 <osDelay>
				while(KeyBoardChar[index] != '\0') /* loop until send all char */
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	4a2a      	ldr	r2, [pc, #168]	; (8000db8 <MainTask_Fun+0x144>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1c4      	bne.n	8000ca2 <MainTask_Fun+0x2e>
				}

				CapsLock =0X82;
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <MainTask_Fun+0x148>)
 8000d1a:	2282      	movs	r2, #130	; 0x82
 8000d1c:	701a      	strb	r2, [r3, #0]
	    		osThreadFlagsClear(HC05TaskDataReady_Flag_BIT);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f008 fe20 	bl	8009964 <osThreadFlagsClear>

				/* clear buffers to make it clear from garbage values */
				memset(KeyBoardChar , 0 , sizeof(KeyBoardChar));
 8000d24:	2264      	movs	r2, #100	; 0x64
 8000d26:	2100      	movs	r1, #0
 8000d28:	4823      	ldr	r0, [pc, #140]	; (8000db8 <MainTask_Fun+0x144>)
 8000d2a:	f00c ff4b 	bl	800dbc4 <memset>
				memset(ReceivedString , 0, sizeof(ReceivedString));
 8000d2e:	2264      	movs	r2, #100	; 0x64
 8000d30:	2100      	movs	r1, #0
 8000d32:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <MainTask_Fun+0x150>)
 8000d34:	f00c ff46 	bl	800dbc4 <memset>
 8000d38:	e7a4      	b.n	8000c84 <MainTask_Fun+0x10>
			}
			else if(flag  ==   KeyPadTaskDataReady_Flag_BIT) /* here Keypad return a notification */
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d1a1      	bne.n	8000c84 <MainTask_Fun+0x10>
			{
				USBbuffer[0] = 	1;// MouseButtons.AllBits ;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MainTask_Fun+0x140>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
				USBbuffer[1] = 	0 ; // modifiers
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MainTask_Fun+0x140>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	705a      	strb	r2, [r3, #1]
				USBbuffer[2] =  0 ;  // reserved
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MainTask_Fun+0x140>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	709a      	strb	r2, [r3, #2]
				USBbuffer[4] = 	KeyPadEquivelant[0] ; //first key
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MainTask_Fun+0x154>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MainTask_Fun+0x140>)
 8000d5a:	711a      	strb	r2, [r3, #4]
				USBbuffer[3] = 	CapsLock ; //second key
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MainTask_Fun+0x148>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MainTask_Fun+0x140>)
 8000d62:	70da      	strb	r2, [r3, #3]

				  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USBbuffer, 8);
 8000d64:	2208      	movs	r2, #8
 8000d66:	4913      	ldr	r1, [pc, #76]	; (8000db4 <MainTask_Fun+0x140>)
 8000d68:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <MainTask_Fun+0x14c>)
 8000d6a:	f007 fa31 	bl	80081d0 <USBD_CUSTOM_HID_SendReport>

				  osDelay(20); /* made so delay for next host request */
 8000d6e:	2014      	movs	r0, #20
 8000d70:	f008 fed8 	bl	8009b24 <osDelay>
				CapsLock =0X82;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MainTask_Fun+0x148>)
 8000d76:	2282      	movs	r2, #130	; 0x82
 8000d78:	701a      	strb	r2, [r3, #0]
				  /* now send no event to prevent repetation */
				  USBbuffer[0] = 	1;// MouseButtons.AllBits ;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MainTask_Fun+0x140>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
				  USBbuffer[1] = 	0 ; // modifiers
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MainTask_Fun+0x140>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	705a      	strb	r2, [r3, #1]
				  USBbuffer[2] =  	0 ;  // reserved
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MainTask_Fun+0x140>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	709a      	strb	r2, [r3, #2]
				  USBbuffer[3] = 	0; //first key
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MainTask_Fun+0x140>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	70da      	strb	r2, [r3, #3]
				  USBbuffer[4] = 	0; //second key
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MainTask_Fun+0x140>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	711a      	strb	r2, [r3, #4]

	              USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USBbuffer, 8);
 8000d98:	2208      	movs	r2, #8
 8000d9a:	4906      	ldr	r1, [pc, #24]	; (8000db4 <MainTask_Fun+0x140>)
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MainTask_Fun+0x14c>)
 8000d9e:	f007 fa17 	bl	80081d0 <USBD_CUSTOM_HID_SendReport>
	    		  osThreadFlagsClear(KeyPadTaskDataReady_Flag_BIT);
 8000da2:	2002      	movs	r0, #2
 8000da4:	f008 fdde 	bl	8009964 <osThreadFlagsClear>

	    		  memset(KeyPadEquivelant , 0 , sizeof(KeyPadEquivelant));
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MainTask_Fun+0x154>)
 8000dae:	f00c ff09 	bl	800dbc4 <memset>
			osThreadFlagsWait(HC05TaskDataReady_Flag_BIT |KeyPadTaskDataReady_Flag_BIT , osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 8000db2:	e767      	b.n	8000c84 <MainTask_Fun+0x10>
 8000db4:	20004c90 	.word	0x20004c90
 8000db8:	20004cb0 	.word	0x20004cb0
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20004f40 	.word	0x20004f40
 8000dc4:	20004d1c 	.word	0x20004d1c
 8000dc8:	2000029c 	.word	0x2000029c

08000dcc <HC05Task_Fun>:
}



 void HC05Task_Fun(void * arg)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

	 while(1)
	{
		/* first receive character from bluetooth */
		HAL_UART_Receive_IT(&huart2, AsciiChar, 1) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	490b      	ldr	r1, [pc, #44]	; (8000e04 <HC05Task_Fun+0x38>)
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <HC05Task_Fun+0x3c>)
 8000dda:	f004 ffba 	bl	8005d52 <HAL_UART_Receive_IT>

		/*  wait until semaphore is released from uart that indicate the full message is received and start your processing  on it */
		osSemaphoreAcquire(HC05SemaHandle, osWaitForever);
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HC05Task_Fun+0x40>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f04f 31ff 	mov.w	r1, #4294967295
 8000de6:	4618      	mov	r0, r3
 8000de8:	f008 ff40 	bl	8009c6c <osSemaphoreAcquire>

		/* get the equivalent vakues for the received string */
		GetKeyBoardEquivelant( ReceivedString , KeyBoardChar);
 8000dec:	4908      	ldr	r1, [pc, #32]	; (8000e10 <HC05Task_Fun+0x44>)
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <HC05Task_Fun+0x48>)
 8000df0:	f000 f844 	bl	8000e7c <GetKeyBoardEquivelant>

		/* send notification for main task that you have anew message ready to send to host */
		osThreadFlagsSet(MainTaskHandle, HC05TaskDataReady_Flag_BIT);
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HC05Task_Fun+0x4c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f008 fd64 	bl	80098c8 <osThreadFlagsSet>
		HAL_UART_Receive_IT(&huart2, AsciiChar, 1) ;
 8000e00:	e7e8      	b.n	8000dd4 <HC05Task_Fun+0x8>
 8000e02:	bf00      	nop
 8000e04:	20004ca4 	.word	0x20004ca4
 8000e08:	20004eb8 	.word	0x20004eb8
 8000e0c:	20004ca0 	.word	0x20004ca0
 8000e10:	20004cb0 	.word	0x20004cb0
 8000e14:	20004d1c 	.word	0x20004d1c
 8000e18:	20004c9c 	.word	0x20004c9c

08000e1c <KeyPadTask_Fun>:

}

 /* Keypad task this driver work with keypad and hc05 */
void KeyPadTask_Fun(void * arg)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* till the processor come here and made a busy wait state */
			while(CharKey == 0)
 8000e24:	e001      	b.n	8000e2a <KeyPadTask_Fun+0xe>
			{
				Get_Key();
 8000e26:	f7ff fd11 	bl	800084c <Get_Key>
			while(CharKey == 0)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <KeyPadTask_Fun+0x50>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f8      	beq.n	8000e26 <KeyPadTask_Fun+0xa>
			}

			KeyPadAscii[0] = CharKey ;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <KeyPadTask_Fun+0x50>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <KeyPadTask_Fun+0x54>)
 8000e3c:	701a      	strb	r2, [r3, #0]
			KeyPadAscii[1] = 0 ;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <KeyPadTask_Fun+0x54>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	705a      	strb	r2, [r3, #1]

			KeyPadEquivelant[0] = 0 ;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <KeyPadTask_Fun+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
			GetKeyBoardEquivelant(KeyPadAscii,KeyPadEquivelant);
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <KeyPadTask_Fun+0x58>)
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <KeyPadTask_Fun+0x54>)
 8000e4e:	f000 f815 	bl	8000e7c <GetKeyBoardEquivelant>

			osThreadFlagsSet(MainTaskHandle, KeyPadTaskDataReady_Flag_BIT);
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <KeyPadTask_Fun+0x5c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fd35 	bl	80098c8 <osThreadFlagsSet>

			/* clear for next check */
			CharKey =0;
 8000e5e:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <KeyPadTask_Fun+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]

			/* make some delay to free up the processor useful in low power mode */
			osDelay(20);
 8000e64:	2014      	movs	r0, #20
 8000e66:	f008 fe5d 	bl	8009b24 <osDelay>
			while(CharKey == 0)
 8000e6a:	e7de      	b.n	8000e2a <KeyPadTask_Fun+0xe>
 8000e6c:	20000298 	.word	0x20000298
 8000e70:	20004cac 	.word	0x20004cac
 8000e74:	2000029c 	.word	0x2000029c
 8000e78:	20004c9c 	.word	0x20004c9c

08000e7c <GetKeyBoardEquivelant>:
}



void GetKeyBoardEquivelant( uint8_t * AsciiChar ,uint8_t * KeyBoardChar)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

	uint8_t IndexAscii =0 , IndexKeyboard = 0   ;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73bb      	strb	r3, [r7, #14]

	while(AsciiChar[IndexAscii] != '\0' )
 8000e8e:	e08c      	b.n	8000faa <GetKeyBoardEquivelant+0x12e>
	{

	/* because the difference between ascii code and usage table for keyboard we here need to make a tons of checks */
	if((AsciiChar[IndexAscii] >= 97)&&(AsciiChar[IndexAscii] <= 122)) /* small letter */
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b60      	cmp	r3, #96	; 0x60
 8000e9a:	d910      	bls.n	8000ebe <GetKeyBoardEquivelant+0x42>
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b7a      	cmp	r3, #122	; 0x7a
 8000ea6:	d80a      	bhi.n	8000ebe <GetKeyBoardEquivelant+0x42>
	{
		/*we need to clear  caps lock */
		KeyBoardChar[IndexKeyboard] =  AsciiChar[IndexAscii] - 93 ;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3a5d      	subs	r2, #93	; 0x5d
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e06f      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if((AsciiChar[IndexAscii] >= 65)&&(AsciiChar[IndexAscii] <= 90))/* capital letter */
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b40      	cmp	r3, #64	; 0x40
 8000ec8:	d913      	bls.n	8000ef2 <GetKeyBoardEquivelant+0x76>
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b5a      	cmp	r3, #90	; 0x5a
 8000ed4:	d80d      	bhi.n	8000ef2 <GetKeyBoardEquivelant+0x76>
	{
		/*we need to set capslock */

		CapsLock = 0x39 ;/* send caps lock to type capital letter  an screen */
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <GetKeyBoardEquivelant+0x154>)
 8000ed8:	2239      	movs	r2, #57	; 0x39
 8000eda:	701a      	strb	r2, [r3, #0]
		KeyBoardChar[IndexKeyboard] = AsciiChar[IndexAscii] - 61;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	440b      	add	r3, r1
 8000eea:	3a3d      	subs	r2, #61	; 0x3d
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e055      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if((AsciiChar[IndexAscii] >= 49)&&(AsciiChar[IndexAscii] <= 57)) /* num from 1 - 9 */
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b30      	cmp	r3, #48	; 0x30
 8000efc:	d910      	bls.n	8000f20 <GetKeyBoardEquivelant+0xa4>
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b39      	cmp	r3, #57	; 0x39
 8000f08:	d80a      	bhi.n	8000f20 <GetKeyBoardEquivelant+0xa4>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] =  AsciiChar[IndexAscii] - 19;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	440b      	add	r3, r1
 8000f18:	3a13      	subs	r2, #19
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e03e      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>

	}
	else if(AsciiChar[IndexAscii] == '\n' ) /* new line converted to enter key */
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b0a      	cmp	r3, #10
 8000f2a:	d105      	bne.n	8000f38 <GetKeyBoardEquivelant+0xbc>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] = 88 ;
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	2258      	movs	r2, #88	; 0x58
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e032      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if(AsciiChar[IndexAscii] == ' ' ) /* new line converted to enter key */
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d105      	bne.n	8000f50 <GetKeyBoardEquivelant+0xd4>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] = 44 ;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	222c      	movs	r2, #44	; 0x2c
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e026      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if(AsciiChar[IndexAscii] == 48) /* num 0 */
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b30      	cmp	r3, #48	; 0x30
 8000f5a:	d105      	bne.n	8000f68 <GetKeyBoardEquivelant+0xec>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] = 39 ;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	2227      	movs	r2, #39	; 0x27
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e01a      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if(AsciiChar[IndexAscii] == '*') /* num 0 */
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b2a      	cmp	r3, #42	; 0x2a
 8000f72:	d105      	bne.n	8000f80 <GetKeyBoardEquivelant+0x104>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] = 85 ;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2255      	movs	r2, #85	; 0x55
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e00e      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else if(AsciiChar[IndexAscii] == '#') /* num 0 */
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b23      	cmp	r3, #35	; 0x23
 8000f8a:	d105      	bne.n	8000f98 <GetKeyBoardEquivelant+0x11c>
	{
		/*we need to clear capslock */
		KeyBoardChar[IndexKeyboard] = 204 ;
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	22cc      	movs	r2, #204	; 0xcc
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e002      	b.n	8000f9e <GetKeyBoardEquivelant+0x122>
	}
	else /* still unsupported characters by this driver */
	{
		IndexKeyboard--; /* just to escape this character because it still not supported */
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	73bb      	strb	r3, [r7, #14]
	}

	/* go to next char */
	IndexAscii++;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
	IndexKeyboard++;
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
	while(AsciiChar[IndexAscii] != '\0' )
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f af6c 	bne.w	8000e90 <GetKeyBoardEquivelant+0x14>
	}

	/* terminate with NULL char */
	KeyBoardChar[IndexKeyboard] = 0 ;
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	 static uint8_t index=0;



		/* every message received from bluetooth end with new line character */
	 if(AsciiChar[0]!= '\n')
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_RxCpltCallback+0x5c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b0a      	cmp	r3, #10
 8000fe4:	d011      	beq.n	800100a <HAL_UART_RxCpltCallback+0x36>
	 {
		 ReceivedString[index++] = AsciiChar[0];
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_UART_RxCpltCallback+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a11      	ldr	r2, [pc, #68]	; (8001034 <HAL_UART_RxCpltCallback+0x60>)
 8000ff0:	7011      	strb	r1, [r2, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_UART_RxCpltCallback+0x5c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2d9      	uxtb	r1, r3
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_UART_RxCpltCallback+0x64>)
 8000ffc:	5499      	strb	r1, [r3, r2]
		 	 HAL_UART_Receive_IT(&huart2, AsciiChar, 1) ;
 8000ffe:	2201      	movs	r2, #1
 8001000:	490b      	ldr	r1, [pc, #44]	; (8001030 <HAL_UART_RxCpltCallback+0x5c>)
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <HAL_UART_RxCpltCallback+0x68>)
 8001004:	f004 fea5 	bl	8005d52 <HAL_UART_Receive_IT>

		/* release semaphore to make HC-05 resume */
		osSemaphoreRelease(HC05SemaHandle) ;
	}

}
 8001008:	e00d      	b.n	8001026 <HAL_UART_RxCpltCallback+0x52>
		ReceivedString[index] = 0; /* null terminate character */
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_UART_RxCpltCallback+0x60>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_UART_RxCpltCallback+0x64>)
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]
		index=0;/* clear static ver */
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_UART_RxCpltCallback+0x60>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(HC05SemaHandle) ;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_UART_RxCpltCallback+0x6c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fe75 	bl	8009d10 <osSemaphoreRelease>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20004ca4 	.word	0x20004ca4
 8001034:	2000029e 	.word	0x2000029e
 8001038:	20004d1c 	.word	0x20004d1c
 800103c:	20004eb8 	.word	0x20004eb8
 8001040:	20004ca0 	.word	0x20004ca0

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001056:	f000 fc0f 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40001000 	.word	0x40001000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <RetargetInit+0x28>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <RetargetInit+0x2c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6898      	ldr	r0, [r3, #8]
 8001088:	2300      	movs	r3, #0
 800108a:	2202      	movs	r2, #2
 800108c:	2100      	movs	r1, #0
 800108e:	f00c fda1 	bl	800dbd4 <setvbuf>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20004d80 	.word	0x20004d80
 80010a0:	20000218 	.word	0x20000218

080010a4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d002      	beq.n	80010bc <_write+0x18>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d111      	bne.n	80010e0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <_write+0x54>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	f004 fd0e 	bl	8005aea <HAL_UART_Transmit>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <_write+0x38>
      return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	e008      	b.n	80010ee <_write+0x4a>
    else
      return EIO;
 80010dc:	2305      	movs	r3, #5
 80010de:	e006      	b.n	80010ee <_write+0x4a>
  }
  errno = EBADF;
 80010e0:	f00c fd38 	bl	800db54 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2209      	movs	r2, #9
 80010e8:	601a      	str	r2, [r3, #0]
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20004d80 	.word	0x20004d80

080010fc <_close>:

int _close(int fd) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db04      	blt.n	8001114 <_close+0x18>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b02      	cmp	r3, #2
 800110e:	dc01      	bgt.n	8001114 <_close+0x18>
    return 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e006      	b.n	8001122 <_close+0x26>

  errno = EBADF;
 8001114:	f00c fd1e 	bl	800db54 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	2209      	movs	r2, #9
 800111c:	601a      	str	r2, [r3, #0]
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001136:	f00c fd0d 	bl	800db54 <__errno>
 800113a:	4603      	mov	r3, r0
 800113c:	2209      	movs	r2, #9
 800113e:	601a      	str	r2, [r3, #0]
  return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_read>:

int _read(int fd, char* ptr, int len) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d110      	bne.n	8001180 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <_read+0x4c>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2201      	movs	r2, #1
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	f004 fd50 	bl	8005c0e <HAL_UART_Receive>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <_read+0x30>
      return 1;
 8001178:	2301      	movs	r3, #1
 800117a:	e008      	b.n	800118e <_read+0x42>
    else
      return EIO;
 800117c:	2305      	movs	r3, #5
 800117e:	e006      	b.n	800118e <_read+0x42>
  }
  errno = EBADF;
 8001180:	f00c fce8 	bl	800db54 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	2209      	movs	r2, #9
 8001188:	601a      	str	r2, [r3, #0]
  return -1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20004d80 	.word	0x20004d80

0800119c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db08      	blt.n	80011be <_fstat+0x22>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	dc05      	bgt.n	80011be <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b8:	605a      	str	r2, [r3, #4]
    return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e005      	b.n	80011ca <_fstat+0x2e>
  }

  errno = EBADF;
 80011be:	f00c fcc9 	bl	800db54 <__errno>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2209      	movs	r2, #9
 80011c6:	601a      	str	r2, [r3, #0]
  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_MspInit+0x54>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_MspInit+0x54>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_MspInit+0x54>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_MspInit+0x54>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_MspInit+0x54>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_MspInit+0x54>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	210f      	movs	r1, #15
 8001216:	f06f 0001 	mvn.w	r0, #1
 800121a:	f001 f84b 	bl	80022b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2036      	movs	r0, #54	; 0x36
 8001242:	f001 f837 	bl	80022b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001246:	2036      	movs	r0, #54	; 0x36
 8001248:	f001 f850 	bl	80022ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_InitTick+0xa4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_InitTick+0xa4>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_InitTick+0xa4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001268:	f107 0210 	add.w	r2, r7, #16
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fc20 	bl	8004ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001278:	f003 fbf6 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 800127c:	4603      	mov	r3, r0
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_InitTick+0xa8>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3b01      	subs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_InitTick+0xac>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_InitTick+0xb0>)
 8001294:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_InitTick+0xac>)
 8001298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_InitTick+0xac>)
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_InitTick+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_InitTick+0xac>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <HAL_InitTick+0xac>)
 80012b2:	f003 fc33 	bl	8004b1c <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d104      	bne.n	80012c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <HAL_InitTick+0xac>)
 80012be:	f003 fce5 	bl	8004c8c <HAL_TIM_Base_Start_IT>
 80012c2:	4603      	mov	r3, r0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	20004d84 	.word	0x20004d84
 80012dc:	40001000 	.word	0x40001000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA1_Stream5_IRQHandler+0x10>)
 8001312:	f001 f991 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20004e14 	.word	0x20004e14

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f004 fd45 	bl	8005db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20004eb8 	.word	0x20004eb8

08001334 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001338:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800133c:	f001 fdc4 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001340:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001344:	f001 fdc0 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800134c:	f001 fdbc 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001350:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001354:	f001 fdb8 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <TIM8_CC_IRQHandler+0x10>)
 8001362:	f003 fd5c 	bl	8004e1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20004dcc 	.word	0x20004dcc

08001370 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM6_DAC_IRQHandler+0x10>)
 8001376:	f003 fd52 	bl	8004e1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20004d84 	.word	0x20004d84

08001384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <DMA2_Stream0_IRQHandler+0x10>)
 800138a:	f001 f955 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20004c24 	.word	0x20004c24

08001398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <OTG_FS_IRQHandler+0x10>)
 800139e:	f001 fefb 	bl	8003198 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20005410 	.word	0x20005410

080013ac <_sbrk>:
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
 80013dc:	f00c fbba 	bl	800db54 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20030000 	.word	0x20030000
 800140c:	00000600 	.word	0x00000600
 8001410:	200002a0 	.word	0x200002a0
 8001414:	20005828 	.word	0x20005828

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b096      	sub	sp, #88	; 0x58
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2220      	movs	r2, #32
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f00c fba5 	bl	800dbc4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <MX_TIM8_Init+0x134>)
 800147c:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <MX_TIM8_Init+0x138>)
 800147e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <MX_TIM8_Init+0x134>)
 8001482:	22a7      	movs	r2, #167	; 0xa7
 8001484:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <MX_TIM8_Init+0x134>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6500;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <MX_TIM8_Init+0x134>)
 800148e:	f641 1264 	movw	r2, #6500	; 0x1964
 8001492:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_TIM8_Init+0x134>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <MX_TIM8_Init+0x134>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_TIM8_Init+0x134>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014a6:	4832      	ldr	r0, [pc, #200]	; (8001570 <MX_TIM8_Init+0x134>)
 80014a8:	f003 fb38 	bl	8004b1c <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014b2:	f7ff fdd9 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c0:	4619      	mov	r1, r3
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <MX_TIM8_Init+0x134>)
 80014c4:	f003 fe0c 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ce:	f7ff fdcb 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <MX_TIM8_Init+0x134>)
 80014d4:	f003 fc4a 	bl	8004d6c <HAL_TIM_OC_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014de:	f7ff fdc3 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e2:	2320      	movs	r3, #32
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ee:	4619      	mov	r1, r3
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_TIM8_Init+0x134>)
 80014f2:	f004 f9cb 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014fc:	f7ff fdb4 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <MX_TIM8_Init+0x134>)
 8001526:	f003 fd83 	bl	8005030 <HAL_TIM_OC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001530:	f7ff fd9a 	bl	8001068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM8_Init+0x134>)
 8001558:	f004 fa14 	bl	8005984 <HAL_TIMEx_ConfigBreakDeadTime>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001562:	f7ff fd81 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3758      	adds	r7, #88	; 0x58
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004dcc 	.word	0x20004dcc
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_TIM_Base_MspInit+0x48>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d115      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	202e      	movs	r0, #46	; 0x2e
 80015ac:	f000 fe82 	bl	80022b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80015b0:	202e      	movs	r0, #46	; 0x2e
 80015b2:	f000 fe9b 	bl	80022ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010400 	.word	0x40010400
 80015c4:	40023800 	.word	0x40023800

080015c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_USART1_UART_Init+0x50>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 8001600:	f004 fa26 	bl	8005a50 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800160a:	f7ff fd2d 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20004e74 	.word	0x20004e74
 8001618:	40011000 	.word	0x40011000

0800161c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART2_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001628:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001654:	f004 f9fc 	bl	8005a50 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f7ff fd03 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20004eb8 	.word	0x20004eb8
 800166c:	40004400 	.word	0x40004400

08001670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_UART_MspInit+0x158>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12d      	bne.n	80016ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_UART_MspInit+0x15c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_UART_MspInit+0x15c>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a45      	ldr	r2, [pc, #276]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016dc:	2307      	movs	r3, #7
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	483a      	ldr	r0, [pc, #232]	; (80017d0 <HAL_UART_MspInit+0x160>)
 80016e8:	f001 fa10 	bl	8002b0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016ec:	e067      	b.n	80017be <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x164>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d162      	bne.n	80017be <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_UART_MspInit+0x15c>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_UART_MspInit+0x15c>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_UART_MspInit+0x15c>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_UART_MspInit+0x15c>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <HAL_UART_MspInit+0x15c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_UART_MspInit+0x15c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001730:	230c      	movs	r3, #12
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001740:	2307      	movs	r3, #7
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4821      	ldr	r0, [pc, #132]	; (80017d0 <HAL_UART_MspInit+0x160>)
 800174c:	f001 f9de 	bl	8002b0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_UART_MspInit+0x16c>)
 8001754:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_UART_MspInit+0x168>)
 800176c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001770:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x168>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001784:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_UART_MspInit+0x168>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001792:	4811      	ldr	r0, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x168>)
 8001794:	f000 fdb8 	bl	8002308 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800179e:	f7ff fc63 	bl	8001068 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_UART_MspInit+0x168>)
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_UART_MspInit+0x168>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2026      	movs	r0, #38	; 0x26
 80017b4:	f000 fd7e 	bl	80022b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017b8:	2026      	movs	r0, #38	; 0x26
 80017ba:	f000 fd97 	bl	80022ec <HAL_NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3730      	adds	r7, #48	; 0x30
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40004400 	.word	0x40004400
 80017d8:	20004e14 	.word	0x20004e14
 80017dc:	40026088 	.word	0x40026088

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180a:	f7ff fe05 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f00c f9a7 	bl	800db60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff f881 	bl	8000918 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8001824:	0800e618 	.word	0x0800e618
  ldr r2, =_sbss
 8001828:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 800182c:	20005828 	.word	0x20005828

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 fd1e 	bl	800229e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fce2 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fcb4 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000020 	.word	0x20000020
 800189c:	20004efc 	.word	0x20004efc

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20004efc 	.word	0x20004efc

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000020 	.word	0x20000020

08001900 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e033      	b.n	800197e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7fe fe42 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001946:	f023 0302 	bic.w	r3, r3, #2
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fa78 	bl	8001e48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
 800196e:	e001      	b.n	8001974 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start_DMA+0x1e>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e0e9      	b.n	8001b7a <HAL_ADC_Start_DMA+0x1f2>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d018      	beq.n	80019ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_ADC_Start_DMA+0x1fc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6d      	ldr	r2, [pc, #436]	; (8001b88 <HAL_ADC_Start_DMA+0x200>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9a      	lsrs	r2, r3, #18
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fc:	d107      	bne.n	8001a0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 80a1 	bne.w	8001b60 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d106      	bne.n	8001a6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f023 0206 	bic.w	r2, r3, #6
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
 8001a6a:	e002      	b.n	8001a72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_ADC_Start_DMA+0x204>)
 8001a7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <HAL_ADC_Start_DMA+0x208>)
 8001a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_ADC_Start_DMA+0x20c>)
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <HAL_ADC_Start_DMA+0x210>)
 8001a94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001abe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	334c      	adds	r3, #76	; 0x4c
 8001aca:	4619      	mov	r1, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f000 fcc8 	bl	8002464 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d12a      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <HAL_ADC_Start_DMA+0x214>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d015      	beq.n	8001b16 <HAL_ADC_Start_DMA+0x18e>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <HAL_ADC_Start_DMA+0x218>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_Start_DMA+0x178>
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_ADC_Start_DMA+0x204>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_ADC_Start_DMA+0x21c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d136      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_ADC_Start_DMA+0x204>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d130      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d129      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e020      	b.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_ADC_Start_DMA+0x214>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d114      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f043 0210 	orr.w	r2, r3, #16
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000018 	.word	0x20000018
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	40012300 	.word	0x40012300
 8001b90:	08002041 	.word	0x08002041
 8001b94:	080020fb 	.word	0x080020fb
 8001b98:	08002117 	.word	0x08002117
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	40012100 	.word	0x40012100
 8001ba4:	40012200 	.word	0x40012200

08001ba8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1c>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e113      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x244>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d925      	bls.n	8001c5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68d9      	ldr	r1, [r3, #12]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3b1e      	subs	r3, #30
 8001c26:	2207      	movs	r2, #7
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	400a      	ands	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68d9      	ldr	r1, [r3, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	4603      	mov	r3, r0
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4403      	add	r3, r0
 8001c4e:	3b1e      	subs	r3, #30
 8001c50:	409a      	lsls	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	e022      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6919      	ldr	r1, [r3, #16]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	2207      	movs	r2, #7
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4403      	add	r3, r0
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d824      	bhi.n	8001cf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b05      	subs	r3, #5
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b05      	subs	r3, #5
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf2:	e04c      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d824      	bhi.n	8001d46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b23      	subs	r3, #35	; 0x23
 8001d0e:	221f      	movs	r2, #31
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43da      	mvns	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b23      	subs	r3, #35	; 0x23
 8001d38:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
 8001d44:	e023      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3b41      	subs	r3, #65	; 0x41
 8001d58:	221f      	movs	r2, #31
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	400a      	ands	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b41      	subs	r3, #65	; 0x41
 8001d82:	fa00 f203 	lsl.w	r2, r0, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_ADC_ConfigChannel+0x250>)
 8001d90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <HAL_ADC_ConfigChannel+0x254>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10f      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d8>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_ADC_ConfigChannel+0x254>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_ADC_ConfigChannel+0x258>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b11      	cmp	r3, #17
 8001dd6:	d122      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_ADC_ConfigChannel+0x258>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d111      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_ADC_ConfigChannel+0x25c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_ADC_ConfigChannel+0x260>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9a      	lsrs	r2, r3, #18
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40012300 	.word	0x40012300
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	10000012 	.word	0x10000012
 8001e40:	20000018 	.word	0x20000018
 8001e44:	431bde83 	.word	0x431bde83

08001e48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e50:	4b79      	ldr	r3, [pc, #484]	; (8002038 <ADC_Init+0x1f0>)
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <ADC_Init+0x1f4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e00f      	b.n	8001f46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0202 	bic.w	r2, r2, #2
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	005a      	lsls	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6859      	ldr	r1, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	035a      	lsls	r2, r3, #13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	e007      	b.n	8001fbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	051a      	lsls	r2, r3, #20
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffe:	025a      	lsls	r2, r3, #9
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	029a      	lsls	r2, r3, #10
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40012300 	.word	0x40012300
 800203c:	0f000001 	.word	0x0f000001

08002040 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002056:	2b00      	cmp	r3, #0
 8002058:	d13c      	bne.n	80020d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12b      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d127      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002094:	2b00      	cmp	r3, #0
 8002096:	d119      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0220 	bic.w	r2, r2, #32
 80020a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fd6b 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020d2:	e00e      	b.n	80020f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fd75 	bl	8001bd0 <HAL_ADC_ErrorCallback>
}
 80020e6:	e004      	b.n	80020f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fd57 	bl	8001bbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f043 0204 	orr.w	r2, r3, #4
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff fd4a 	bl	8001bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff4c 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c6:	f7ff ff61 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f7ff ffb1 	bl	8002238 <NVIC_EncodePriority>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff80 	bl	80021e4 <__NVIC_SetPriority>
}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff54 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fac4 	bl	80018a0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e099      	b.n	8002458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002344:	e00f      	b.n	8002366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002346:	f7ff faab 	bl	80018a0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b05      	cmp	r3, #5
 8002352:	d908      	bls.n	8002366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e078      	b.n	8002458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e8      	bne.n	8002346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_DMA_Init+0x158>)
 8002380:	4013      	ands	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d107      	bne.n	80023d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4313      	orrs	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0307 	bic.w	r3, r3, #7
 80023e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d117      	bne.n	800242a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fb01 	bl	8002a14 <DMA_CheckFifoParam>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002426:	2301      	movs	r3, #1
 8002428:	e016      	b.n	8002458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fab8 	bl	80029a8 <DMA_CalcBaseAndBitshift>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	f010803f 	.word	0xf010803f

08002464 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_DMA_Start_IT+0x26>
 8002486:	2302      	movs	r3, #2
 8002488:	e040      	b.n	800250c <HAL_DMA_Start_IT+0xa8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d12f      	bne.n	80024fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fa4a 	bl	800294c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	223f      	movs	r2, #63	; 0x3f
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0216 	orr.w	r2, r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0208 	orr.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e005      	b.n	800250a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002522:	f7ff f9bd 	bl	80018a0 <HAL_GetTick>
 8002526:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d008      	beq.n	8002546 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e052      	b.n	80025ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0216 	bic.w	r2, r2, #22
 8002554:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <HAL_DMA_Abort+0x62>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002596:	e013      	b.n	80025c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002598:	f7ff f982 	bl	80018a0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d90c      	bls.n	80025c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e015      	b.n	80025ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e4      	bne.n	8002598 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	223f      	movs	r2, #63	; 0x3f
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00c      	b.n	800262c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002644:	4b92      	ldr	r3, [pc, #584]	; (8002890 <HAL_DMA_IRQHandler+0x258>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a92      	ldr	r2, [pc, #584]	; (8002894 <HAL_DMA_IRQHandler+0x25c>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2208      	movs	r2, #8
 8002664:	409a      	lsls	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2208      	movs	r2, #8
 8002692:	409a      	lsls	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	2201      	movs	r2, #1
 80026c8:	409a      	lsls	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2204      	movs	r2, #4
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2204      	movs	r2, #4
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2210      	movs	r2, #16
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d043      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d03c      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2210      	movs	r2, #16
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d018      	beq.n	800277a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
 8002766:	e01f      	b.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	e016      	b.n	80027a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0208 	bic.w	r2, r2, #8
 8002796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2220      	movs	r2, #32
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 808e 	beq.w	80028d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8086 	beq.w	80028d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2220      	movs	r2, #32
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d136      	bne.n	8002850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0216 	bic.w	r2, r2, #22
 80027f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_DMA_IRQHandler+0x1da>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0208 	bic.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	223f      	movs	r2, #63	; 0x3f
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	d07d      	beq.n	8002942 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
        }
        return;
 800284e:	e078      	b.n	8002942 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	2b00      	cmp	r3, #0
 8002872:	d030      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e02b      	b.n	80028d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d027      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e022      	b.n	80028d6 <HAL_DMA_IRQHandler+0x29e>
 8002890:	20000018 	.word	0x20000018
 8002894:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0210 	bic.w	r2, r2, #16
 80028b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d032      	beq.n	8002944 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d022      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2205      	movs	r2, #5
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	429a      	cmp	r2, r3
 800290c:	d307      	bcc.n	800291e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f2      	bne.n	8002902 <HAL_DMA_IRQHandler+0x2ca>
 800291c:	e000      	b.n	8002920 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800291e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
 8002940:	e000      	b.n	8002944 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002942:	bf00      	nop
    }
  }
}
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop

0800294c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002968:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d108      	bne.n	800298c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800298a:	e007      	b.n	800299c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3b10      	subs	r3, #16
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <DMA_CalcBaseAndBitshift+0x64>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <DMA_CalcBaseAndBitshift+0x68>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d909      	bls.n	80029ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
 80029e8:	e007      	b.n	80029fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	aaaaaaab 	.word	0xaaaaaaab
 8002a10:	0800e59c 	.word	0x0800e59c

08002a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0x5a>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d856      	bhi.n	8002ae2 <DMA_CheckFifoParam+0xce>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <DMA_CheckFifoParam+0x28>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a5f 	.word	0x08002a5f
 8002a44:	08002a4d 	.word	0x08002a4d
 8002a48:	08002ae3 	.word	0x08002ae3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e043      	b.n	8002ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a66:	d140      	bne.n	8002aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e03d      	b.n	8002aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a76:	d121      	bne.n	8002abc <DMA_CheckFifoParam+0xa8>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d837      	bhi.n	8002aee <DMA_CheckFifoParam+0xda>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <DMA_CheckFifoParam+0x70>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002a9b 	.word	0x08002a9b
 8002a8c:	08002a95 	.word	0x08002a95
 8002a90:	08002aad 	.word	0x08002aad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e030      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d025      	beq.n	8002af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aaa:	e022      	b.n	8002af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ab4:	d11f      	bne.n	8002af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aba:	e01c      	b.n	8002af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d903      	bls.n	8002aca <DMA_CheckFifoParam+0xb6>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d003      	beq.n	8002ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac8:	e018      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ace:	e015      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e00b      	b.n	8002afa <DMA_CheckFifoParam+0xe6>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e00a      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e008      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e006      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e004      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;   
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
    }
  } 
  
  return status; 
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e177      	b.n	8002e18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8166 	bne.w	8002e12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80c0 	beq.w	8002e12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a61      	ldr	r2, [pc, #388]	; (8002e34 <HAL_GPIO_Init+0x328>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_GPIO_Init+0x32c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d037      	beq.n	8002d4a <HAL_GPIO_Init+0x23e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d031      	beq.n	8002d46 <HAL_GPIO_Init+0x23a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_GPIO_Init+0x334>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02b      	beq.n	8002d42 <HAL_GPIO_Init+0x236>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a55      	ldr	r2, [pc, #340]	; (8002e44 <HAL_GPIO_Init+0x338>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d025      	beq.n	8002d3e <HAL_GPIO_Init+0x232>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a54      	ldr	r2, [pc, #336]	; (8002e48 <HAL_GPIO_Init+0x33c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <HAL_GPIO_Init+0x22e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a53      	ldr	r2, [pc, #332]	; (8002e4c <HAL_GPIO_Init+0x340>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d019      	beq.n	8002d36 <HAL_GPIO_Init+0x22a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_GPIO_Init+0x344>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0x226>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a51      	ldr	r2, [pc, #324]	; (8002e54 <HAL_GPIO_Init+0x348>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_GPIO_Init+0x222>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a50      	ldr	r2, [pc, #320]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0x21e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002d22:	2309      	movs	r3, #9
 8002d24:	e012      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d26:	230a      	movs	r3, #10
 8002d28:	e010      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	e00e      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d2e:	2307      	movs	r3, #7
 8002d30:	e00c      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d32:	2306      	movs	r3, #6
 8002d34:	e00a      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d36:	2305      	movs	r3, #5
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x240>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_GPIO_Init+0x328>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d8e:	4a34      	ldr	r2, [pc, #208]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d94:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de2:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_GPIO_Init+0x354>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f ae84 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40021c00 	.word	0x40021c00
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40022400 	.word	0x40022400
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e001      	b.n	8002e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fdec 	bl	8000ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b08f      	sub	sp, #60	; 0x3c
 8002efc:	af0a      	add	r7, sp, #40	; 0x28
 8002efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e10f      	b.n	800312a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f00a fb13 	bl	800d550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fda0 	bl	8006a8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	687e      	ldr	r6, [r7, #4]
 8002f56:	466d      	mov	r5, sp
 8002f58:	f106 0410 	add.w	r4, r6, #16
 8002f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f6c:	1d33      	adds	r3, r6, #4
 8002f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f003 fc77 	bl	8006864 <USB_CoreInit>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fd8e 	bl	8006ab0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e04a      	b.n	8003030 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333d      	adds	r3, #61	; 0x3d
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	333c      	adds	r3, #60	; 0x3c
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	b298      	uxth	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3342      	adds	r3, #66	; 0x42
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333f      	adds	r3, #63	; 0x3f
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3344      	adds	r3, #68	; 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3348      	adds	r3, #72	; 0x48
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3350      	adds	r3, #80	; 0x50
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3af      	bcc.n	8002f9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e044      	b.n	80030ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3b5      	bcc.n	8003040 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	687e      	ldr	r6, [r7, #4]
 80030dc:	466d      	mov	r5, sp
 80030de:	f106 0410 	add.w	r4, r6, #16
 80030e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f2:	1d33      	adds	r3, r6, #4
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f003 fd04 	bl	8006b04 <USB_DevInit>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e00d      	b.n	800312a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fd4c 	bl	8007bc0 <USB_DevDisconnect>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003132 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_PCD_Start+0x1c>
 800314a:	2302      	movs	r3, #2
 800314c:	e020      	b.n	8003190 <HAL_PCD_Start+0x5e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	2b01      	cmp	r3, #1
 800315c:	d109      	bne.n	8003172 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003162:	2b01      	cmp	r3, #1
 8003164:	d005      	beq.n	8003172 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fc78 	bl	8006a6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f004 fcfc 	bl	8007b7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b08d      	sub	sp, #52	; 0x34
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fdba 	bl	8007d28 <USB_GetMode>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 839d 	bne.w	80038f6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fd1e 	bl	8007c02 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8393 	beq.w	80038f4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 fd15 	bl	8007c02 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f002 0202 	and.w	r2, r2, #2
 80031f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fd03 	bl	8007c02 <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d161      	bne.n	80032ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0210 	bic.w	r2, r2, #16
 8003214:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	0c5b      	lsrs	r3, r3, #17
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	2b02      	cmp	r3, #2
 8003240:	d124      	bne.n	800328c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d035      	beq.n	80032ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	6a38      	ldr	r0, [r7, #32]
 8003262:	f004 fb69 	bl	8007938 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003272:	441a      	add	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003284:	441a      	add	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	619a      	str	r2, [r3, #24]
 800328a:	e016      	b.n	80032ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	0c5b      	lsrs	r3, r3, #17
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	2b06      	cmp	r3, #6
 8003296:	d110      	bne.n	80032ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800329e:	2208      	movs	r2, #8
 80032a0:	4619      	mov	r1, r3
 80032a2:	6a38      	ldr	r0, [r7, #32]
 80032a4:	f004 fb48 	bl	8007938 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b4:	441a      	add	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0210 	orr.w	r2, r2, #16
 80032c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fc97 	bl	8007c02 <USB_ReadInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032de:	d16e      	bne.n	80033be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fc9d 	bl	8007c28 <USB_ReadDevAllOutEpInterrupt>
 80032ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032f0:	e062      	b.n	80033b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d057      	beq.n	80033ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f004 fcc2 	bl	8007c90 <USB_ReadDevOutEPInterrupt>
 800330c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	2301      	movs	r3, #1
 8003328:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800332a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fd99 	bl	8003e64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	2308      	movs	r3, #8
 800334c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800334e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fe93 	bl	800407c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2310      	movs	r3, #16
 8003370:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	2320      	movs	r3, #32
 800338c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a4:	461a      	mov	r2, r3
 80033a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	3301      	adds	r3, #1
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d199      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fc1d 	bl	8007c02 <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033d2:	f040 80c0 	bne.w	8003556 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 fc3e 	bl	8007c5c <USB_ReadDevAllInEpInterrupt>
 80033e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033e6:	e0b2      	b.n	800354e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80a7 	beq.w	8003542 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fc64 	bl	8007ccc <USB_ReadDevInEPInterrupt>
 8003404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d057      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003430:	4013      	ands	r3, r2
 8003432:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	461a      	mov	r2, r3
 8003442:	2301      	movs	r3, #1
 8003444:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d132      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	3344      	adds	r3, #68	; 0x44
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4419      	add	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4403      	add	r3, r0
 8003482:	3348      	adds	r3, #72	; 0x48
 8003484:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d113      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x31c>
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3350      	adds	r3, #80	; 0x50
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ac:	461a      	mov	r2, r3
 80034ae:	2101      	movs	r1, #1
 80034b0:	f004 fc6c 	bl	8007d8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f00a f8c9 	bl	800d652 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	461a      	mov	r2, r3
 80034d8:	2308      	movs	r3, #8
 80034da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f2:	461a      	mov	r2, r3
 80034f4:	2310      	movs	r3, #16
 80034f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	461a      	mov	r2, r3
 8003510:	2340      	movs	r3, #64	; 0x40
 8003512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	461a      	mov	r2, r3
 800352c:	2302      	movs	r3, #2
 800352e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fc03 	bl	8003d48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af49 	bne.w	80033e8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fb51 	bl	8007c02 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356a:	d122      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fe0f 	bl	80041b8 <HAL_PCDEx_LPM_Callback>
 800359a:	e002      	b.n	80035a2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f00a f8cf 	bl	800d740 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 fb23 	bl	8007c02 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c6:	d112      	bne.n	80035ee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d102      	bne.n	80035de <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f00a f88b 	bl	800d6f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 fb05 	bl	8007c02 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	f040 80c7 	bne.w	8003794 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2110      	movs	r1, #16
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fbd3 	bl	8006dcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	e056      	b.n	80036da <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	461a      	mov	r2, r3
 800363a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800363e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	440a      	add	r2, r1
 8003656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800365e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003692:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	3301      	adds	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3a3      	bcc.n	800362c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003710:	f043 030b 	orr.w	r3, r3, #11
 8003714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003726:	f043 030b 	orr.w	r3, r3, #11
 800372a:	6453      	str	r3, [r2, #68]	; 0x44
 800372c:	e015      	b.n	800375a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003740:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003744:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003754:	f043 030b 	orr.w	r3, r3, #11
 8003758:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800376c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800377e:	461a      	mov	r2, r3
 8003780:	f004 fb04 	bl	8007d8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fa32 	bl	8007c02 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a8:	d124      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 fac8 	bl	8007d44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fb68 	bl	8006e8e <USB_GetDevSpeed>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	f001 f941 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 80037ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4620      	mov	r0, r4
 80037da:	f003 f8a5 	bl	8006928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f009 ff5f 	bl	800d6a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fa02 	bl	8007c02 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d10a      	bne.n	800381e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f009 ff3c 	bl	800d686 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 0208 	and.w	r2, r2, #8
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f004 f9ed 	bl	8007c02 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	d10f      	bne.n	8003854 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f009 ff9e 	bl	800d780 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 f9d2 	bl	8007c02 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d10f      	bne.n	800388a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f009 ff71 	bl	800d75c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 f9b7 	bl	8007c02 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d10a      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f009 ff7f 	bl	800d7a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 f9a1 	bl	8007c02 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d115      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f009 ff6f 	bl	800d7c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e000      	b.n	80038f6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80038f4:	bf00      	nop
    }
  }
}
 80038f6:	3734      	adds	r7, #52	; 0x34
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd90      	pop	{r4, r7, pc}

080038fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_PCD_SetAddress+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e013      	b.n	800393e <HAL_PCD_SetAddress+0x42>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f004 f8ff 	bl	8007b32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	4608      	mov	r0, r1
 8003950:	4611      	mov	r1, r2
 8003952:	461a      	mov	r2, r3
 8003954:	4603      	mov	r3, r0
 8003956:	70fb      	strb	r3, [r7, #3]
 8003958:	460b      	mov	r3, r1
 800395a:	803b      	strh	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da0f      	bge.n	800398c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3338      	adds	r3, #56	; 0x38
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	3304      	adds	r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	705a      	strb	r2, [r3, #1]
 800398a:	e00f      	b.n	80039ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 020f 	and.w	r2, r3, #15
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039b8:	883a      	ldrh	r2, [r7, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	78ba      	ldrb	r2, [r7, #2]
 80039c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d6:	78bb      	ldrb	r3, [r7, #2]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_PCD_EP_Open+0xaa>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Open+0xc8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fa6a 	bl	8006ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da0f      	bge.n	8003a4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3338      	adds	r3, #56	; 0x38
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
 8003a48:	e00f      	b.n	8003a6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_Close+0x6e>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e00e      	b.n	8003aa2 <HAL_PCD_EP_Close+0x8c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 faa8 	bl	8006fe8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6979      	ldr	r1, [r7, #20]
 8003b1e:	f003 fd83 	bl	8007628 <USB_EP0StartXfer>
 8003b22:	e008      	b.n	8003b36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6979      	ldr	r1, [r7, #20]
 8003b32:	f003 fb35 	bl	80071a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	3338      	adds	r3, #56	; 0x38
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6979      	ldr	r1, [r7, #20]
 8003bb2:	f003 fd39 	bl	8007628 <USB_EP0StartXfer>
 8003bb6:	e008      	b.n	8003bca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	f003 faeb 	bl	80071a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d901      	bls.n	8003bf2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e050      	b.n	8003c94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da0f      	bge.n	8003c1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3338      	adds	r3, #56	; 0x38
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	705a      	strb	r2, [r3, #1]
 8003c18:	e00d      	b.n	8003c36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_EP_SetStall+0x82>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e01e      	b.n	8003c94 <HAL_PCD_EP_SetStall+0xc0>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 fe90 	bl	800798a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	b2d9      	uxtb	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c84:	461a      	mov	r2, r3
 8003c86:	f004 f881 	bl	8007d8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d901      	bls.n	8003cba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e042      	b.n	8003d40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da0f      	bge.n	8003ce2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	3338      	adds	r3, #56	; 0x38
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	705a      	strb	r2, [r3, #1]
 8003ce0:	e00f      	b.n	8003d02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_PCD_EP_ClrStall+0x86>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e00e      	b.n	8003d40 <HAL_PCD_EP_ClrStall+0xa4>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f003 fe98 	bl	8007a66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3338      	adds	r3, #56	; 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d901      	bls.n	8003d80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e06c      	b.n	8003e5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d902      	bls.n	8003d9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3303      	adds	r3, #3
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003da4:	e02b      	b.n	8003dfe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d902      	bls.n	8003dc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3303      	adds	r3, #3
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4603      	mov	r3, r0
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f003 fd74 	bl	80078ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d809      	bhi.n	8003e28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d203      	bcs.n	8003e28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1be      	bne.n	8003da6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d811      	bhi.n	8003e58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	6939      	ldr	r1, [r7, #16]
 8003e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e54:	4013      	ands	r3, r2
 8003e56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	333c      	adds	r3, #60	; 0x3c
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f040 80a0 	bne.w	8003fdc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a72      	ldr	r2, [pc, #456]	; (8004074 <PCD_EP_OutXfrComplete_int+0x210>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	f240 80dd 	bls.w	800406a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80d7 	beq.w	800406a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ece:	6093      	str	r3, [r2, #8]
 8003ed0:	e0cb      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2320      	movs	r3, #32
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e0bc      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 80b7 	bne.w	800406a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a5d      	ldr	r2, [pc, #372]	; (8004074 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d90f      	bls.n	8003f24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f20:	6093      	str	r3, [r2, #8]
 8003f22:	e0a2      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	440b      	add	r3, r1
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4403      	add	r3, r0
 8003f5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4403      	add	r3, r0
 8003f82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4419      	add	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4403      	add	r3, r0
 8003f98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <PCD_EP_OutXfrComplete_int+0x16a>
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2101      	movs	r1, #1
 8003fca:	f003 fedf 	bl	8007d8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f009 fb21 	bl	800d61c <HAL_PCD_DataOutStageCallback>
 8003fda:	e046      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d124      	bne.n	800402e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e032      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2320      	movs	r3, #32
 800401e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f009 faf8 	bl	800d61c <HAL_PCD_DataOutStageCallback>
 800402c:	e01d      	b.n	800406a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d114      	bne.n	800405e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004056:	461a      	mov	r2, r3
 8004058:	2100      	movs	r1, #0
 800405a:	f003 fe97 	bl	8007d8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f009 fad9 	bl	800d61c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	4f54300a 	.word	0x4f54300a
 8004078:	4f54310a 	.word	0x4f54310a

0800407c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	3304      	adds	r3, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a15      	ldr	r2, [pc, #84]	; (8004104 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d90e      	bls.n	80040d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f009 fa91 	bl	800d5f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <PCD_EP_OutSetupPacket_int+0x88>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d90c      	bls.n	80040f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d108      	bne.n	80040f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	f003 fe4a 	bl	8007d8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	4f54300a 	.word	0x4f54300a

08004108 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
 8004114:	4613      	mov	r3, r2
 8004116:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d107      	bne.n	8004136 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004126:	883b      	ldrh	r3, [r7, #0]
 8004128:	0419      	lsls	r1, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	430a      	orrs	r2, r1
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
 8004134:	e028      	b.n	8004188 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4413      	add	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	e00d      	b.n	8004166 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	3340      	adds	r3, #64	; 0x40
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	3301      	adds	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	3b01      	subs	r3, #1
 800416c:	429a      	cmp	r2, r3
 800416e:	d3ec      	bcc.n	800414a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004170:	883b      	ldrh	r3, [r7, #0]
 8004172:	0418      	lsls	r0, r3, #16
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	3b01      	subs	r3, #1
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	4302      	orrs	r2, r0
 8004180:	3340      	adds	r3, #64	; 0x40
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e264      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d075      	beq.n	80042da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ee:	4ba3      	ldr	r3, [pc, #652]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00c      	beq.n	8004214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4ba0      	ldr	r3, [pc, #640]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004202:	2b08      	cmp	r3, #8
 8004204:	d112      	bne.n	800422c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004206:	4b9d      	ldr	r3, [pc, #628]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b99      	ldr	r3, [pc, #612]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05b      	beq.n	80042d8 <HAL_RCC_OscConfig+0x108>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d157      	bne.n	80042d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e23f      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x74>
 8004236:	4b91      	ldr	r3, [pc, #580]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a90      	ldr	r2, [pc, #576]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e01d      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x98>
 800424e:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a8a      	ldr	r2, [pc, #552]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a87      	ldr	r2, [pc, #540]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004268:	4b84      	ldr	r3, [pc, #528]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a83      	ldr	r2, [pc, #524]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a80      	ldr	r2, [pc, #512]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fd fb0a 	bl	80018a0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fb06 	bl	80018a0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e204      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0xc0>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fd faf6 	bl	80018a0 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fd faf2 	bl	80018a0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1f0      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0xe8>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d063      	beq.n	80043ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e6:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b62      	ldr	r3, [pc, #392]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d11c      	bne.n	8004338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fe:	4b5f      	ldr	r3, [pc, #380]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430a:	4b5c      	ldr	r3, [pc, #368]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x152>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1c4      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	4b56      	ldr	r3, [pc, #344]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4952      	ldr	r1, [pc, #328]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	e03a      	b.n	80043ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004340:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_RCC_OscConfig+0x2b0>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd faab 	bl	80018a0 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434e:	f7fd faa7 	bl	80018a0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1a5      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	4b46      	ldr	r3, [pc, #280]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b43      	ldr	r3, [pc, #268]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4940      	ldr	r1, [pc, #256]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
 8004380:	e015      	b.n	80043ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_OscConfig+0x2b0>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fa8a 	bl	80018a0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004390:	f7fd fa86 	bl	80018a0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e184      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d030      	beq.n	800441c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b30      	ldr	r3, [pc, #192]	; (8004484 <HAL_RCC_OscConfig+0x2b4>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fa6a 	bl	80018a0 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fd fa66 	bl	80018a0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e164      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x200>
 80043ee:	e015      	b.n	800441c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCC_OscConfig+0x2b4>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fd fa53 	bl	80018a0 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fe:	f7fd fa4f 	bl	80018a0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e14d      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a0 	beq.w	800456a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a0e      	ldr	r2, [pc, #56]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <HAL_RCC_OscConfig+0x2ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_OscConfig+0x2b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d121      	bne.n	80044aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_RCC_OscConfig+0x2b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a07      	ldr	r2, [pc, #28]	; (8004488 <HAL_RCC_OscConfig+0x2b8>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fd fa15 	bl	80018a0 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e011      	b.n	800449e <HAL_RCC_OscConfig+0x2ce>
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	42470000 	.word	0x42470000
 8004484:	42470e80 	.word	0x42470e80
 8004488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fd fa08 	bl	80018a0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e106      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <HAL_RCC_OscConfig+0x4e4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x2f0>
 80044b2:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a80      	ldr	r2, [pc, #512]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	e01c      	b.n	80044fa <HAL_RCC_OscConfig+0x32a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCC_OscConfig+0x312>
 80044c8:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a7a      	ldr	r2, [pc, #488]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
 80044e0:	e00b      	b.n	80044fa <HAL_RCC_OscConfig+0x32a>
 80044e2:	4b75      	ldr	r3, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a74      	ldr	r2, [pc, #464]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a71      	ldr	r2, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004502:	f7fd f9cd 	bl	80018a0 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fd f9c9 	bl	80018a0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f241 3288 	movw	r2, #5000	; 0x1388
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0c5      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ee      	beq.n	800450a <HAL_RCC_OscConfig+0x33a>
 800452c:	e014      	b.n	8004558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fd f9b7 	bl	80018a0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd f9b3 	bl	80018a0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0af      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	4b5a      	ldr	r3, [pc, #360]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ee      	bne.n	8004536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	4a55      	ldr	r2, [pc, #340]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 809b 	beq.w	80046aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d05c      	beq.n	800463a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d141      	bne.n	800460c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b4c      	ldr	r3, [pc, #304]	; (80046bc <HAL_RCC_OscConfig+0x4ec>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fd f987 	bl	80018a0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004596:	f7fd f983 	bl	80018a0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e081      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a8:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	019b      	lsls	r3, r3, #6
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	4937      	ldr	r1, [pc, #220]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <HAL_RCC_OscConfig+0x4ec>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd f95c 	bl	80018a0 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd f958 	bl	80018a0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e056      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x41c>
 800460a:	e04e      	b.n	80046aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_RCC_OscConfig+0x4ec>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fd f945 	bl	80018a0 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461a:	f7fd f941 	bl	80018a0 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e03f      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x44a>
 8004638:	e037      	b.n	80046aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e032      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_RCC_OscConfig+0x4e8>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d028      	beq.n	80046a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d11a      	bne.n	80046a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467e:	4293      	cmp	r3, r2
 8004680:	d111      	bne.n	80046a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40007000 	.word	0x40007000
 80046b8:	40023800 	.word	0x40023800
 80046bc:	42470060 	.word	0x42470060

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0cc      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b68      	ldr	r3, [pc, #416]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90c      	bls.n	80046fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0b8      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004714:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800472c:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a52      	ldr	r2, [pc, #328]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	494d      	ldr	r1, [pc, #308]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d044      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d119      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e07f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d003      	beq.n	800477e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477a:	2b03      	cmp	r3, #3
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e067      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4934      	ldr	r1, [pc, #208]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b0:	f7fd f876 	bl	80018a0 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7fd f872 	bl	80018a0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e04f      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 020c 	and.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1eb      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d20c      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e032      	b.n	800486e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4916      	ldr	r1, [pc, #88]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	490e      	ldr	r1, [pc, #56]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004846:	f000 f821 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800484a:	4602      	mov	r2, r0
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	490a      	ldr	r1, [pc, #40]	; (8004880 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	5ccb      	ldrb	r3, [r1, r3]
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fce0 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023c00 	.word	0x40023c00
 800487c:	40023800 	.word	0x40023800
 8004880:	0800e584 	.word	0x0800e584
 8004884:	20000018 	.word	0x20000018
 8004888:	2000001c 	.word	0x2000001c

0800488c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	2300      	movs	r3, #0
 800489e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a4:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d00d      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x40>
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	f200 80bd 	bhi.w	8004a30 <HAL_RCC_GetSysClockFreq+0x1a4>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048be:	e0b7      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048c2:	60bb      	str	r3, [r7, #8]
       break;
 80048c4:	e0b7      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c6:	4b61      	ldr	r3, [pc, #388]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048c8:	60bb      	str	r3, [r7, #8]
      break;
 80048ca:	e0b4      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048cc:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04d      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	461a      	mov	r2, r3
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	ea02 0800 	and.w	r8, r2, r0
 80048fa:	ea03 0901 	and.w	r9, r3, r1
 80048fe:	4640      	mov	r0, r8
 8004900:	4649      	mov	r1, r9
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	014b      	lsls	r3, r1, #5
 800490c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004910:	0142      	lsls	r2, r0, #5
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	ebb0 0008 	subs.w	r0, r0, r8
 800491a:	eb61 0109 	sbc.w	r1, r1, r9
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	018b      	lsls	r3, r1, #6
 8004928:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800492c:	0182      	lsls	r2, r0, #6
 800492e:	1a12      	subs	r2, r2, r0
 8004930:	eb63 0301 	sbc.w	r3, r3, r1
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	00d9      	lsls	r1, r3, #3
 800493e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004942:	00d0      	lsls	r0, r2, #3
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	eb12 0208 	adds.w	r2, r2, r8
 800494c:	eb43 0309 	adc.w	r3, r3, r9
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	0259      	lsls	r1, r3, #9
 800495a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800495e:	0250      	lsls	r0, r2, #9
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f7fb fc3e 	bl	80001f0 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e04a      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	099b      	lsrs	r3, r3, #6
 8004984:	461a      	mov	r2, r3
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	ea02 0400 	and.w	r4, r2, r0
 8004996:	ea03 0501 	and.w	r5, r3, r1
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	014b      	lsls	r3, r1, #5
 80049a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049ac:	0142      	lsls	r2, r0, #5
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	1b00      	subs	r0, r0, r4
 80049b4:	eb61 0105 	sbc.w	r1, r1, r5
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	018b      	lsls	r3, r1, #6
 80049c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049c6:	0182      	lsls	r2, r0, #6
 80049c8:	1a12      	subs	r2, r2, r0
 80049ca:	eb63 0301 	sbc.w	r3, r3, r1
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	00d9      	lsls	r1, r3, #3
 80049d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049dc:	00d0      	lsls	r0, r2, #3
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	1912      	adds	r2, r2, r4
 80049e4:	eb45 0303 	adc.w	r3, r5, r3
 80049e8:	f04f 0000 	mov.w	r0, #0
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	0299      	lsls	r1, r3, #10
 80049f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049f6:	0290      	lsls	r0, r2, #10
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	f7fb fbf2 	bl	80001f0 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4613      	mov	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	60bb      	str	r3, [r7, #8]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a32:	60bb      	str	r3, [r7, #8]
      break;
 8004a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a36:	68bb      	ldr	r3, [r7, #8]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800
 8004a48:	00f42400 	.word	0x00f42400
 8004a4c:	007a1200 	.word	0x007a1200

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000018 	.word	0x20000018

08004a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a6c:	f7ff fff0 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4903      	ldr	r1, [pc, #12]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800e594 	.word	0x0800e594

08004a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a94:	f7ff ffdc 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0b5b      	lsrs	r3, r3, #13
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800e594 	.word	0x0800e594

08004ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	220f      	movs	r2, #15
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_GetClockConfig+0x5c>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_GetClockConfig+0x5c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	08db      	lsrs	r3, r3, #3
 8004af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <HAL_RCC_GetClockConfig+0x60>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 020f 	and.w	r2, r3, #15
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40023c00 	.word	0x40023c00

08004b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e041      	b.n	8004bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fd18 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 fbac 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e046      	b.n	8004c62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <HAL_TIM_Base_Start+0xb4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d01d      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_TIM_Base_Start+0xb8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_TIM_Base_Start+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_TIM_Base_Start+0xc0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_TIM_Base_Start+0xc4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_TIM_Base_Start+0xc8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIM_Base_Start+0x70>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <HAL_TIM_Base_Start+0xcc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d111      	bne.n	8004c50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d010      	beq.n	8004c60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	e007      	b.n	8004c60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40001800 	.word	0x40001800

08004c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e04e      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	e007      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800

08004d6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e041      	b.n	8004e02 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f839 	bl	8004e0a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 fa84 	bl	80052b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d122      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d11b      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0202 	mvn.w	r2, #2
 8004e4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa0b 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004e66:	e005      	b.n	8004e74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f9fd 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa0e 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d122      	bne.n	8004ece <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d11b      	bne.n	8004ece <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0204 	mvn.w	r2, #4
 8004e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f9e1 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004eba:	e005      	b.n	8004ec8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f9d3 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f9e4 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d122      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d11b      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0208 	mvn.w	r2, #8
 8004ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9b7 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004f0e:	e005      	b.n	8004f1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9a9 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9ba 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d122      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d11b      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0210 	mvn.w	r2, #16
 8004f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f98d 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004f62:	e005      	b.n	8004f70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f97f 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f990 	bl	8005290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0201 	mvn.w	r2, #1
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc f851 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d10e      	bne.n	8004fce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d107      	bne.n	8004fce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fd37 	bl	8005a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d10e      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d107      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f955 	bl	80052a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b20      	cmp	r3, #32
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0220 	mvn.w	r2, #32
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fd01 	bl	8005a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e046      	b.n	80050d8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d839      	bhi.n	80050cc <HAL_TIM_OC_ConfigChannel+0x9c>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <HAL_TIM_OC_ConfigChannel+0x30>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005095 	.word	0x08005095
 8005064:	080050cd 	.word	0x080050cd
 8005068:	080050cd 	.word	0x080050cd
 800506c:	080050cd 	.word	0x080050cd
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050cd 	.word	0x080050cd
 8005078:	080050cd 	.word	0x080050cd
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080050b1 	.word	0x080050b1
 8005084:	080050cd 	.word	0x080050cd
 8005088:	080050cd 	.word	0x080050cd
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050bf 	.word	0x080050bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f9ac 	bl	80053f8 <TIM_OC1_SetConfig>
      break;
 80050a0:	e015      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fa15 	bl	80054d8 <TIM_OC2_SetConfig>
      break;
 80050ae:	e00e      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa84 	bl	80055c4 <TIM_OC3_SetConfig>
      break;
 80050bc:	e007      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 faf1 	bl	80056ac <TIM_OC4_SetConfig>
      break;
 80050ca:	e000      	b.n	80050ce <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80050cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_ConfigClockSource+0x18>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e0b3      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x180>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005130:	d03e      	beq.n	80051b0 <HAL_TIM_ConfigClockSource+0xd0>
 8005132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005136:	f200 8087 	bhi.w	8005248 <HAL_TIM_ConfigClockSource+0x168>
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	f000 8085 	beq.w	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d87f      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d01a      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0xa2>
 800514c:	2b70      	cmp	r3, #112	; 0x70
 800514e:	d87b      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d050      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x116>
 8005154:	2b60      	cmp	r3, #96	; 0x60
 8005156:	d877      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005158:	2b50      	cmp	r3, #80	; 0x50
 800515a:	d03c      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0xf6>
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d873      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d058      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x136>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d86f      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005168:	2b30      	cmp	r3, #48	; 0x30
 800516a:	d064      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x156>
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d86b      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d060      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x156>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d867      	bhi.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05c      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x156>
 800517c:	2b10      	cmp	r3, #16
 800517e:	d05a      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005180:	e062      	b.n	8005248 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f000 fb5b 	bl	800584c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	609a      	str	r2, [r3, #8]
      break;
 80051ae:	e04e      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6899      	ldr	r1, [r3, #8]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f000 fb44 	bl	800584c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d2:	609a      	str	r2, [r3, #8]
      break;
 80051d4:	e03b      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 fab8 	bl	8005758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2150      	movs	r1, #80	; 0x50
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fb11 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 80051f4:	e02b      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6859      	ldr	r1, [r3, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	461a      	mov	r2, r3
 8005204:	f000 fad7 	bl	80057b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2160      	movs	r1, #96	; 0x60
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fb01 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 8005214:	e01b      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	461a      	mov	r2, r3
 8005224:	f000 fa98 	bl	8005758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	4618      	mov	r0, r3
 8005230:	f000 faf1 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 8005234:	e00b      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f000 fae8 	bl	8005816 <TIM_ITRx_SetConfig>
        break;
 8005246:	e002      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800524c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a40      	ldr	r2, [pc, #256]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <TIM_Base_SetConfig+0x114>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d02b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d027      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2c      	ldr	r2, [pc, #176]	; (80053d0 <TIM_Base_SetConfig+0x118>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d023      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <TIM_Base_SetConfig+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <TIM_Base_SetConfig+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a29      	ldr	r2, [pc, #164]	; (80053dc <TIM_Base_SetConfig+0x124>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <TIM_Base_SetConfig+0x128>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <TIM_Base_SetConfig+0x130>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a25      	ldr	r2, [pc, #148]	; (80053ec <TIM_Base_SetConfig+0x134>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a24      	ldr	r2, [pc, #144]	; (80053f0 <TIM_Base_SetConfig+0x138>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <TIM_Base_SetConfig+0x13c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <TIM_Base_SetConfig+0x114>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0xf8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40001800 	.word	0x40001800
 80053f0:	40001c00 	.word	0x40001c00
 80053f4:	40002000 	.word	0x40002000

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC1_SetConfig+0x64>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC1_SetConfig+0xd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0x8e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC1_SetConfig+0xdc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0210 	bic.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0320 	bic.w	r3, r3, #32
 8005522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a22      	ldr	r2, [pc, #136]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC2_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10d      	bne.n	800555c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC2_SetConfig+0xe4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC2_SetConfig+0x94>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_OC2_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d113      	bne.n	8005594 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_OC3_SetConfig+0x66>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_OC3_SetConfig+0xe0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC3_SetConfig+0x92>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_OC3_SetConfig+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d113      	bne.n	800567e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_OC4_SetConfig+0xa4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC4_SetConfig+0x68>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a11      	ldr	r2, [pc, #68]	; (8005754 <TIM_OC4_SetConfig+0xa8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d109      	bne.n	8005728 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f023 0210 	bic.w	r2, r3, #16
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	f043 0307 	orr.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	431a      	orrs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4313      	orrs	r3, r2
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e05a      	b.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a21      	ldr	r2, [pc, #132]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d01d      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1d      	ldr	r2, [pc, #116]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a15      	ldr	r2, [pc, #84]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10c      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4313      	orrs	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40001800 	.word	0x40001800

08005984 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800599c:	2302      	movs	r3, #2
 800599e:	e03d      	b.n	8005a1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e03f      	b.n	8005ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fb fdfa 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	; 0x24
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fd1d 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b08a      	sub	sp, #40	; 0x28
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d17c      	bne.n	8005c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_UART_Transmit+0x2c>
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e075      	b.n	8005c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Transmit+0x3e>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e06e      	b.n	8005c06 <HAL_UART_Transmit+0x11c>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2221      	movs	r2, #33	; 0x21
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b3e:	f7fb feaf 	bl	80018a0 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d108      	bne.n	8005b6c <HAL_UART_Transmit+0x82>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e003      	b.n	8005b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b7c:	e02a      	b.n	8005bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fadf 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e036      	b.n	8005c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	e007      	b.n	8005bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1cf      	bne.n	8005b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2140      	movs	r1, #64	; 0x40
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 faaf 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e006      	b.n	8005c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08a      	sub	sp, #40	; 0x28
 8005c12:	af02      	add	r7, sp, #8
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	f040 808c 	bne.w	8005d48 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UART_Receive+0x2e>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e084      	b.n	8005d4a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Receive+0x40>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e07d      	b.n	8005d4a <HAL_UART_Receive+0x13c>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2222      	movs	r2, #34	; 0x22
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6a:	f7fb fe19 	bl	80018a0 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c84:	d108      	bne.n	8005c98 <HAL_UART_Receive+0x8a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e003      	b.n	8005ca0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ca8:	e043      	b.n	8005d32 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa49 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e042      	b.n	8005d4a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e01f      	b.n	8005d24 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cec:	d007      	beq.n	8005cfe <HAL_UART_Receive+0xf0>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <HAL_UART_Receive+0xfe>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	e008      	b.n	8005d1e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1b6      	bne.n	8005caa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d11d      	bne.n	8005da8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Receive_IT+0x26>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e016      	b.n	8005daa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Receive_IT+0x38>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e00f      	b.n	8005daa <HAL_UART_Receive_IT+0x58>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fa1e 	bl	80061e0 <UART_Start_Receive_IT>
 8005da4:	4603      	mov	r3, r0
 8005da6:	e000      	b.n	8005daa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_IRQHandler+0x52>
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fad1 	bl	80063a6 <UART_Receive_IT>
      return;
 8005e04:	e17c      	b.n	8006100 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80b1 	beq.w	8005f70 <HAL_UART_IRQHandler+0x1bc>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <HAL_UART_IRQHandler+0x70>
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80a6 	beq.w	8005f70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_UART_IRQHandler+0x90>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0201 	orr.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_UART_IRQHandler+0xb0>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	f043 0202 	orr.w	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_UART_IRQHandler+0xd0>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00f      	beq.n	8005eae <HAL_UART_IRQHandler+0xfa>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_UART_IRQHandler+0xee>
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0208 	orr.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 811f 	beq.w	80060f6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x11e>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa6a 	bl	80063a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_UART_IRQHandler+0x146>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d031      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f9aa 	bl	8006254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d123      	bne.n	8005f56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d013      	beq.n	8005f4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	4a77      	ldr	r2, [pc, #476]	; (8006108 <HAL_UART_IRQHandler+0x354>)
 8005f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fb5e 	bl	80025f4 <HAL_DMA_Abort_IT>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	e00e      	b.n	8005f6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8e6 	bl	8006120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	e00a      	b.n	8005f6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8e2 	bl	8006120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e006      	b.n	8005f6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8de 	bl	8006120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f6a:	e0c4      	b.n	80060f6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	bf00      	nop
    return;
 8005f6e:	e0c2      	b.n	80060f6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f040 80a2 	bne.w	80060be <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 809c 	beq.w	80060be <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8096 	beq.w	80060be <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d14f      	bne.n	8006056 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fc0:	8a3b      	ldrh	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 8099 	beq.w	80060fa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fcc:	8a3a      	ldrh	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f080 8093 	bcs.w	80060fa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8a3a      	ldrh	r2, [r7, #16]
 8005fd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe4:	d02b      	beq.n	800603e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006014:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0210 	bic.w	r2, r2, #16
 8006032:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	4618      	mov	r0, r3
 800603a:	f7fc fa6b 	bl	8002514 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006046:	b29b      	uxth	r3, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f870 	bl	8006134 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006054:	e051      	b.n	80060fa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605e:	b29b      	uxth	r3, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d047      	beq.n	80060fe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800606e:	8a7b      	ldrh	r3, [r7, #18]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d044      	beq.n	80060fe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006082:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0210 	bic.w	r2, r2, #16
 80060b0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060b2:	8a7b      	ldrh	r3, [r7, #18]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f83c 	bl	8006134 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060bc:	e01f      	b.n	80060fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_UART_IRQHandler+0x326>
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8ff 	bl	80062d6 <UART_Transmit_IT>
    return;
 80060d8:	e012      	b.n	8006100 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00d      	beq.n	8006100 <HAL_UART_IRQHandler+0x34c>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f941 	bl	8006376 <UART_EndTransmit_IT>
    return;
 80060f4:	e004      	b.n	8006100 <HAL_UART_IRQHandler+0x34c>
    return;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <HAL_UART_IRQHandler+0x34c>
      return;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_UART_IRQHandler+0x34c>
      return;
 80060fe:	bf00      	nop
  }
}
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	080062af 	.word	0x080062af

0800610c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615c:	e02c      	b.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d028      	beq.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0x30>
 800616c:	f7fb fb98 	bl	80018a0 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	d21d      	bcs.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800618a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e00f      	b.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d0c3      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2222      	movs	r2, #34	; 0x22
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006224:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0220 	orr.w	r2, r2, #32
 8006244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800626a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	2b01      	cmp	r3, #1
 8006282:	d107      	bne.n	8006294 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0210 	bic.w	r2, r2, #16
 8006292:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff ff29 	bl	8006120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b21      	cmp	r3, #33	; 0x21
 80062e8:	d13e      	bne.n	8006368 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d114      	bne.n	800631e <UART_Transmit_IT+0x48>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d110      	bne.n	800631e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006310:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	1c9a      	adds	r2, r3, #2
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]
 800631c:	e008      	b.n	8006330 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6211      	str	r1, [r2, #32]
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4619      	mov	r1, r3
 800633e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10f      	bne.n	8006364 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006352:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006362:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e000      	b.n	800636a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006368:	2302      	movs	r3, #2
  }
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff feb8 	bl	800610c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b22      	cmp	r3, #34	; 0x22
 80063b8:	f040 8087 	bne.w	80064ca <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c4:	d117      	bne.n	80063f6 <UART_Receive_IT+0x50>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d113      	bne.n	80063f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	1c9a      	adds	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
 80063f4:	e026      	b.n	8006444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006408:	d007      	beq.n	800641a <UART_Receive_IT+0x74>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <UART_Receive_IT+0x82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e008      	b.n	800643a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4619      	mov	r1, r3
 8006452:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006454:	2b00      	cmp	r3, #0
 8006456:	d136      	bne.n	80064c6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0220 	bic.w	r2, r2, #32
 8006466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10e      	bne.n	80064b6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0210 	bic.w	r2, r2, #16
 80064a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe40 	bl	8006134 <HAL_UARTEx_RxEventCallback>
 80064b4:	e002      	b.n	80064bc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fa fd8c 	bl	8000fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e002      	b.n	80064cc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	b09f      	sub	sp, #124	; 0x7c
 80064da:	af00      	add	r7, sp, #0
 80064dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	ea40 0301 	orr.w	r3, r0, r1
 80064f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	431a      	orrs	r2, r3
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	431a      	orrs	r2, r3
 8006506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4313      	orrs	r3, r2
 800650c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006518:	f021 010c 	bic.w	r1, r1, #12
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006522:	430b      	orrs	r3, r1
 8006524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	6999      	ldr	r1, [r3, #24]
 8006534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	ea40 0301 	orr.w	r3, r0, r1
 800653c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4bc5      	ldr	r3, [pc, #788]	; (8006858 <UART_SetConfig+0x384>)
 8006544:	429a      	cmp	r2, r3
 8006546:	d004      	beq.n	8006552 <UART_SetConfig+0x7e>
 8006548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4bc3      	ldr	r3, [pc, #780]	; (800685c <UART_SetConfig+0x388>)
 800654e:	429a      	cmp	r2, r3
 8006550:	d103      	bne.n	800655a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006552:	f7fe fa9d 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8006556:	6778      	str	r0, [r7, #116]	; 0x74
 8006558:	e002      	b.n	8006560 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800655a:	f7fe fa85 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 800655e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006568:	f040 80b6 	bne.w	80066d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800656c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656e:	461c      	mov	r4, r3
 8006570:	f04f 0500 	mov.w	r5, #0
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1891      	adds	r1, r2, r2
 800657a:	6439      	str	r1, [r7, #64]	; 0x40
 800657c:	415b      	adcs	r3, r3
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
 8006580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006584:	1912      	adds	r2, r2, r4
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	00d9      	lsls	r1, r3, #3
 8006594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006598:	00d0      	lsls	r0, r2, #3
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	1911      	adds	r1, r2, r4
 80065a0:	6639      	str	r1, [r7, #96]	; 0x60
 80065a2:	416b      	adcs	r3, r5
 80065a4:	667b      	str	r3, [r7, #100]	; 0x64
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	1891      	adds	r1, r2, r2
 80065b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b4:	415b      	adcs	r3, r3
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065c0:	f7f9 fe16 	bl	80001f0 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4ba5      	ldr	r3, [pc, #660]	; (8006860 <UART_SetConfig+0x38c>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	011e      	lsls	r6, r3, #4
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	461c      	mov	r4, r3
 80065d6:	f04f 0500 	mov.w	r5, #0
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	6339      	str	r1, [r7, #48]	; 0x30
 80065e2:	415b      	adcs	r3, r3
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
 80065e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065ea:	1912      	adds	r2, r2, r4
 80065ec:	eb45 0303 	adc.w	r3, r5, r3
 80065f0:	f04f 0000 	mov.w	r0, #0
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	00d9      	lsls	r1, r3, #3
 80065fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fe:	00d0      	lsls	r0, r2, #3
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	1911      	adds	r1, r2, r4
 8006606:	65b9      	str	r1, [r7, #88]	; 0x58
 8006608:	416b      	adcs	r3, r5
 800660a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	1891      	adds	r1, r2, r2
 8006618:	62b9      	str	r1, [r7, #40]	; 0x28
 800661a:	415b      	adcs	r3, r3
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006626:	f7f9 fde3 	bl	80001f0 <__aeabi_uldivmod>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4b8c      	ldr	r3, [pc, #560]	; (8006860 <UART_SetConfig+0x38c>)
 8006630:	fba3 1302 	umull	r1, r3, r3, r2
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	2164      	movs	r1, #100	; 0x64
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	3332      	adds	r3, #50	; 0x32
 8006642:	4a87      	ldr	r2, [pc, #540]	; (8006860 <UART_SetConfig+0x38c>)
 8006644:	fba2 2303 	umull	r2, r3, r2, r3
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006650:	441e      	add	r6, r3
 8006652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006654:	4618      	mov	r0, r3
 8006656:	f04f 0100 	mov.w	r1, #0
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	1894      	adds	r4, r2, r2
 8006660:	623c      	str	r4, [r7, #32]
 8006662:	415b      	adcs	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
 8006666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800666a:	1812      	adds	r2, r2, r0
 800666c:	eb41 0303 	adc.w	r3, r1, r3
 8006670:	f04f 0400 	mov.w	r4, #0
 8006674:	f04f 0500 	mov.w	r5, #0
 8006678:	00dd      	lsls	r5, r3, #3
 800667a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800667e:	00d4      	lsls	r4, r2, #3
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	1814      	adds	r4, r2, r0
 8006686:	653c      	str	r4, [r7, #80]	; 0x50
 8006688:	414b      	adcs	r3, r1
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
 800668c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	1891      	adds	r1, r2, r2
 8006698:	61b9      	str	r1, [r7, #24]
 800669a:	415b      	adcs	r3, r3
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066a6:	f7f9 fda3 	bl	80001f0 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4b6c      	ldr	r3, [pc, #432]	; (8006860 <UART_SetConfig+0x38c>)
 80066b0:	fba3 1302 	umull	r1, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	2164      	movs	r1, #100	; 0x64
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	3332      	adds	r3, #50	; 0x32
 80066c2:	4a67      	ldr	r2, [pc, #412]	; (8006860 <UART_SetConfig+0x38c>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 0207 	and.w	r2, r3, #7
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4432      	add	r2, r6
 80066d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d6:	e0b9      	b.n	800684c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066da:	461c      	mov	r4, r3
 80066dc:	f04f 0500 	mov.w	r5, #0
 80066e0:	4622      	mov	r2, r4
 80066e2:	462b      	mov	r3, r5
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	6139      	str	r1, [r7, #16]
 80066e8:	415b      	adcs	r3, r3
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066f0:	1912      	adds	r2, r2, r4
 80066f2:	eb45 0303 	adc.w	r3, r5, r3
 80066f6:	f04f 0000 	mov.w	r0, #0
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	00d9      	lsls	r1, r3, #3
 8006700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006704:	00d0      	lsls	r0, r2, #3
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	eb12 0804 	adds.w	r8, r2, r4
 800670e:	eb43 0905 	adc.w	r9, r3, r5
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	008b      	lsls	r3, r1, #2
 8006726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800672a:	0082      	lsls	r2, r0, #2
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7f9 fd5e 	bl	80001f0 <__aeabi_uldivmod>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4b49      	ldr	r3, [pc, #292]	; (8006860 <UART_SetConfig+0x38c>)
 800673a:	fba3 2302 	umull	r2, r3, r3, r2
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	011e      	lsls	r6, r3, #4
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	4618      	mov	r0, r3
 8006746:	f04f 0100 	mov.w	r1, #0
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	1894      	adds	r4, r2, r2
 8006750:	60bc      	str	r4, [r7, #8]
 8006752:	415b      	adcs	r3, r3
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800675a:	1812      	adds	r2, r2, r0
 800675c:	eb41 0303 	adc.w	r3, r1, r3
 8006760:	f04f 0400 	mov.w	r4, #0
 8006764:	f04f 0500 	mov.w	r5, #0
 8006768:	00dd      	lsls	r5, r3, #3
 800676a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676e:	00d4      	lsls	r4, r2, #3
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	1814      	adds	r4, r2, r0
 8006776:	64bc      	str	r4, [r7, #72]	; 0x48
 8006778:	414b      	adcs	r3, r1
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	008b      	lsls	r3, r1, #2
 8006790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006794:	0082      	lsls	r2, r0, #2
 8006796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800679a:	f7f9 fd29 	bl	80001f0 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b2f      	ldr	r3, [pc, #188]	; (8006860 <UART_SetConfig+0x38c>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	; 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	3332      	adds	r3, #50	; 0x32
 80067b6:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <UART_SetConfig+0x38c>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067c2:	441e      	add	r6, r3
 80067c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c6:	4618      	mov	r0, r3
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	1894      	adds	r4, r2, r2
 80067d2:	603c      	str	r4, [r7, #0]
 80067d4:	415b      	adcs	r3, r3
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067dc:	1812      	adds	r2, r2, r0
 80067de:	eb41 0303 	adc.w	r3, r1, r3
 80067e2:	f04f 0400 	mov.w	r4, #0
 80067e6:	f04f 0500 	mov.w	r5, #0
 80067ea:	00dd      	lsls	r5, r3, #3
 80067ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067f0:	00d4      	lsls	r4, r2, #3
 80067f2:	4622      	mov	r2, r4
 80067f4:	462b      	mov	r3, r5
 80067f6:	eb12 0a00 	adds.w	sl, r2, r0
 80067fa:	eb43 0b01 	adc.w	fp, r3, r1
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	008b      	lsls	r3, r1, #2
 8006812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006816:	0082      	lsls	r2, r0, #2
 8006818:	4650      	mov	r0, sl
 800681a:	4659      	mov	r1, fp
 800681c:	f7f9 fce8 	bl	80001f0 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <UART_SetConfig+0x38c>)
 8006826:	fba3 1302 	umull	r1, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2164      	movs	r1, #100	; 0x64
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	3332      	adds	r3, #50	; 0x32
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <UART_SetConfig+0x38c>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	f003 020f 	and.w	r2, r3, #15
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4432      	add	r2, r6
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	377c      	adds	r7, #124	; 0x7c
 8006850:	46bd      	mov	sp, r7
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	bf00      	nop
 8006858:	40011000 	.word	0x40011000
 800685c:	40011400 	.word	0x40011400
 8006860:	51eb851f 	.word	0x51eb851f

08006864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006864:	b084      	sub	sp, #16
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	f107 001c 	add.w	r0, r7, #28
 8006872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	d122      	bne.n	80068c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d105      	bne.n	80068b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fac6 	bl	8007e48 <USB_CoreReset>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e01a      	b.n	80068f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 faba 	bl	8007e48 <USB_CoreReset>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
 80068ea:	e005      	b.n	80068f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10b      	bne.n	8006916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f043 0206 	orr.w	r2, r3, #6
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006922:	b004      	add	sp, #16
 8006924:	4770      	bx	lr
	...

08006928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d165      	bne.n	8006a08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a41      	ldr	r2, [pc, #260]	; (8006a44 <USB_SetTurnaroundTime+0x11c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d906      	bls.n	8006952 <USB_SetTurnaroundTime+0x2a>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4a40      	ldr	r2, [pc, #256]	; (8006a48 <USB_SetTurnaroundTime+0x120>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d202      	bcs.n	8006952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800694c:	230f      	movs	r3, #15
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e062      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <USB_SetTurnaroundTime+0x120>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d306      	bcc.n	8006968 <USB_SetTurnaroundTime+0x40>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4a3b      	ldr	r2, [pc, #236]	; (8006a4c <USB_SetTurnaroundTime+0x124>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d202      	bcs.n	8006968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006962:	230e      	movs	r3, #14
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e057      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4a38      	ldr	r2, [pc, #224]	; (8006a4c <USB_SetTurnaroundTime+0x124>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d306      	bcc.n	800697e <USB_SetTurnaroundTime+0x56>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4a37      	ldr	r2, [pc, #220]	; (8006a50 <USB_SetTurnaroundTime+0x128>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d202      	bcs.n	800697e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006978:	230d      	movs	r3, #13
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e04c      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a33      	ldr	r2, [pc, #204]	; (8006a50 <USB_SetTurnaroundTime+0x128>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d306      	bcc.n	8006994 <USB_SetTurnaroundTime+0x6c>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <USB_SetTurnaroundTime+0x12c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d802      	bhi.n	8006994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800698e:	230c      	movs	r3, #12
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e041      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a2f      	ldr	r2, [pc, #188]	; (8006a54 <USB_SetTurnaroundTime+0x12c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d906      	bls.n	80069aa <USB_SetTurnaroundTime+0x82>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4a2e      	ldr	r2, [pc, #184]	; (8006a58 <USB_SetTurnaroundTime+0x130>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d802      	bhi.n	80069aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069a4:	230b      	movs	r3, #11
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e036      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <USB_SetTurnaroundTime+0x130>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d906      	bls.n	80069c0 <USB_SetTurnaroundTime+0x98>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <USB_SetTurnaroundTime+0x134>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d802      	bhi.n	80069c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069ba:	230a      	movs	r3, #10
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e02b      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <USB_SetTurnaroundTime+0x134>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d906      	bls.n	80069d6 <USB_SetTurnaroundTime+0xae>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <USB_SetTurnaroundTime+0x138>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d202      	bcs.n	80069d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069d0:	2309      	movs	r3, #9
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e020      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <USB_SetTurnaroundTime+0x138>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d306      	bcc.n	80069ec <USB_SetTurnaroundTime+0xc4>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a20      	ldr	r2, [pc, #128]	; (8006a64 <USB_SetTurnaroundTime+0x13c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d802      	bhi.n	80069ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069e6:	2308      	movs	r3, #8
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e015      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <USB_SetTurnaroundTime+0x13c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d906      	bls.n	8006a02 <USB_SetTurnaroundTime+0xda>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <USB_SetTurnaroundTime+0x140>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d202      	bcs.n	8006a02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069fc:	2307      	movs	r3, #7
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e00a      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a02:	2306      	movs	r3, #6
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e007      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a0e:	2309      	movs	r3, #9
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	e001      	b.n	8006a18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a14:	2309      	movs	r3, #9
 8006a16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	00d8acbf 	.word	0x00d8acbf
 8006a48:	00e4e1c0 	.word	0x00e4e1c0
 8006a4c:	00f42400 	.word	0x00f42400
 8006a50:	01067380 	.word	0x01067380
 8006a54:	011a499f 	.word	0x011a499f
 8006a58:	01312cff 	.word	0x01312cff
 8006a5c:	014ca43f 	.word	0x014ca43f
 8006a60:	016e3600 	.word	0x016e3600
 8006a64:	01a6ab1f 	.word	0x01a6ab1f
 8006a68:	01e84800 	.word	0x01e84800

08006a6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d106      	bne.n	8006adc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	e00b      	b.n	8006af4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	e001      	b.n	8006af4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e003      	b.n	8006afc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006af4:	2032      	movs	r0, #50	; 0x32
 8006af6:	f7fa fedf 	bl	80018b8 <HAL_Delay>

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b04:	b084      	sub	sp, #16
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e009      	b.n	8006b38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3340      	adds	r3, #64	; 0x40
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	3301      	adds	r3, #1
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b0e      	cmp	r3, #14
 8006b3c:	d9f2      	bls.n	8006b24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11c      	bne.n	8006b7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b52:	f043 0302 	orr.w	r3, r3, #2
 8006b56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b7c:	e00b      	b.n	8006b96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	680b      	ldr	r3, [r1, #0]
 8006bb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10c      	bne.n	8006bd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f949 	bl	8006e5c <USB_SetDevSpeed>
 8006bca:	e008      	b.n	8006bde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f944 	bl	8006e5c <USB_SetDevSpeed>
 8006bd4:	e003      	b.n	8006bde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f93f 	bl	8006e5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bde:	2110      	movs	r1, #16
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f8f3 	bl	8006dcc <USB_FlushTxFifo>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f911 	bl	8006e18 <USB_FlushRxFifo>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	461a      	mov	r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e043      	b.n	8006cb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c40:	d118      	bne.n	8006c74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	e013      	b.n	8006c86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e008      	b.n	8006c86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	461a      	mov	r2, r3
 8006c82:	2300      	movs	r3, #0
 8006c84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	461a      	mov	r2, r3
 8006c94:	2300      	movs	r3, #0
 8006c96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006caa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d3b7      	bcc.n	8006c2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e043      	b.n	8006d48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd6:	d118      	bne.n	8006d0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	e013      	b.n	8006d1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	461a      	mov	r2, r3
 8006d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	e008      	b.n	8006d1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	461a      	mov	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3b7      	bcc.n	8006cc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f043 0210 	orr.w	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <USB_DevInit+0x2c4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f043 0208 	orr.w	r2, r3, #8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db0:	f043 0304 	orr.w	r3, r3, #4
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc4:	b004      	add	sp, #16
 8006dc6:	4770      	bx	lr
 8006dc8:	803c3800 	.word	0x803c3800

08006dcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	f043 0220 	orr.w	r2, r3, #32
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <USB_FlushTxFifo+0x48>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e006      	b.n	8006e06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d0f0      	beq.n	8006de6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	00030d40 	.word	0x00030d40

08006e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2210      	movs	r2, #16
 8006e28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <USB_FlushRxFifo+0x40>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d901      	bls.n	8006e3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d0f0      	beq.n	8006e2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	00030d40 	.word	0x00030d40

08006e5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0306 	and.w	r3, r3, #6
 8006ea6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
 8006eb2:	e00a      	b.n	8006eca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d002      	beq.n	8006ec0 <USB_GetDevSpeed+0x32>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d102      	bne.n	8006ec6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	75fb      	strb	r3, [r7, #23]
 8006ec4:	e001      	b.n	8006eca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ec6:	230f      	movs	r3, #15
 8006ec8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d13a      	bne.n	8006f6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d155      	bne.n	8006fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	78db      	ldrb	r3, [r3, #3]
 8006f46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	059b      	lsls	r3, r3, #22
 8006f4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f50:	4313      	orrs	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e036      	b.n	8006fd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d11a      	bne.n	8006fd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d161      	bne.n	80070c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800701a:	d11f      	bne.n	800705c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800703a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800705a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	2101      	movs	r1, #1
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	43db      	mvns	r3, r3
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800707c:	4013      	ands	r3, r2
 800707e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	b29b      	uxth	r3, r3
 8007098:	43db      	mvns	r3, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a0:	4013      	ands	r3, r2
 80070a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	0159      	lsls	r1, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	4619      	mov	r1, r3
 80070c0:	4b35      	ldr	r3, [pc, #212]	; (8007198 <USB_DeactivateEndpoint+0x1b0>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	600b      	str	r3, [r1, #0]
 80070c6:	e060      	b.n	800718a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d11f      	bne.n	8007120 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	2101      	movs	r1, #1
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	43db      	mvns	r3, r3
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007140:	4013      	ands	r3, r2
 8007142:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	43db      	mvns	r3, r3
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4013      	ands	r3, r2
 8007166:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0159      	lsls	r1, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	440b      	add	r3, r1
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	4619      	mov	r1, r3
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <USB_DeactivateEndpoint+0x1b4>)
 8007186:	4013      	ands	r3, r2
 8007188:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	ec337800 	.word	0xec337800
 800719c:	eff37800 	.word	0xeff37800

080071a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f040 815c 	bne.w	800747a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d132      	bne.n	8007230 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800720c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007228:	0cdb      	lsrs	r3, r3, #19
 800722a:	04db      	lsls	r3, r3, #19
 800722c:	6113      	str	r3, [r2, #16]
 800722e:	e074      	b.n	800731a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724a:	0cdb      	lsrs	r3, r3, #19
 800724c:	04db      	lsls	r3, r3, #19
 800724e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800726a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800726e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	691a      	ldr	r2, [r3, #16]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6959      	ldr	r1, [r3, #20]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	440b      	add	r3, r1
 800728c:	1e59      	subs	r1, r3, #1
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	fbb1 f3f3 	udiv	r3, r1, r3
 8007296:	04d9      	lsls	r1, r3, #19
 8007298:	4b9d      	ldr	r3, [pc, #628]	; (8007510 <USB_EPStartXfer+0x370>)
 800729a:	400b      	ands	r3, r1
 800729c:	69b9      	ldr	r1, [r7, #24]
 800729e:	0148      	lsls	r0, r1, #5
 80072a0:	69f9      	ldr	r1, [r7, #28]
 80072a2:	4401      	add	r1, r0
 80072a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072a8:	4313      	orrs	r3, r2
 80072aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	0148      	lsls	r0, r1, #5
 80072c6:	69f9      	ldr	r1, [r7, #28]
 80072c8:	4401      	add	r1, r0
 80072ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072ce:	4313      	orrs	r3, r2
 80072d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	78db      	ldrb	r3, [r3, #3]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d11f      	bne.n	800731a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	0151      	lsls	r1, r2, #5
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	440a      	add	r2, r1
 8007310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007318:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d14b      	bne.n	80073b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d128      	bne.n	8007396 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d110      	bne.n	8007376 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e00f      	b.n	8007396 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007394:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	e12f      	b.n	8007618 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	78db      	ldrb	r3, [r3, #3]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d015      	beq.n	800740c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8117 	beq.w	8007618 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	2101      	movs	r1, #1
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007406:	4313      	orrs	r3, r2
 8007408:	634b      	str	r3, [r1, #52]	; 0x34
 800740a:	e105      	b.n	8007618 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	d110      	bne.n	800743e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	e00f      	b.n	800745e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800745c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	68d9      	ldr	r1, [r3, #12]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	b298      	uxth	r0, r3
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4603      	mov	r3, r0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa2b 	bl	80078ce <USB_WritePacket>
 8007478:	e0ce      	b.n	8007618 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007494:	0cdb      	lsrs	r3, r3, #19
 8007496:	04db      	lsls	r3, r3, #19
 8007498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d126      	bne.n	8007514 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d2:	691a      	ldr	r2, [r3, #16]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	0148      	lsls	r0, r1, #5
 80074e0:	69f9      	ldr	r1, [r7, #28]
 80074e2:	4401      	add	r1, r0
 80074e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074e8:	4313      	orrs	r3, r2
 80074ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750a:	6113      	str	r3, [r2, #16]
 800750c:	e036      	b.n	800757c <USB_EPStartXfer+0x3dc>
 800750e:	bf00      	nop
 8007510:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4413      	add	r3, r2
 800751e:	1e5a      	subs	r2, r3, #1
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	8afb      	ldrh	r3, [r7, #22]
 800753a:	04d9      	lsls	r1, r3, #19
 800753c:	4b39      	ldr	r3, [pc, #228]	; (8007624 <USB_EPStartXfer+0x484>)
 800753e:	400b      	ands	r3, r1
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	0148      	lsls	r0, r1, #5
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	4401      	add	r1, r0
 8007548:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800754c:	4313      	orrs	r3, r2
 800754e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	8af9      	ldrh	r1, [r7, #22]
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756c:	69b9      	ldr	r1, [r7, #24]
 800756e:	0148      	lsls	r0, r1, #5
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	4401      	add	r1, r0
 8007574:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007578:	4313      	orrs	r3, r2
 800757a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10d      	bne.n	800759e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	460a      	mov	r2, r1
 800759c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d128      	bne.n	80075f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d110      	bne.n	80075d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e00f      	b.n	80075f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	1ff80000 	.word	0x1ff80000

08007628 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 80cd 	bne.w	80077e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d132      	bne.n	80076b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b0:	0cdb      	lsrs	r3, r3, #19
 80076b2:	04db      	lsls	r3, r3, #19
 80076b4:	6113      	str	r3, [r2, #16]
 80076b6:	e04e      	b.n	8007756 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d2:	0cdb      	lsrs	r3, r3, #19
 80076d4:	04db      	lsls	r3, r3, #19
 80076d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	d903      	bls.n	8007710 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800772e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007746:	6939      	ldr	r1, [r7, #16]
 8007748:	0148      	lsls	r0, r1, #5
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	4401      	add	r1, r0
 800774e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007752:	4313      	orrs	r3, r2
 8007754:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d11e      	bne.n	800779a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	461a      	mov	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	e092      	b.n	80078c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d07e      	beq.n	80078c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	2101      	movs	r1, #1
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077de:	4313      	orrs	r3, r2
 80077e0:	634b      	str	r3, [r1, #52]	; 0x34
 80077e2:	e06d      	b.n	80078c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fe:	0cdb      	lsrs	r3, r3, #19
 8007800:	04db      	lsls	r3, r3, #19
 8007802:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007826:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007856:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786e:	6939      	ldr	r1, [r7, #16]
 8007870:	0148      	lsls	r0, r1, #5
 8007872:	6979      	ldr	r1, [r7, #20]
 8007874:	4401      	add	r1, r0
 8007876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800787a:	4313      	orrs	r3, r2
 800787c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d10d      	bne.n	80078a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68d9      	ldr	r1, [r3, #12]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	460a      	mov	r2, r1
 800789e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b089      	sub	sp, #36	; 0x24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	4611      	mov	r1, r2
 80078da:	461a      	mov	r2, r3
 80078dc:	460b      	mov	r3, r1
 80078de:	71fb      	strb	r3, [r7, #7]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80078ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078f4:	88bb      	ldrh	r3, [r7, #4]
 80078f6:	3303      	adds	r3, #3
 80078f8:	089b      	lsrs	r3, r3, #2
 80078fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	e00f      	b.n	8007922 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007902:	79fb      	ldrb	r3, [r7, #7]
 8007904:	031a      	lsls	r2, r3, #12
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	4413      	add	r3, r2
 800790a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790e:	461a      	mov	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	3304      	adds	r3, #4
 800791a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	3301      	adds	r3, #1
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	429a      	cmp	r2, r3
 8007928:	d3eb      	bcc.n	8007902 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3724      	adds	r7, #36	; 0x24
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	; 0x24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	3303      	adds	r3, #3
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	e00b      	b.n	8007974 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	601a      	str	r2, [r3, #0]
    pDest++;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	3304      	adds	r3, #4
 800796c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	3301      	adds	r3, #1
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3ef      	bcc.n	800795c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3724      	adds	r7, #36	; 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d12c      	bne.n	8007a00 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	db12      	blt.n	80079de <USB_EPSetStall+0x54>
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00f      	beq.n	80079de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e02b      	b.n	8007a58 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db12      	blt.n	8007a38 <USB_EPSetStall+0xae>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00f      	beq.n	8007a38 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a36:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d128      	bne.n	8007ad4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	78db      	ldrb	r3, [r3, #3]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d003      	beq.n	8007ab2 <USB_EPClearStall+0x4c>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	78db      	ldrb	r3, [r3, #3]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d138      	bne.n	8007b24 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e027      	b.n	8007b24 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007af2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	78db      	ldrb	r3, [r3, #3]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d003      	beq.n	8007b04 <USB_EPClearStall+0x9e>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	78db      	ldrb	r3, [r3, #3]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d10f      	bne.n	8007b24 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	0151      	lsls	r1, r2, #5
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	440a      	add	r2, r1
 8007b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b22:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b54:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b98:	f023 0303 	bic.w	r3, r3, #3
 8007b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bac:	f023 0302 	bic.w	r3, r3, #2
 8007bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bee:	f043 0302 	orr.w	r3, r3, #2
 8007bf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4013      	ands	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	0c1b      	lsrs	r3, r3, #16
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	b29b      	uxth	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfc:	01db      	lsls	r3, r3, #7
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4013      	ands	r3, r2
 8007d18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0301 	and.w	r3, r3, #1
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	460b      	mov	r3, r1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	333c      	adds	r3, #60	; 0x3c
 8007da2:	3304      	adds	r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4a26      	ldr	r2, [pc, #152]	; (8007e44 <USB_EP0_OutStart+0xb8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d90a      	bls.n	8007dc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dc0:	d101      	bne.n	8007dc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e037      	b.n	8007e36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df4:	f043 0318 	orr.w	r3, r3, #24
 8007df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e0e:	7afb      	ldrb	r3, [r7, #11]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d10f      	bne.n	8007e34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	4f54300a 	.word	0x4f54300a

08007e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a13      	ldr	r2, [pc, #76]	; (8007eac <USB_CoreReset+0x64>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d901      	bls.n	8007e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e01b      	b.n	8007e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	daf2      	bge.n	8007e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f043 0201 	orr.w	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a09      	ldr	r2, [pc, #36]	; (8007eac <USB_CoreReset+0x64>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d901      	bls.n	8007e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e006      	b.n	8007e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d0f0      	beq.n	8007e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	00030d40 	.word	0x00030d40

08007eb0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007ebc:	2018      	movs	r0, #24
 8007ebe:	f005 fe05 	bl	800dacc <USBD_static_malloc>
 8007ec2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e038      	b.n	8007f48 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7c1b      	ldrb	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d107      	bne.n	8007ef6 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2205      	movs	r2, #5
 8007eea:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2205      	movs	r2, #5
 8007ef0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8007ef4:	e006      	b.n	8007f04 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2205      	movs	r2, #5
 8007efa:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2205      	movs	r2, #5
 8007f00:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f04:	2302      	movs	r3, #2
 8007f06:	2203      	movs	r2, #3
 8007f08:	2181      	movs	r1, #129	; 0x81
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f005 fccd 	bl	800d8aa <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f16:	2302      	movs	r3, #2
 8007f18:	2203      	movs	r2, #3
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f005 fcc4 	bl	800d8aa <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	2101      	movs	r1, #1
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f005 fda1 	bl	800da88 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007f5c:	2181      	movs	r1, #129	; 0x81
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f005 fcc9 	bl	800d8f6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007f70:	2101      	movs	r1, #1
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f005 fcbf 	bl	800d8f6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00e      	beq.n	8007fb0 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f005 fda0 	bl	800dae8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fcc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e0ed      	b.n	80081c4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d052      	beq.n	800809a <USBD_CUSTOM_HID_Setup+0xde>
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	f040 80dd 	bne.w	80081b4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	3b02      	subs	r3, #2
 8008000:	2b09      	cmp	r3, #9
 8008002:	d842      	bhi.n	800808a <USBD_CUSTOM_HID_Setup+0xce>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBD_CUSTOM_HID_Setup+0x50>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	08008065 	.word	0x08008065
 8008010:	08008043 	.word	0x08008043
 8008014:	0800808b 	.word	0x0800808b
 8008018:	0800808b 	.word	0x0800808b
 800801c:	0800808b 	.word	0x0800808b
 8008020:	0800808b 	.word	0x0800808b
 8008024:	0800808b 	.word	0x0800808b
 8008028:	08008075 	.word	0x08008075
 800802c:	08008053 	.word	0x08008053
 8008030:	08008035 	.word	0x08008035
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	885b      	ldrh	r3, [r3, #2]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	605a      	str	r2, [r3, #4]
          break;
 8008040:	e02a      	b.n	8008098 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3304      	adds	r3, #4
 8008046:	2201      	movs	r2, #1
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fa9b 	bl	8009586 <USBD_CtlSendData>
          break;
 8008050:	e022      	b.n	8008098 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	b29b      	uxth	r3, r3
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	609a      	str	r2, [r3, #8]
          break;
 8008062:	e019      	b.n	8008098 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3308      	adds	r3, #8
 8008068:	2201      	movs	r2, #1
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fa8a 	bl	8009586 <USBD_CtlSendData>
          break;
 8008072:	e011      	b.n	8008098 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2201      	movs	r2, #1
 8008078:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800807a:	6939      	ldr	r1, [r7, #16]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	88db      	ldrh	r3, [r3, #6]
 8008080:	461a      	mov	r2, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 faab 	bl	80095de <USBD_CtlPrepareRx>
          break;
 8008088:	e006      	b.n	8008098 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fa09 	bl	80094a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	75fb      	strb	r3, [r7, #23]
          break;
 8008096:	bf00      	nop
      }
      break;
 8008098:	e093      	b.n	80081c2 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	2b0b      	cmp	r3, #11
 80080a0:	d87f      	bhi.n	80081a2 <USBD_CUSTOM_HID_Setup+0x1e6>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <USBD_CUSTOM_HID_Setup+0xec>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080081b1 	.word	0x080081b1
 80080b0:	080081a3 	.word	0x080081a3
 80080b4:	080081a3 	.word	0x080081a3
 80080b8:	080081a3 	.word	0x080081a3
 80080bc:	080081a3 	.word	0x080081a3
 80080c0:	08008103 	.word	0x08008103
 80080c4:	080081a3 	.word	0x080081a3
 80080c8:	080081a3 	.word	0x080081a3
 80080cc:	080081a3 	.word	0x080081a3
 80080d0:	08008151 	.word	0x08008151
 80080d4:	0800817b 	.word	0x0800817b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d107      	bne.n	80080f4 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080e4:	f107 030e 	add.w	r3, r7, #14
 80080e8:	2202      	movs	r2, #2
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fa4a 	bl	8009586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080f2:	e05e      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 f9d4 	bl	80094a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008100:	e057      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b22      	cmp	r3, #34	; 0x22
 800810c:	d10b      	bne.n	8008126 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2bbb      	cmp	r3, #187	; 0xbb
 8008114:	bf28      	it	cs
 8008116:	23bb      	movcs	r3, #187	; 0xbb
 8008118:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	e00d      	b.n	8008142 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	885b      	ldrh	r3, [r3, #2]
 800812a:	0a1b      	lsrs	r3, r3, #8
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b21      	cmp	r3, #33	; 0x21
 8008130:	d107      	bne.n	8008142 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <USBD_CUSTOM_HID_Setup+0x210>)
 8008134:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b09      	cmp	r3, #9
 800813c:	bf28      	it	cs
 800813e:	2309      	movcs	r3, #9
 8008140:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008142:	8bfb      	ldrh	r3, [r7, #30]
 8008144:	461a      	mov	r2, r3
 8008146:	69b9      	ldr	r1, [r7, #24]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fa1c 	bl	8009586 <USBD_CtlSendData>
          break;
 800814e:	e030      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b03      	cmp	r3, #3
 800815a:	d107      	bne.n	800816c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	330c      	adds	r3, #12
 8008160:	2201      	movs	r2, #1
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fa0e 	bl	8009586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800816a:	e022      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 f998 	bl	80094a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008174:	2303      	movs	r3, #3
 8008176:	75fb      	strb	r3, [r7, #23]
          break;
 8008178:	e01b      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b03      	cmp	r3, #3
 8008184:	d106      	bne.n	8008194 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	885b      	ldrh	r3, [r3, #2]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008192:	e00e      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f984 	bl	80094a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	75fb      	strb	r3, [r7, #23]
          break;
 80081a0:	e007      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f97d 	bl	80094a4 <USBD_CtlError>
          ret = USBD_FAIL;
 80081aa:	2303      	movs	r3, #3
 80081ac:	75fb      	strb	r3, [r7, #23]
          break;
 80081ae:	e000      	b.n	80081b2 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80081b0:	bf00      	nop
      }
      break;
 80081b2:	e006      	b.n	80081c2 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 f974 	bl	80094a4 <USBD_CtlError>
      ret = USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	bf00      	nop
  }
  return (uint8_t)ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3720      	adds	r7, #32
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200000e0 	.word	0x200000e0

080081d0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e01a      	b.n	8008222 <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d10f      	bne.n	8008220 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	7d1b      	ldrb	r3, [r3, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2201      	movs	r2, #1
 800820c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	2181      	movs	r1, #129	; 0x81
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f005 fc16 	bl	800da46 <USBD_LL_Transmit>
 800821a:	e001      	b.n	8008220 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2229      	movs	r2, #41	; 0x29
 8008238:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	2000005c 	.word	0x2000005c

0800824c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2229      	movs	r2, #41	; 0x29
 8008258:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800825a:	4b03      	ldr	r3, [pc, #12]	; (8008268 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	20000088 	.word	0x20000088

0800826c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2229      	movs	r2, #41	; 0x29
 8008278:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800827a:	4b03      	ldr	r3, [pc, #12]	; (8008288 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	200000b4 	.word	0x200000b4

0800828c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	2200      	movs	r2, #0
 80082a0:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e00e      	b.n	80082e8 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	7810      	ldrb	r0, [r2, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	7852      	ldrb	r2, [r2, #1]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	e00a      	b.n	800831c <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800830c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	2302      	movs	r3, #2
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f005 fbb7 	bl	800da88 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800833a:	2303      	movs	r3, #3
 800833c:	e011      	b.n	8008362 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10c      	bne.n	8008360 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	7810      	ldrb	r0, [r2, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	7852      	ldrb	r2, [r2, #1]
 8008356:	4611      	mov	r1, r2
 8008358:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	220a      	movs	r2, #10
 8008378:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	200000ec 	.word	0x200000ec

0800838c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	e004      	b.n	80083aa <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	4613      	mov	r3, r2
 80083c2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e01f      	b.n	800840e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	79fa      	ldrb	r2, [r7, #7]
 8008400:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f005 f9ea 	bl	800d7dc <USBD_LL_Init>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800842a:	2303      	movs	r3, #3
 800842c:	e016      	b.n	800845c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	f107 020e 	add.w	r2, r7, #14
 800844e:	4610      	mov	r0, r2
 8008450:	4798      	blx	r3
 8008452:	4602      	mov	r2, r0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f005 fa01 	bl	800d874 <USBD_LL_Start>
 8008472:	4603      	mov	r3, r0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	4611      	mov	r1, r2
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d007      	beq.n	80084f0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4611      	mov	r1, r2
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
  }

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 ff8f 	bl	8009430 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	2b02      	cmp	r3, #2
 8008534:	d01a      	beq.n	800856c <USBD_LL_SetupStage+0x72>
 8008536:	2b02      	cmp	r3, #2
 8008538:	d822      	bhi.n	8008580 <USBD_LL_SetupStage+0x86>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <USBD_LL_SetupStage+0x4a>
 800853e:	2b01      	cmp	r3, #1
 8008540:	d00a      	beq.n	8008558 <USBD_LL_SetupStage+0x5e>
 8008542:	e01d      	b.n	8008580 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa61 	bl	8008a14 <USBD_StdDevReq>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
      break;
 8008556:	e020      	b.n	800859a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fac5 	bl	8008af0 <USBD_StdItfReq>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
      break;
 800856a:	e016      	b.n	800859a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fb04 	bl	8008b82 <USBD_StdEPReq>
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]
      break;
 800857e:	e00c      	b.n	800859a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800858a:	b2db      	uxtb	r3, r3
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f005 f9d0 	bl	800d934 <USBD_LL_StallEP>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
      break;
 8008598:	bf00      	nop
  }

  return ret;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	460b      	mov	r3, r1
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d138      	bne.n	800862a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d14a      	bne.n	8008660 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d913      	bls.n	80085fe <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	bf28      	it	cs
 80085f0:	4613      	movcs	r3, r2
 80085f2:	461a      	mov	r2, r3
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f001 f80e 	bl	8009618 <USBD_CtlContinueRx>
 80085fc:	e030      	b.n	8008660 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b03      	cmp	r3, #3
 8008608:	d10b      	bne.n	8008622 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f001 f809 	bl	800963a <USBD_CtlSendStatus>
 8008628:	e01a      	b.n	8008660 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b03      	cmp	r3, #3
 8008634:	d114      	bne.n	8008660 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	7afa      	ldrb	r2, [r7, #11]
 800864c:	4611      	mov	r1, r2
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	4798      	blx	r3
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	e000      	b.n	8008662 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	460b      	mov	r3, r1
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d16b      	bne.n	8008756 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3314      	adds	r3, #20
 8008682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868a:	2b02      	cmp	r3, #2
 800868c:	d156      	bne.n	800873c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	429a      	cmp	r2, r3
 8008698:	d914      	bls.n	80086c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 ff83 	bl	80095bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b6:	2300      	movs	r3, #0
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f005 f9e3 	bl	800da88 <USBD_LL_PrepareReceive>
 80086c2:	e03b      	b.n	800873c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d11c      	bne.n	800870a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086d8:	429a      	cmp	r2, r3
 80086da:	d316      	bcc.n	800870a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d20f      	bcs.n	800870a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086ea:	2200      	movs	r2, #0
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 ff64 	bl	80095bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086fc:	2300      	movs	r3, #0
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f005 f9c0 	bl	800da88 <USBD_LL_PrepareReceive>
 8008708:	e018      	b.n	800873c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b03      	cmp	r3, #3
 8008714:	d10b      	bne.n	800872e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800872e:	2180      	movs	r1, #128	; 0x80
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f005 f8ff 	bl	800d934 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 ff92 	bl	8009660 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008742:	2b01      	cmp	r3, #1
 8008744:	d122      	bne.n	800878c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff fe98 	bl	800847c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008754:	e01a      	b.n	800878c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d114      	bne.n	800878c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00e      	beq.n	800878c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	7afa      	ldrb	r2, [r7, #11]
 8008778:	4611      	mov	r1, r2
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	4798      	blx	r3
 800877e:	4603      	mov	r3, r0
 8008780:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	e000      	b.n	800878e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e02f      	b.n	800882a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00f      	beq.n	80087f4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6852      	ldr	r2, [r2, #4]
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	4611      	mov	r1, r2
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f005 f855 	bl	800d8aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2240      	movs	r2, #64	; 0x40
 800880c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	2200      	movs	r2, #0
 8008814:	2180      	movs	r1, #128	; 0x80
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f005 f847 	bl	800d8aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2240      	movs	r2, #64	; 0x40
 8008826:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	b2da      	uxtb	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b04      	cmp	r3, #4
 8008890:	d106      	bne.n	80088a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008898:	b2da      	uxtb	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e012      	b.n	80088ea <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d10b      	bne.n	80088e8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008908:	2303      	movs	r3, #3
 800890a:	e014      	b.n	8008936 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b03      	cmp	r3, #3
 8008916:	d10d      	bne.n	8008934 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d007      	beq.n	8008934 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	4611      	mov	r1, r2
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e014      	b.n	8008982 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d10d      	bne.n	8008980 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4611      	mov	r1, r2
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6852      	ldr	r2, [r2, #4]
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	4611      	mov	r1, r2
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
  }

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3301      	adds	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089f6:	8a3b      	ldrh	r3, [r7, #16]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	b21a      	sxth	r2, r3
 80089fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	b21b      	sxth	r3, r3
 8008a04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a06:	89fb      	ldrh	r3, [r7, #14]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d005      	beq.n	8008a3a <USBD_StdDevReq+0x26>
 8008a2e:	2b40      	cmp	r3, #64	; 0x40
 8008a30:	d853      	bhi.n	8008ada <USBD_StdDevReq+0xc6>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <USBD_StdDevReq+0x3a>
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d14f      	bne.n	8008ada <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4c:	e04a      	b.n	8008ae4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d83b      	bhi.n	8008ace <USBD_StdDevReq+0xba>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USBD_StdDevReq+0x48>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	08008ac5 	.word	0x08008ac5
 8008a64:	08008acf 	.word	0x08008acf
 8008a68:	08008abb 	.word	0x08008abb
 8008a6c:	08008acf 	.word	0x08008acf
 8008a70:	08008a8f 	.word	0x08008a8f
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008acf 	.word	0x08008acf
 8008a7c:	08008aa7 	.word	0x08008aa7
 8008a80:	08008a99 	.word	0x08008a99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9de 	bl	8008e48 <USBD_GetDescriptor>
          break;
 8008a8c:	e024      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb43 	bl	800911c <USBD_SetAddress>
          break;
 8008a96:	e01f      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb82 	bl	80091a4 <USBD_SetConfig>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
          break;
 8008aa4:	e018      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fc21 	bl	80092f0 <USBD_GetConfig>
          break;
 8008aae:	e013      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fc52 	bl	800935c <USBD_GetStatus>
          break;
 8008ab8:	e00e      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc81 	bl	80093c4 <USBD_SetFeature>
          break;
 8008ac2:	e009      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc90 	bl	80093ec <USBD_ClrFeature>
          break;
 8008acc:	e004      	b.n	8008ad8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fce7 	bl	80094a4 <USBD_CtlError>
          break;
 8008ad6:	bf00      	nop
      }
      break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fce1 	bl	80094a4 <USBD_CtlError>
      break;
 8008ae2:	bf00      	nop
  }

  return ret;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop

08008af0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b06:	2b40      	cmp	r3, #64	; 0x40
 8008b08:	d005      	beq.n	8008b16 <USBD_StdItfReq+0x26>
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d82f      	bhi.n	8008b6e <USBD_StdItfReq+0x7e>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <USBD_StdItfReq+0x26>
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d12b      	bne.n	8008b6e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d81d      	bhi.n	8008b60 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	889b      	ldrh	r3, [r3, #4]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d813      	bhi.n	8008b56 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	88db      	ldrh	r3, [r3, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d110      	bne.n	8008b6a <USBD_StdItfReq+0x7a>
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10d      	bne.n	8008b6a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fd73 	bl	800963a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b54:	e009      	b.n	8008b6a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fca3 	bl	80094a4 <USBD_CtlError>
          break;
 8008b5e:	e004      	b.n	8008b6a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc9e 	bl	80094a4 <USBD_CtlError>
          break;
 8008b68:	e000      	b.n	8008b6c <USBD_StdItfReq+0x7c>
          break;
 8008b6a:	bf00      	nop
      }
      break;
 8008b6c:	e004      	b.n	8008b78 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc97 	bl	80094a4 <USBD_CtlError>
      break;
 8008b76:	bf00      	nop
  }

  return ret;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	889b      	ldrh	r3, [r3, #4]
 8008b94:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d007      	beq.n	8008bb2 <USBD_StdEPReq+0x30>
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	f200 8145 	bhi.w	8008e32 <USBD_StdEPReq+0x2b0>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00c      	beq.n	8008bc6 <USBD_StdEPReq+0x44>
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	f040 8140 	bne.w	8008e32 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc4:	e13a      	b.n	8008e3c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d007      	beq.n	8008bde <USBD_StdEPReq+0x5c>
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	f300 8129 	bgt.w	8008e26 <USBD_StdEPReq+0x2a4>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d07f      	beq.n	8008cd8 <USBD_StdEPReq+0x156>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d03c      	beq.n	8008c56 <USBD_StdEPReq+0xd4>
 8008bdc:	e123      	b.n	8008e26 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d002      	beq.n	8008bf0 <USBD_StdEPReq+0x6e>
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d016      	beq.n	8008c1c <USBD_StdEPReq+0x9a>
 8008bee:	e02c      	b.n	8008c4a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <USBD_StdEPReq+0x90>
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b80      	cmp	r3, #128	; 0x80
 8008bfa:	d00a      	beq.n	8008c12 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f004 fe97 	bl	800d934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c06:	2180      	movs	r1, #128	; 0x80
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f004 fe93 	bl	800d934 <USBD_LL_StallEP>
 8008c0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c10:	e020      	b.n	8008c54 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc45 	bl	80094a4 <USBD_CtlError>
              break;
 8008c1a:	e01b      	b.n	8008c54 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10e      	bne.n	8008c42 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <USBD_StdEPReq+0xc0>
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d008      	beq.n	8008c42 <USBD_StdEPReq+0xc0>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	88db      	ldrh	r3, [r3, #6]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d104      	bne.n	8008c42 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f004 fe79 	bl	800d934 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fcf9 	bl	800963a <USBD_CtlSendStatus>

              break;
 8008c48:	e004      	b.n	8008c54 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc29 	bl	80094a4 <USBD_CtlError>
              break;
 8008c52:	bf00      	nop
          }
          break;
 8008c54:	e0ec      	b.n	8008e30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d002      	beq.n	8008c68 <USBD_StdEPReq+0xe6>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d016      	beq.n	8008c94 <USBD_StdEPReq+0x112>
 8008c66:	e030      	b.n	8008cca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00d      	beq.n	8008c8a <USBD_StdEPReq+0x108>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	; 0x80
 8008c72:	d00a      	beq.n	8008c8a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 fe5b 	bl	800d934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f004 fe57 	bl	800d934 <USBD_LL_StallEP>
 8008c86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c88:	e025      	b.n	8008cd6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc09 	bl	80094a4 <USBD_CtlError>
              break;
 8008c92:	e020      	b.n	8008cd6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	885b      	ldrh	r3, [r3, #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11b      	bne.n	8008cd4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f004 fe61 	bl	800d972 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fcc2 	bl	800963a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	4798      	blx	r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fbe9 	bl	80094a4 <USBD_CtlError>
              break;
 8008cd2:	e000      	b.n	8008cd6 <USBD_StdEPReq+0x154>
              break;
 8008cd4:	bf00      	nop
          }
          break;
 8008cd6:	e0ab      	b.n	8008e30 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d002      	beq.n	8008cea <USBD_StdEPReq+0x168>
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d032      	beq.n	8008d4e <USBD_StdEPReq+0x1cc>
 8008ce8:	e097      	b.n	8008e1a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <USBD_StdEPReq+0x17e>
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d004      	beq.n	8008d00 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fbd3 	bl	80094a4 <USBD_CtlError>
                break;
 8008cfe:	e091      	b.n	8008e24 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da0b      	bge.n	8008d20 <USBD_StdEPReq+0x19e>
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	3310      	adds	r3, #16
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	e00b      	b.n	8008d38 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	3304      	adds	r3, #4
 8008d38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2202      	movs	r2, #2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fc1d 	bl	8009586 <USBD_CtlSendData>
              break;
 8008d4c:	e06a      	b.n	8008e24 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da11      	bge.n	8008d7a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d117      	bne.n	8008da0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fb96 	bl	80094a4 <USBD_CtlError>
                  break;
 8008d78:	e054      	b.n	8008e24 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb83 	bl	80094a4 <USBD_CtlError>
                  break;
 8008d9e:	e041      	b.n	8008e24 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	da0b      	bge.n	8008dc0 <USBD_StdEPReq+0x23e>
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	3310      	adds	r3, #16
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4413      	add	r3, r2
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	e00b      	b.n	8008dd8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <USBD_StdEPReq+0x264>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d103      	bne.n	8008dee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e00e      	b.n	8008e0c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f004 fddc 	bl	800d9b0 <USBD_LL_IsStallEP>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2201      	movs	r2, #1
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e002      	b.n	8008e0c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fbb7 	bl	8009586 <USBD_CtlSendData>
              break;
 8008e18:	e004      	b.n	8008e24 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fb41 	bl	80094a4 <USBD_CtlError>
              break;
 8008e22:	bf00      	nop
          }
          break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb3b 	bl	80094a4 <USBD_CtlError>
          break;
 8008e2e:	bf00      	nop
      }
      break;
 8008e30:	e004      	b.n	8008e3c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fb35 	bl	80094a4 <USBD_CtlError>
      break;
 8008e3a:	bf00      	nop
  }

  return ret;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	2b06      	cmp	r3, #6
 8008e6a:	f200 8128 	bhi.w	80090be <USBD_GetDescriptor+0x276>
 8008e6e:	a201      	add	r2, pc, #4	; (adr r2, 8008e74 <USBD_GetDescriptor+0x2c>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008ee9 	.word	0x08008ee9
 8008e80:	080090bf 	.word	0x080090bf
 8008e84:	080090bf 	.word	0x080090bf
 8008e88:	0800905f 	.word	0x0800905f
 8008e8c:	0800908b 	.word	0x0800908b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
      break;
 8008ea6:	e112      	b.n	80090ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7c1b      	ldrb	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10d      	bne.n	8008ecc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb8:	f107 0208 	add.w	r2, r7, #8
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008eca:	e100      	b.n	80090ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	f107 0208 	add.w	r2, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	701a      	strb	r2, [r3, #0]
      break;
 8008ee6:	e0f2      	b.n	80090ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	885b      	ldrh	r3, [r3, #2]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	f200 80ac 	bhi.w	800904c <USBD_GetDescriptor+0x204>
 8008ef4:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <USBD_GetDescriptor+0xb4>)
 8008ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efa:	bf00      	nop
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f7d 	.word	0x08008f7d
 8008f08:	08008fb1 	.word	0x08008fb1
 8008f0c:	08008fe5 	.word	0x08008fe5
 8008f10:	08009019 	.word	0x08009019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f36:	e091      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fab2 	bl	80094a4 <USBD_CtlError>
            err++;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	3301      	adds	r3, #1
 8008f44:	72fb      	strb	r3, [r7, #11]
          break;
 8008f46:	e089      	b.n	800905c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	7c12      	ldrb	r2, [r2, #16]
 8008f60:	f107 0108 	add.w	r1, r7, #8
 8008f64:	4610      	mov	r0, r2
 8008f66:	4798      	blx	r3
 8008f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6a:	e077      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa98 	bl	80094a4 <USBD_CtlError>
            err++;
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	3301      	adds	r3, #1
 8008f78:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7a:	e06f      	b.n	800905c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00b      	beq.n	8008fa0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	7c12      	ldrb	r2, [r2, #16]
 8008f94:	f107 0108 	add.w	r1, r7, #8
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9e:	e05d      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fa7e 	bl	80094a4 <USBD_CtlError>
            err++;
 8008fa8:	7afb      	ldrb	r3, [r7, #11]
 8008faa:	3301      	adds	r3, #1
 8008fac:	72fb      	strb	r3, [r7, #11]
          break;
 8008fae:	e055      	b.n	800905c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	7c12      	ldrb	r2, [r2, #16]
 8008fc8:	f107 0108 	add.w	r1, r7, #8
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
 8008fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd2:	e043      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fa64 	bl	80094a4 <USBD_CtlError>
            err++;
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe2:	e03b      	b.n	800905c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	7c12      	ldrb	r2, [r2, #16]
 8008ffc:	f107 0108 	add.w	r1, r7, #8
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009006:	e029      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa4a 	bl	80094a4 <USBD_CtlError>
            err++;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3301      	adds	r3, #1
 8009014:	72fb      	strb	r3, [r7, #11]
          break;
 8009016:	e021      	b.n	800905c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7c12      	ldrb	r2, [r2, #16]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
 8009038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903a:	e00f      	b.n	800905c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa30 	bl	80094a4 <USBD_CtlError>
            err++;
 8009044:	7afb      	ldrb	r3, [r7, #11]
 8009046:	3301      	adds	r3, #1
 8009048:	72fb      	strb	r3, [r7, #11]
          break;
 800904a:	e007      	b.n	800905c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa28 	bl	80094a4 <USBD_CtlError>
          err++;
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	3301      	adds	r3, #1
 8009058:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800905a:	bf00      	nop
      }
      break;
 800905c:	e037      	b.n	80090ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	7c1b      	ldrb	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d109      	bne.n	800907a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906e:	f107 0208 	add.w	r2, r7, #8
 8009072:	4610      	mov	r0, r2
 8009074:	4798      	blx	r3
 8009076:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009078:	e029      	b.n	80090ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fa11 	bl	80094a4 <USBD_CtlError>
        err++;
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	3301      	adds	r3, #1
 8009086:	72fb      	strb	r3, [r7, #11]
      break;
 8009088:	e021      	b.n	80090ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7c1b      	ldrb	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10d      	bne.n	80090ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	f107 0208 	add.w	r2, r7, #8
 800909e:	4610      	mov	r0, r2
 80090a0:	4798      	blx	r3
 80090a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3301      	adds	r3, #1
 80090a8:	2207      	movs	r2, #7
 80090aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090ac:	e00f      	b.n	80090ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9f7 	bl	80094a4 <USBD_CtlError>
        err++;
 80090b6:	7afb      	ldrb	r3, [r7, #11]
 80090b8:	3301      	adds	r3, #1
 80090ba:	72fb      	strb	r3, [r7, #11]
      break;
 80090bc:	e007      	b.n	80090ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9ef 	bl	80094a4 <USBD_CtlError>
      err++;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	3301      	adds	r3, #1
 80090ca:	72fb      	strb	r3, [r7, #11]
      break;
 80090cc:	bf00      	nop
  }

  if (err != 0U)
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d11e      	bne.n	8009112 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	88db      	ldrh	r3, [r3, #6]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d016      	beq.n	800910a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090dc:	893b      	ldrh	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	88da      	ldrh	r2, [r3, #6]
 80090e6:	893b      	ldrh	r3, [r7, #8]
 80090e8:	4293      	cmp	r3, r2
 80090ea:	bf28      	it	cs
 80090ec:	4613      	movcs	r3, r2
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	461a      	mov	r2, r3
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa44 	bl	8009586 <USBD_CtlSendData>
 80090fe:	e009      	b.n	8009114 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9ce 	bl	80094a4 <USBD_CtlError>
 8009108:	e004      	b.n	8009114 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa95 	bl	800963a <USBD_CtlSendStatus>
 8009110:	e000      	b.n	8009114 <USBD_GetDescriptor+0x2cc>
    return;
 8009112:	bf00      	nop
  }
}
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop

0800911c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	889b      	ldrh	r3, [r3, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d131      	bne.n	8009192 <USBD_SetAddress+0x76>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	88db      	ldrh	r3, [r3, #6]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d12d      	bne.n	8009192 <USBD_SetAddress+0x76>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	2b7f      	cmp	r3, #127	; 0x7f
 800913c:	d829      	bhi.n	8009192 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d104      	bne.n	8009160 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9a3 	bl	80094a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915e:	e01d      	b.n	800919c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7bfa      	ldrb	r2, [r7, #15]
 8009164:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f004 fc4b 	bl	800da08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa61 	bl	800963a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2202      	movs	r2, #2
 8009182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009186:	e009      	b.n	800919c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009190:	e004      	b.n	800919c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f985 	bl	80094a4 <USBD_CtlError>
  }
}
 800919a:	bf00      	nop
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	4b4c      	ldr	r3, [pc, #304]	; (80092ec <USBD_SetConfig+0x148>)
 80091ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091bc:	4b4b      	ldr	r3, [pc, #300]	; (80092ec <USBD_SetConfig+0x148>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d905      	bls.n	80091d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f96c 	bl	80094a4 <USBD_CtlError>
    return USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e088      	b.n	80092e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d002      	beq.n	80091e2 <USBD_SetConfig+0x3e>
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d025      	beq.n	800922c <USBD_SetConfig+0x88>
 80091e0:	e071      	b.n	80092c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091e2:	4b42      	ldr	r3, [pc, #264]	; (80092ec <USBD_SetConfig+0x148>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01c      	beq.n	8009224 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80091ea:	4b40      	ldr	r3, [pc, #256]	; (80092ec <USBD_SetConfig+0x148>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091f4:	4b3d      	ldr	r3, [pc, #244]	; (80092ec <USBD_SetConfig+0x148>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff f949 	bl	8008492 <USBD_SetClassConfig>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f949 	bl	80094a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009212:	e065      	b.n	80092e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa10 	bl	800963a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2203      	movs	r2, #3
 800921e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009222:	e05d      	b.n	80092e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa08 	bl	800963a <USBD_CtlSendStatus>
      break;
 800922a:	e059      	b.n	80092e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800922c:	4b2f      	ldr	r3, [pc, #188]	; (80092ec <USBD_SetConfig+0x148>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d112      	bne.n	800925a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800923c:	4b2b      	ldr	r3, [pc, #172]	; (80092ec <USBD_SetConfig+0x148>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009246:	4b29      	ldr	r3, [pc, #164]	; (80092ec <USBD_SetConfig+0x148>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff f93c 	bl	80084ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9f1 	bl	800963a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009258:	e042      	b.n	80092e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800925a:	4b24      	ldr	r3, [pc, #144]	; (80092ec <USBD_SetConfig+0x148>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d02a      	beq.n	80092be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff f92a 	bl	80084ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <USBD_SetConfig+0x148>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009280:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <USBD_SetConfig+0x148>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f903 	bl	8008492 <USBD_SetClassConfig>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00f      	beq.n	80092b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f903 	bl	80094a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff f90f 	bl	80084ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092b4:	e014      	b.n	80092e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f9bf 	bl	800963a <USBD_CtlSendStatus>
      break;
 80092bc:	e010      	b.n	80092e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9bb 	bl	800963a <USBD_CtlSendStatus>
      break;
 80092c4:	e00c      	b.n	80092e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f8eb 	bl	80094a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092ce:	4b07      	ldr	r3, [pc, #28]	; (80092ec <USBD_SetConfig+0x148>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff f8f8 	bl	80084ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	73fb      	strb	r3, [r7, #15]
      break;
 80092de:	bf00      	nop
  }

  return ret;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200002a4 	.word	0x200002a4

080092f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88db      	ldrh	r3, [r3, #6]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d004      	beq.n	800930c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f8cd 	bl	80094a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800930a:	e023      	b.n	8009354 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	dc02      	bgt.n	800931e <USBD_GetConfig+0x2e>
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc03      	bgt.n	8009324 <USBD_GetConfig+0x34>
 800931c:	e015      	b.n	800934a <USBD_GetConfig+0x5a>
 800931e:	2b03      	cmp	r3, #3
 8009320:	d00b      	beq.n	800933a <USBD_GetConfig+0x4a>
 8009322:	e012      	b.n	800934a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3308      	adds	r3, #8
 800932e:	2201      	movs	r2, #1
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f927 	bl	8009586 <USBD_CtlSendData>
        break;
 8009338:	e00c      	b.n	8009354 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3304      	adds	r3, #4
 800933e:	2201      	movs	r2, #1
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f91f 	bl	8009586 <USBD_CtlSendData>
        break;
 8009348:	e004      	b.n	8009354 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8a9 	bl	80094a4 <USBD_CtlError>
        break;
 8009352:	bf00      	nop
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	2b02      	cmp	r3, #2
 8009372:	d81e      	bhi.n	80093b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	88db      	ldrh	r3, [r3, #6]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d004      	beq.n	8009386 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f890 	bl	80094a4 <USBD_CtlError>
        break;
 8009384:	e01a      	b.n	80093bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f043 0202 	orr.w	r2, r3, #2
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	330c      	adds	r3, #12
 80093a6:	2202      	movs	r2, #2
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8eb 	bl	8009586 <USBD_CtlSendData>
      break;
 80093b0:	e004      	b.n	80093bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f875 	bl	80094a4 <USBD_CtlError>
      break;
 80093ba:	bf00      	nop
  }
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	885b      	ldrh	r3, [r3, #2]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d106      	bne.n	80093e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f92b 	bl	800963a <USBD_CtlSendStatus>
  }
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b02      	cmp	r3, #2
 8009402:	d80b      	bhi.n	800941c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d10c      	bne.n	8009426 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f910 	bl	800963a <USBD_CtlSendStatus>
      }
      break;
 800941a:	e004      	b.n	8009426 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f840 	bl	80094a4 <USBD_CtlError>
      break;
 8009424:	e000      	b.n	8009428 <USBD_ClrFeature+0x3c>
      break;
 8009426:	bf00      	nop
  }
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fabc 	bl	80089d8 <SWAPBYTE>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3301      	adds	r3, #1
 8009472:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff faaf 	bl	80089d8 <SWAPBYTE>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff faa2 	bl	80089d8 <SWAPBYTE>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	80da      	strh	r2, [r3, #6]
}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ae:	2180      	movs	r1, #128	; 0x80
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f004 fa3f 	bl	800d934 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f004 fa3b 	bl	800d934 <USBD_LL_StallEP>
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d036      	beq.n	800954a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094e0:	6938      	ldr	r0, [r7, #16]
 80094e2:	f000 f836 	bl	8009552 <USBD_GetLen>
 80094e6:	4603      	mov	r3, r0
 80094e8:	3301      	adds	r3, #1
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	4413      	add	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	3301      	adds	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	4413      	add	r3, r2
 800950c:	2203      	movs	r2, #3
 800950e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	3301      	adds	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009516:	e013      	b.n	8009540 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	4413      	add	r3, r2
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	3301      	adds	r3, #1
 8009528:	613b      	str	r3, [r7, #16]
    idx++;
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	3301      	adds	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	4413      	add	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
    idx++;
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	3301      	adds	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e7      	bne.n	8009518 <USBD_GetString+0x52>
 8009548:	e000      	b.n	800954c <USBD_GetString+0x86>
    return;
 800954a:	bf00      	nop
  }
}
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009562:	e005      	b.n	8009570 <USBD_GetLen+0x1e>
  {
    len++;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	3301      	adds	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	3301      	adds	r3, #1
 800956e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f5      	bne.n	8009564 <USBD_GetLen+0x12>
  }

  return len;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2202      	movs	r2, #2
 8009596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	2100      	movs	r1, #0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f004 fa4a 	bl	800da46 <USBD_LL_Transmit>

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	2100      	movs	r1, #0
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f004 fa39 	bl	800da46 <USBD_LL_Transmit>

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2203      	movs	r2, #3
 80095ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	2100      	movs	r1, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f004 fa3d 	bl	800da88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	2100      	movs	r1, #0
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f004 fa2c 	bl	800da88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2204      	movs	r2, #4
 8009646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800964a:	2300      	movs	r3, #0
 800964c:	2200      	movs	r2, #0
 800964e:	2100      	movs	r1, #0
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f004 f9f8 	bl	800da46 <USBD_LL_Transmit>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2205      	movs	r2, #5
 800966c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009670:	2300      	movs	r3, #0
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f004 fa06 	bl	800da88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <__NVIC_SetPriority>:
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009698:	2b00      	cmp	r3, #0
 800969a:	db0a      	blt.n	80096b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	490c      	ldr	r1, [pc, #48]	; (80096d4 <__NVIC_SetPriority+0x4c>)
 80096a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a6:	0112      	lsls	r2, r2, #4
 80096a8:	b2d2      	uxtb	r2, r2
 80096aa:	440b      	add	r3, r1
 80096ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80096b0:	e00a      	b.n	80096c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	4908      	ldr	r1, [pc, #32]	; (80096d8 <__NVIC_SetPriority+0x50>)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	3b04      	subs	r3, #4
 80096c0:	0112      	lsls	r2, r2, #4
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	440b      	add	r3, r1
 80096c6:	761a      	strb	r2, [r3, #24]
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	e000e100 	.word	0xe000e100
 80096d8:	e000ed00 	.word	0xe000ed00

080096dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <SysTick_Handler+0x1c>)
 80096e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80096e4:	f002 fa7c 	bl	800bbe0 <xTaskGetSchedulerState>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d001      	beq.n	80096f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80096ee:	f003 fb53 	bl	800cd98 <xPortSysTickHandler>
  }
}
 80096f2:	bf00      	nop
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	e000e010 	.word	0xe000e010

080096fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009700:	2100      	movs	r1, #0
 8009702:	f06f 0004 	mvn.w	r0, #4
 8009706:	f7ff ffbf 	bl	8009688 <__NVIC_SetPriority>
#endif
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009716:	f3ef 8305 	mrs	r3, IPSR
 800971a:	603b      	str	r3, [r7, #0]
  return(result);
 800971c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009722:	f06f 0305 	mvn.w	r3, #5
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	e00c      	b.n	8009744 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <osKernelInitialize+0x44>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d105      	bne.n	800973e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009732:	4b08      	ldr	r3, [pc, #32]	; (8009754 <osKernelInitialize+0x44>)
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009738:	2300      	movs	r3, #0
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	e002      	b.n	8009744 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800973e:	f04f 33ff 	mov.w	r3, #4294967295
 8009742:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009744:	687b      	ldr	r3, [r7, #4]
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	200002a8 	.word	0x200002a8

08009758 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800975e:	f3ef 8305 	mrs	r3, IPSR
 8009762:	603b      	str	r3, [r7, #0]
  return(result);
 8009764:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <osKernelStart+0x1a>
    stat = osErrorISR;
 800976a:	f06f 0305 	mvn.w	r3, #5
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	e010      	b.n	8009794 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <osKernelStart+0x48>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d109      	bne.n	800978e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800977a:	f7ff ffbf 	bl	80096fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800977e:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <osKernelStart+0x48>)
 8009780:	2202      	movs	r2, #2
 8009782:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009784:	f001 fdd4 	bl	800b330 <vTaskStartScheduler>
      stat = osOK;
 8009788:	2300      	movs	r3, #0
 800978a:	607b      	str	r3, [r7, #4]
 800978c:	e002      	b.n	8009794 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800978e:	f04f 33ff 	mov.w	r3, #4294967295
 8009792:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009794:	687b      	ldr	r3, [r7, #4]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200002a8 	.word	0x200002a8

080097a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08e      	sub	sp, #56	; 0x38
 80097a8:	af04      	add	r7, sp, #16
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097b4:	f3ef 8305 	mrs	r3, IPSR
 80097b8:	617b      	str	r3, [r7, #20]
  return(result);
 80097ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d17e      	bne.n	80098be <osThreadNew+0x11a>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d07b      	beq.n	80098be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097c6:	2380      	movs	r3, #128	; 0x80
 80097c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097ca:	2318      	movs	r3, #24
 80097cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d045      	beq.n	800986a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <osThreadNew+0x48>
        name = attr->name;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d008      	beq.n	8009812 <osThreadNew+0x6e>
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	2b38      	cmp	r3, #56	; 0x38
 8009804:	d805      	bhi.n	8009812 <osThreadNew+0x6e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <osThreadNew+0x72>
        return (NULL);
 8009812:	2300      	movs	r3, #0
 8009814:	e054      	b.n	80098c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	089b      	lsrs	r3, r3, #2
 8009824:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00e      	beq.n	800984c <osThreadNew+0xa8>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b5b      	cmp	r3, #91	; 0x5b
 8009834:	d90a      	bls.n	800984c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800983a:	2b00      	cmp	r3, #0
 800983c:	d006      	beq.n	800984c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <osThreadNew+0xa8>
        mem = 1;
 8009846:	2301      	movs	r3, #1
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	e010      	b.n	800986e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10c      	bne.n	800986e <osThreadNew+0xca>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d108      	bne.n	800986e <osThreadNew+0xca>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <osThreadNew+0xca>
          mem = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e001      	b.n	800986e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d110      	bne.n	8009896 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800987c:	9202      	str	r2, [sp, #8]
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	6a3a      	ldr	r2, [r7, #32]
 8009888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f001 fb7a 	bl	800af84 <xTaskCreateStatic>
 8009890:	4603      	mov	r3, r0
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	e013      	b.n	80098be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d110      	bne.n	80098be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	f107 0310 	add.w	r3, r7, #16
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f001 fbc5 	bl	800b03e <xTaskCreate>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d001      	beq.n	80098be <osThreadNew+0x11a>
            hTask = NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098be:	693b      	ldr	r3, [r7, #16]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3728      	adds	r7, #40	; 0x28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <osThreadFlagsSet+0x1a>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da03      	bge.n	80098ea <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80098e2:	f06f 0303 	mvn.w	r3, #3
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e035      	b.n	8009956 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80098ea:	f04f 33ff 	mov.w	r3, #4294967295
 80098ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f0:	f3ef 8305 	mrs	r3, IPSR
 80098f4:	613b      	str	r3, [r7, #16]
  return(result);
 80098f6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01f      	beq.n	800993c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009900:	f107 0308 	add.w	r3, r7, #8
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2300      	movs	r3, #0
 8009908:	2201      	movs	r2, #1
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6978      	ldr	r0, [r7, #20]
 800990e:	f002 fc03 	bl	800c118 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009912:	f107 030c 	add.w	r3, r7, #12
 8009916:	2200      	movs	r2, #0
 8009918:	9200      	str	r2, [sp, #0]
 800991a:	2200      	movs	r2, #0
 800991c:	2100      	movs	r1, #0
 800991e:	6978      	ldr	r0, [r7, #20]
 8009920:	f002 fbfa 	bl	800c118 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d015      	beq.n	8009956 <osThreadFlagsSet+0x8e>
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <osThreadFlagsSet+0x98>)
 800992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	e00c      	b.n	8009956 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800993c:	2300      	movs	r3, #0
 800993e:	2201      	movs	r2, #1
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f002 fb30 	bl	800bfa8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009948:	f107 030c 	add.w	r3, r7, #12
 800994c:	2200      	movs	r2, #0
 800994e:	2100      	movs	r1, #0
 8009950:	6978      	ldr	r0, [r7, #20]
 8009952:	f002 fb29 	bl	800bfa8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	e000ed04 	.word	0xe000ed04

08009964 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996c:	f3ef 8305 	mrs	r3, IPSR
 8009970:	60fb      	str	r3, [r7, #12]
  return(result);
 8009972:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 8009978:	f06f 0305 	mvn.w	r3, #5
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e02a      	b.n	80099d6 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	da03      	bge.n	800998e <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009986:	f06f 0303 	mvn.w	r3, #3
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	e023      	b.n	80099d6 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800998e:	f002 f917 	bl	800bbc0 <xTaskGetCurrentTaskHandle>
 8009992:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6938      	ldr	r0, [r7, #16]
 800999e:	f002 fb03 	bl	800bfa8 <xTaskGenericNotify>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d113      	bne.n	80099d0 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	43da      	mvns	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4013      	ands	r3, r2
 80099b4:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	2300      	movs	r3, #0
 80099ba:	2203      	movs	r2, #3
 80099bc:	6938      	ldr	r0, [r7, #16]
 80099be:	f002 faf3 	bl	800bfa8 <xTaskGenericNotify>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d006      	beq.n	80099d6 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	e002      	b.n	80099d6 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80099d0:	f04f 33ff 	mov.w	r3, #4294967295
 80099d4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80099d6:	697b      	ldr	r3, [r7, #20]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e6:	f3ef 8305 	mrs	r3, IPSR
 80099ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ec:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 80099f2:	f06f 0305 	mvn.w	r3, #5
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e00e      	b.n	8009a18 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80099fa:	f002 f8e1 	bl	800bbc0 <xTaskGetCurrentTaskHandle>
 80099fe:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8009a00:	1d3b      	adds	r3, r7, #4
 8009a02:	2200      	movs	r2, #0
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f002 face 	bl	800bfa8 <xTaskGenericNotify>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d002      	beq.n	8009a18 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 8009a12:	f04f 33ff 	mov.w	r3, #4294967295
 8009a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8009a18:	687b      	ldr	r3, [r7, #4]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b08c      	sub	sp, #48	; 0x30
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2e:	f3ef 8305 	mrs	r3, IPSR
 8009a32:	617b      	str	r3, [r7, #20]
  return(result);
 8009a34:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009a3a:	f06f 0305 	mvn.w	r3, #5
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a40:	e06b      	b.n	8009b1a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da03      	bge.n	8009a50 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009a48:	f06f 0303 	mvn.w	r3, #3
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a4e:	e064      	b.n	8009b1a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a5e:	e001      	b.n	8009a64 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009a6c:	f001 fd72 	bl	800b554 <xTaskGetTickCount>
 8009a70:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009a72:	f107 0210 	add.w	r2, r7, #16
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f002 fa3a 	bl	800bef4 <xTaskNotifyWait>
 8009a80:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d137      	bne.n	8009af8 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	4313      	orrs	r3, r2
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d032      	beq.n	8009b14 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10f      	bne.n	8009ad4 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009ab4:	f06f 0302 	mvn.w	r3, #2
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009aba:	e02e      	b.n	8009b1a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d128      	bne.n	8009b18 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009acc:	f06f 0302 	mvn.w	r3, #2
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009ad2:	e022      	b.n	8009b1a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009ad4:	f001 fd3e 	bl	800b554 <xTaskGetTickCount>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d902      	bls.n	8009aee <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
 8009aec:	e00e      	b.n	8009b0c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
 8009af6:	e009      	b.n	8009b0c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009afe:	f06f 0302 	mvn.w	r3, #2
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b04:	e002      	b.n	8009b0c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009b06:	f06f 0301 	mvn.w	r3, #1
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1af      	bne.n	8009a72 <osThreadFlagsWait+0x50>
 8009b12:	e002      	b.n	8009b1a <osThreadFlagsWait+0xf8>
            break;
 8009b14:	bf00      	nop
 8009b16:	e000      	b.n	8009b1a <osThreadFlagsWait+0xf8>
            break;
 8009b18:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3730      	adds	r7, #48	; 0x30
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2c:	f3ef 8305 	mrs	r3, IPSR
 8009b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <osDelay+0x1c>
    stat = osErrorISR;
 8009b38:	f06f 0305 	mvn.w	r3, #5
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	e007      	b.n	8009b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fbbc 	bl	800b2c8 <vTaskDelay>
    }
  }

  return (stat);
 8009b50:	68fb      	ldr	r3, [r7, #12]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b08a      	sub	sp, #40	; 0x28
 8009b5e:	af02      	add	r7, sp, #8
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6a:	f3ef 8305 	mrs	r3, IPSR
 8009b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8009b70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d175      	bne.n	8009c62 <osSemaphoreNew+0x108>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d072      	beq.n	8009c62 <osSemaphoreNew+0x108>
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d86e      	bhi.n	8009c62 <osSemaphoreNew+0x108>
    mem = -1;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d015      	beq.n	8009bbc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d006      	beq.n	8009ba6 <osSemaphoreNew+0x4c>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	2b4f      	cmp	r3, #79	; 0x4f
 8009b9e:	d902      	bls.n	8009ba6 <osSemaphoreNew+0x4c>
        mem = 1;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	61bb      	str	r3, [r7, #24]
 8009ba4:	e00c      	b.n	8009bc0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d108      	bne.n	8009bc0 <osSemaphoreNew+0x66>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <osSemaphoreNew+0x66>
          mem = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e001      	b.n	8009bc0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc6:	d04c      	beq.n	8009c62 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d128      	bne.n	8009c20 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d10a      	bne.n	8009bea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	2203      	movs	r2, #3
 8009bda:	9200      	str	r2, [sp, #0]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	2001      	movs	r0, #1
 8009be2:	f000 fa29 	bl	800a038 <xQueueGenericCreateStatic>
 8009be6:	61f8      	str	r0, [r7, #28]
 8009be8:	e005      	b.n	8009bf6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009bea:	2203      	movs	r2, #3
 8009bec:	2100      	movs	r1, #0
 8009bee:	2001      	movs	r0, #1
 8009bf0:	f000 fa9a 	bl	800a128 <xQueueGenericCreate>
 8009bf4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d022      	beq.n	8009c42 <osSemaphoreNew+0xe8>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d01f      	beq.n	8009c42 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c02:	2300      	movs	r3, #0
 8009c04:	2200      	movs	r2, #0
 8009c06:	2100      	movs	r1, #0
 8009c08:	69f8      	ldr	r0, [r7, #28]
 8009c0a:	f000 fb55 	bl	800a2b8 <xQueueGenericSend>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d016      	beq.n	8009c42 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009c14:	69f8      	ldr	r0, [r7, #28]
 8009c16:	f000 ffe1 	bl	800abdc <vQueueDelete>
            hSemaphore = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
 8009c1e:	e010      	b.n	8009c42 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d108      	bne.n	8009c38 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fad7 	bl	800a1e2 <xQueueCreateCountingSemaphoreStatic>
 8009c34:	61f8      	str	r0, [r7, #28]
 8009c36:	e004      	b.n	8009c42 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 fb08 	bl	800a250 <xQueueCreateCountingSemaphore>
 8009c40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00c      	beq.n	8009c62 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	e001      	b.n	8009c5a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c5a:	6979      	ldr	r1, [r7, #20]
 8009c5c:	69f8      	ldr	r0, [r7, #28]
 8009c5e:	f001 f909 	bl	800ae74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c62:	69fb      	ldr	r3, [r7, #28]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009c84:	f06f 0303 	mvn.w	r3, #3
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e039      	b.n	8009d00 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c8c:	f3ef 8305 	mrs	r3, IPSR
 8009c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d022      	beq.n	8009cde <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009c9e:	f06f 0303 	mvn.w	r3, #3
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	e02c      	b.n	8009d00 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	6938      	ldr	r0, [r7, #16]
 8009cb4:	f000 ff12 	bl	800aadc <xQueueReceiveFromISR>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d003      	beq.n	8009cc6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009cbe:	f06f 0302 	mvn.w	r3, #2
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	e01c      	b.n	8009d00 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d019      	beq.n	8009d00 <osSemaphoreAcquire+0x94>
 8009ccc:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <osSemaphoreAcquire+0xa0>)
 8009cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	e010      	b.n	8009d00 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6938      	ldr	r0, [r7, #16]
 8009ce2:	f000 fdef 	bl	800a8c4 <xQueueSemaphoreTake>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d009      	beq.n	8009d00 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009cf2:	f06f 0301 	mvn.w	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e002      	b.n	8009d00 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009cfa:	f06f 0302 	mvn.w	r3, #2
 8009cfe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009d00:	697b      	ldr	r3, [r7, #20]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d103      	bne.n	8009d2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009d26:	f06f 0303 	mvn.w	r3, #3
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e02c      	b.n	8009d88 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01a      	beq.n	8009d70 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4619      	mov	r1, r3
 8009d44:	6938      	ldr	r0, [r7, #16]
 8009d46:	f000 fc50 	bl	800a5ea <xQueueGiveFromISR>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d003      	beq.n	8009d58 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009d50:	f06f 0302 	mvn.w	r3, #2
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e017      	b.n	8009d88 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d014      	beq.n	8009d88 <osSemaphoreRelease+0x78>
 8009d5e:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <osSemaphoreRelease+0x84>)
 8009d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	e00b      	b.n	8009d88 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d70:	2300      	movs	r3, #0
 8009d72:	2200      	movs	r2, #0
 8009d74:	2100      	movs	r1, #0
 8009d76:	6938      	ldr	r0, [r7, #16]
 8009d78:	f000 fa9e 	bl	800a2b8 <xQueueGenericSend>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d002      	beq.n	8009d88 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009d82:	f06f 0302 	mvn.w	r3, #2
 8009d86:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d88:	697b      	ldr	r3, [r7, #20]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	e000ed04 	.word	0xe000ed04

08009d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a07      	ldr	r2, [pc, #28]	; (8009dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4a06      	ldr	r2, [pc, #24]	; (8009dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8009dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2280      	movs	r2, #128	; 0x80
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	200002ac 	.word	0x200002ac
 8009dc8:	20000308 	.word	0x20000308

08009dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4a06      	ldr	r2, [pc, #24]	; (8009dfc <vApplicationGetTimerTaskMemory+0x30>)
 8009de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dea:	601a      	str	r2, [r3, #0]
}
 8009dec:	bf00      	nop
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	20000508 	.word	0x20000508
 8009dfc:	20000564 	.word	0x20000564

08009e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f103 0208 	add.w	r2, r3, #8
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f103 0208 	add.w	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f103 0208 	add.w	r2, r3, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	601a      	str	r2, [r3, #0]
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d103      	bne.n	8009ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e00c      	b.n	8009edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e002      	b.n	8009ed0 <vListInsert+0x2e>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d2f6      	bcs.n	8009eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6892      	ldr	r2, [r2, #8]
 8009f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6852      	ldr	r2, [r2, #4]
 8009f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d103      	bne.n	8009f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	1e5a      	subs	r2, r3, #1
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f92:	f002 fe6f 	bl	800cc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	441a      	add	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	68f9      	ldr	r1, [r7, #12]
 8009fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	441a      	add	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	22ff      	movs	r2, #255	; 0xff
 8009fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d114      	bne.n	800a012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01a      	beq.n	800a026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fc25 	bl	800b844 <xTaskRemoveFromEventList>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d012      	beq.n	800a026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <xQueueGenericReset+0xcc>)
 800a002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	e009      	b.n	800a026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3310      	adds	r3, #16
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fef2 	bl	8009e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3324      	adds	r3, #36	; 0x24
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff feed 	bl	8009e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a026:	f002 fe55 	bl	800ccd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a02a:	2301      	movs	r3, #1
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <xQueueGenericCreateStatic+0x52>
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <xQueueGenericCreateStatic+0x56>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <xQueueGenericCreateStatic+0x58>
 800a08e:	2300      	movs	r3, #0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10a      	bne.n	800a0aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	623b      	str	r3, [r7, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d102      	bne.n	800a0b6 <xQueueGenericCreateStatic+0x7e>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <xQueueGenericCreateStatic+0x82>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <xQueueGenericCreateStatic+0x84>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	61fb      	str	r3, [r7, #28]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0d6:	2350      	movs	r3, #80	; 0x50
 800a0d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b50      	cmp	r3, #80	; 0x50
 800a0de:	d00a      	beq.n	800a0f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	61bb      	str	r3, [r7, #24]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00d      	beq.n	800a11e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a10a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	4613      	mov	r3, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f83f 	bl	800a19c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a120:	4618      	mov	r0, r3
 800a122:	3730      	adds	r7, #48	; 0x30
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	; 0x28
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	4613      	mov	r3, r2
 800a134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	613b      	str	r3, [r7, #16]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	fb02 f303 	mul.w	r3, r2, r3
 800a15a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	3350      	adds	r3, #80	; 0x50
 800a160:	4618      	mov	r0, r3
 800a162:	f002 fea9 	bl	800ceb8 <pvPortMalloc>
 800a166:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	3350      	adds	r3, #80	; 0x50
 800a176:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a180:	79fa      	ldrb	r2, [r7, #7]
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	4613      	mov	r3, r2
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f805 	bl	800a19c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a192:	69bb      	ldr	r3, [r7, #24]
	}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d103      	bne.n	800a1b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e002      	b.n	800a1be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	69b8      	ldr	r0, [r7, #24]
 800a1ce:	f7ff fecb 	bl	8009f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	78fa      	ldrb	r2, [r7, #3]
 800a1d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1da:	bf00      	nop
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b08a      	sub	sp, #40	; 0x28
 800a1e6:	af02      	add	r7, sp, #8
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	61bb      	str	r3, [r7, #24]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d90a      	bls.n	800a228 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	617b      	str	r3, [r7, #20]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a228:	2302      	movs	r3, #2
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff ff00 	bl	800a038 <xQueueGenericCreateStatic>
 800a238:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a246:	69fb      	ldr	r3, [r7, #28]
	}
 800a248:	4618      	mov	r0, r3
 800a24a:	3720      	adds	r7, #32
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d90a      	bls.n	800a294 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a294:	2202      	movs	r2, #2
 800a296:	2100      	movs	r1, #0
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff ff45 	bl	800a128 <xQueueGenericCreate>
 800a29e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2ac:	697b      	ldr	r3, [r7, #20]
	}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	; 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <xQueueGenericSend+0x32>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <xQueueGenericSend+0x40>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <xQueueGenericSend+0x44>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <xQueueGenericSend+0x46>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <xQueueGenericSend+0x60>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSend+0x6e>
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <xQueueGenericSend+0x72>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <xQueueGenericSend+0x74>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xQueueGenericSend+0x8e>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a346:	f001 fc4b 	bl	800bbe0 <xTaskGetSchedulerState>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <xQueueGenericSend+0x9e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueGenericSend+0xa2>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSend+0xa4>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueGenericSend+0xbe>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	61fb      	str	r3, [r7, #28]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a376:	f002 fc7d 	bl	800cc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	429a      	cmp	r2, r3
 800a384:	d302      	bcc.n	800a38c <xQueueGenericSend+0xd4>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d129      	bne.n	800a3e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a392:	f000 fc5e 	bl	800ac52 <prvCopyDataToQueue>
 800a396:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d010      	beq.n	800a3c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 fa4d 	bl	800b844 <xTaskRemoveFromEventList>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d013      	beq.n	800a3d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3b0:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	e00a      	b.n	800a3d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b39      	ldr	r3, [pc, #228]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3d8:	f002 fc7c 	bl	800ccd4 <vPortExitCritical>
				return pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e063      	b.n	800a4a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3e6:	f002 fc75 	bl	800ccd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e05c      	b.n	800a4a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d106      	bne.n	800a402 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f4:	f107 0314 	add.w	r3, r7, #20
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fa87 	bl	800b90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a402:	f002 fc67 	bl	800ccd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a406:	f000 fff9 	bl	800b3fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a40a:	f002 fc33 	bl	800cc74 <vPortEnterCritical>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a414:	b25b      	sxtb	r3, r3
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d103      	bne.n	800a424 <xQueueGenericSend+0x16c>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d103      	bne.n	800a43a <xQueueGenericSend+0x182>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a43a:	f002 fc4b 	bl	800ccd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a43e:	1d3a      	adds	r2, r7, #4
 800a440:	f107 0314 	add.w	r3, r7, #20
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fa76 	bl	800b938 <xTaskCheckForTimeOut>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d124      	bne.n	800a49c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a454:	f000 fcf5 	bl	800ae42 <prvIsQueueFull>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d018      	beq.n	800a490 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	3310      	adds	r3, #16
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 f99c 	bl	800b7a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46e:	f000 fc80 	bl	800ad72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a472:	f000 ffd1 	bl	800b418 <xTaskResumeAll>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f af7c 	bne.w	800a376 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a47e:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	e772      	b.n	800a376 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a492:	f000 fc6e 	bl	800ad72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a496:	f000 ffbf 	bl	800b418 <xTaskResumeAll>
 800a49a:	e76c      	b.n	800a376 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49e:	f000 fc68 	bl	800ad72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4a2:	f000 ffb9 	bl	800b418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3738      	adds	r7, #56	; 0x38
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	e000ed04 	.word	0xe000ed04

0800a4b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b090      	sub	sp, #64	; 0x40
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x3c>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <xQueueGenericSendFromISR+0x40>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e000      	b.n	800a4f6 <xQueueGenericSendFromISR+0x42>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b02      	cmp	r3, #2
 800a514:	d103      	bne.n	800a51e <xQueueGenericSendFromISR+0x6a>
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <xQueueGenericSendFromISR+0x6e>
 800a51e:	2301      	movs	r3, #1
 800a520:	e000      	b.n	800a524 <xQueueGenericSendFromISR+0x70>
 800a522:	2300      	movs	r3, #0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	623b      	str	r3, [r7, #32]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a53e:	f002 fc7b 	bl	800ce38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a542:	f3ef 8211 	mrs	r2, BASEPRI
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	61fa      	str	r2, [r7, #28]
 800a558:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a55a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <xQueueGenericSendFromISR+0xbc>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d12f      	bne.n	800a5d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a586:	f000 fb64 	bl	800ac52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a58a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a592:	d112      	bne.n	800a5ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d016      	beq.n	800a5ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	3324      	adds	r3, #36	; 0x24
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f001 f94f 	bl	800b844 <xTaskRemoveFromEventList>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e007      	b.n	800a5ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5be:	3301      	adds	r3, #1
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	b25a      	sxtb	r2, r3
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5ce:	e001      	b.n	800a5d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3740      	adds	r7, #64	; 0x40
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b08e      	sub	sp, #56	; 0x38
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10a      	bne.n	800a614 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	623b      	str	r3, [r7, #32]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00a      	beq.n	800a632 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	61fb      	str	r3, [r7, #28]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueGiveFromISR+0x58>
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <xQueueGiveFromISR+0x5c>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <xQueueGiveFromISR+0x5e>
 800a646:	2300      	movs	r3, #0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61bb      	str	r3, [r7, #24]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a662:	f002 fbe9 	bl	800ce38 <vPortValidateInterruptPriority>
	__asm volatile
 800a666:	f3ef 8211 	mrs	r2, BASEPRI
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	617a      	str	r2, [r7, #20]
 800a67c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a67e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a68e:	429a      	cmp	r2, r3
 800a690:	d22b      	bcs.n	800a6ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d112      	bne.n	800a6d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d016      	beq.n	800a6e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	3324      	adds	r3, #36	; 0x24
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f001 f8c2 	bl	800b844 <xTaskRemoveFromEventList>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00e      	beq.n	800a6e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	e007      	b.n	800a6e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6d8:	3301      	adds	r3, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	b25a      	sxtb	r2, r3
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e8:	e001      	b.n	800a6ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f383 8811 	msr	BASEPRI, r3
}
 800a6f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3738      	adds	r7, #56	; 0x38
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	; 0x30
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a710:	2300      	movs	r3, #0
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <xQueueReceive+0x30>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	623b      	str	r3, [r7, #32]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <xQueueReceive+0x3e>
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <xQueueReceive+0x42>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <xQueueReceive+0x44>
 800a746:	2300      	movs	r3, #0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <xQueueReceive+0x5e>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	61fb      	str	r3, [r7, #28]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a762:	f001 fa3d 	bl	800bbe0 <xTaskGetSchedulerState>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d102      	bne.n	800a772 <xQueueReceive+0x6e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <xQueueReceive+0x72>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <xQueueReceive+0x74>
 800a776:	2300      	movs	r3, #0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <xQueueReceive+0x8e>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	61bb      	str	r3, [r7, #24]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a792:	f002 fa6f 	bl	800cc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d01f      	beq.n	800a7e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7a2:	68b9      	ldr	r1, [r7, #8]
 800a7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a6:	f000 fabe 	bl	800ad26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	1e5a      	subs	r2, r3, #1
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00f      	beq.n	800a7da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	3310      	adds	r3, #16
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 f840 	bl	800b844 <xTaskRemoveFromEventList>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d007      	beq.n	800a7da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7ca:	4b3d      	ldr	r3, [pc, #244]	; (800a8c0 <xQueueReceive+0x1bc>)
 800a7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7da:	f002 fa7b 	bl	800ccd4 <vPortExitCritical>
				return pdPASS;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e069      	b.n	800a8b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7e8:	f002 fa74 	bl	800ccd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e062      	b.n	800a8b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7f6:	f107 0310 	add.w	r3, r7, #16
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 f886 	bl	800b90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a804:	f002 fa66 	bl	800ccd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a808:	f000 fdf8 	bl	800b3fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a80c:	f002 fa32 	bl	800cc74 <vPortEnterCritical>
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a816:	b25b      	sxtb	r3, r3
 800a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81c:	d103      	bne.n	800a826 <xQueueReceive+0x122>
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a82c:	b25b      	sxtb	r3, r3
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	d103      	bne.n	800a83c <xQueueReceive+0x138>
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a83c:	f002 fa4a 	bl	800ccd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a840:	1d3a      	adds	r2, r7, #4
 800a842:	f107 0310 	add.w	r3, r7, #16
 800a846:	4611      	mov	r1, r2
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 f875 	bl	800b938 <xTaskCheckForTimeOut>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d123      	bne.n	800a89c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a856:	f000 fade 	bl	800ae16 <prvIsQueueEmpty>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d017      	beq.n	800a890 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 ff9b 	bl	800b7a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a870:	f000 fa7f 	bl	800ad72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a874:	f000 fdd0 	bl	800b418 <xTaskResumeAll>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d189      	bne.n	800a792 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a87e:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <xQueueReceive+0x1bc>)
 800a880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	e780      	b.n	800a792 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a892:	f000 fa6e 	bl	800ad72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a896:	f000 fdbf 	bl	800b418 <xTaskResumeAll>
 800a89a:	e77a      	b.n	800a792 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89e:	f000 fa68 	bl	800ad72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8a2:	f000 fdb9 	bl	800b418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a8:	f000 fab5 	bl	800ae16 <prvIsQueueEmpty>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f43f af6f 	beq.w	800a792 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3730      	adds	r7, #48	; 0x30
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08e      	sub	sp, #56	; 0x38
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	623b      	str	r3, [r7, #32]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	61fb      	str	r3, [r7, #28]
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a914:	f001 f964 	bl	800bbe0 <xTaskGetSchedulerState>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <xQueueSemaphoreTake+0x60>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <xQueueSemaphoreTake+0x64>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <xQueueSemaphoreTake+0x66>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	61bb      	str	r3, [r7, #24]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a944:	f002 f996 	bl	800cc74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	2b00      	cmp	r3, #0
 800a952:	d024      	beq.n	800a99e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	1e5a      	subs	r2, r3, #1
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a964:	f001 fab2 	bl	800becc <pvTaskIncrementMutexHeldCount>
 800a968:	4602      	mov	r2, r0
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00f      	beq.n	800a996 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	3310      	adds	r3, #16
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 ff62 	bl	800b844 <xTaskRemoveFromEventList>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d007      	beq.n	800a996 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a986:	4b54      	ldr	r3, [pc, #336]	; (800aad8 <xQueueSemaphoreTake+0x214>)
 800a988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a996:	f002 f99d 	bl	800ccd4 <vPortExitCritical>
				return pdPASS;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e097      	b.n	800aace <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d111      	bne.n	800a9c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	617b      	str	r3, [r7, #20]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9c0:	f002 f988 	bl	800ccd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e082      	b.n	800aace <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ce:	f107 030c 	add.w	r3, r7, #12
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 ff9a 	bl	800b90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9dc:	f002 f97a 	bl	800ccd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9e0:	f000 fd0c 	bl	800b3fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e4:	f002 f946 	bl	800cc74 <vPortEnterCritical>
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d103      	bne.n	800a9fe <xQueueSemaphoreTake+0x13a>
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa04:	b25b      	sxtb	r3, r3
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d103      	bne.n	800aa14 <xQueueSemaphoreTake+0x150>
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa14:	f002 f95e 	bl	800ccd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa18:	463a      	mov	r2, r7
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 ff89 	bl	800b938 <xTaskCheckForTimeOut>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d132      	bne.n	800aa92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2e:	f000 f9f2 	bl	800ae16 <prvIsQueueEmpty>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d026      	beq.n	800aa86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d109      	bne.n	800aa54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa40:	f002 f918 	bl	800cc74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 f8e7 	bl	800bc1c <xTaskPriorityInherit>
 800aa4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa50:	f002 f940 	bl	800ccd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	3324      	adds	r3, #36	; 0x24
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fea1 	bl	800b7a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa64:	f000 f985 	bl	800ad72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa68:	f000 fcd6 	bl	800b418 <xTaskResumeAll>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f47f af68 	bne.w	800a944 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa74:	4b18      	ldr	r3, [pc, #96]	; (800aad8 <xQueueSemaphoreTake+0x214>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	e75e      	b.n	800a944 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa88:	f000 f973 	bl	800ad72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa8c:	f000 fcc4 	bl	800b418 <xTaskResumeAll>
 800aa90:	e758      	b.n	800a944 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa94:	f000 f96d 	bl	800ad72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa98:	f000 fcbe 	bl	800b418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa9e:	f000 f9ba 	bl	800ae16 <prvIsQueueEmpty>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f43f af4d 	beq.w	800a944 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aab0:	f002 f8e0 	bl	800cc74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aab6:	f000 f8b4 	bl	800ac22 <prvGetDisinheritPriorityAfterTimeout>
 800aaba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 f980 	bl	800bdc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aac8:	f002 f904 	bl	800ccd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aacc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3738      	adds	r7, #56	; 0x38
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08e      	sub	sp, #56	; 0x38
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	623b      	str	r3, [r7, #32]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d103      	bne.n	800ab16 <xQueueReceiveFromISR+0x3a>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <xQueueReceiveFromISR+0x3e>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueReceiveFromISR+0x40>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61fb      	str	r3, [r7, #28]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab36:	f002 f97f 	bl	800ce38 <vPortValidateInterruptPriority>
	__asm volatile
 800ab3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	61ba      	str	r2, [r7, #24]
 800ab50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d02f      	beq.n	800abc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab70:	f000 f8d9 	bl	800ad26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d112      	bne.n	800abac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d016      	beq.n	800abbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	3310      	adds	r3, #16
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fe56 	bl	800b844 <xTaskRemoveFromEventList>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00e      	beq.n	800abbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00b      	beq.n	800abbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	e007      	b.n	800abbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800abac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abb0:	3301      	adds	r3, #1
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	b25a      	sxtb	r2, r3
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800abbc:	2301      	movs	r3, #1
 800abbe:	637b      	str	r3, [r7, #52]	; 0x34
 800abc0:	e001      	b.n	800abc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	637b      	str	r3, [r7, #52]	; 0x34
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f383 8811 	msr	BASEPRI, r3
}
 800abd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3738      	adds	r7, #56	; 0x38
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <vQueueDelete+0x28>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60bb      	str	r3, [r7, #8]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f95f 	bl	800aec8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f002 fa1b 	bl	800d050 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d006      	beq.n	800ac40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e001      	b.n	800ac44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac44:	68fb      	ldr	r3, [r7, #12]
	}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b086      	sub	sp, #24
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10d      	bne.n	800ac8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d14d      	bne.n	800ad14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f001 f835 	bl	800bcec <xTaskPriorityDisinherit>
 800ac82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	609a      	str	r2, [r3, #8]
 800ac8a:	e043      	b.n	800ad14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d119      	bne.n	800acc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6858      	ldr	r0, [r3, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	f002 ff83 	bl	800dba8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acaa:	441a      	add	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d32b      	bcc.n	800ad14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	605a      	str	r2, [r3, #4]
 800acc4:	e026      	b.n	800ad14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	68d8      	ldr	r0, [r3, #12]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	461a      	mov	r2, r3
 800acd0:	68b9      	ldr	r1, [r7, #8]
 800acd2:	f002 ff69 	bl	800dba8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	425b      	negs	r3, r3
 800ace0:	441a      	add	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d207      	bcs.n	800ad02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	425b      	negs	r3, r3
 800acfc:	441a      	add	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d105      	bne.n	800ad14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad1c:	697b      	ldr	r3, [r7, #20]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d018      	beq.n	800ad6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad40:	441a      	add	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68da      	ldr	r2, [r3, #12]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d303      	bcc.n	800ad5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68d9      	ldr	r1, [r3, #12]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	461a      	mov	r2, r3
 800ad64:	6838      	ldr	r0, [r7, #0]
 800ad66:	f002 ff1f 	bl	800dba8 <memcpy>
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad7a:	f001 ff7b 	bl	800cc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad86:	e011      	b.n	800adac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d012      	beq.n	800adb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3324      	adds	r3, #36	; 0x24
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fd55 	bl	800b844 <xTaskRemoveFromEventList>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ada0:	f000 fe2c 	bl	800b9fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dce9      	bgt.n	800ad88 <prvUnlockQueue+0x16>
 800adb4:	e000      	b.n	800adb8 <prvUnlockQueue+0x46>
					break;
 800adb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	22ff      	movs	r2, #255	; 0xff
 800adbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800adc0:	f001 ff88 	bl	800ccd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adc4:	f001 ff56 	bl	800cc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800add0:	e011      	b.n	800adf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d012      	beq.n	800ae00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	3310      	adds	r3, #16
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fd30 	bl	800b844 <xTaskRemoveFromEventList>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adea:	f000 fe07 	bl	800b9fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dce9      	bgt.n	800add2 <prvUnlockQueue+0x60>
 800adfe:	e000      	b.n	800ae02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae0a:	f001 ff63 	bl	800ccd4 <vPortExitCritical>
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae1e:	f001 ff29 	bl	800cc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	e001      	b.n	800ae34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae34:	f001 ff4e 	bl	800ccd4 <vPortExitCritical>

	return xReturn;
 800ae38:	68fb      	ldr	r3, [r7, #12]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae4a:	f001 ff13 	bl	800cc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d102      	bne.n	800ae60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e001      	b.n	800ae64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae64:	f001 ff36 	bl	800ccd4 <vPortExitCritical>

	return xReturn;
 800ae68:	68fb      	ldr	r3, [r7, #12]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e014      	b.n	800aeae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae84:	4a0f      	ldr	r2, [pc, #60]	; (800aec4 <vQueueAddToRegistry+0x50>)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10b      	bne.n	800aea8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae90:	490c      	ldr	r1, [pc, #48]	; (800aec4 <vQueueAddToRegistry+0x50>)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae9a:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <vQueueAddToRegistry+0x50>)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	4413      	add	r3, r2
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aea6:	e006      	b.n	800aeb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b07      	cmp	r3, #7
 800aeb2:	d9e7      	bls.n	800ae84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20004f00 	.word	0x20004f00

0800aec8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e016      	b.n	800af04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aed6:	4a10      	ldr	r2, [pc, #64]	; (800af18 <vQueueUnregisterQueue+0x50>)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4413      	add	r3, r2
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d10b      	bne.n	800aefe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aee6:	4a0c      	ldr	r2, [pc, #48]	; (800af18 <vQueueUnregisterQueue+0x50>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2100      	movs	r1, #0
 800aeec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aef0:	4a09      	ldr	r2, [pc, #36]	; (800af18 <vQueueUnregisterQueue+0x50>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4413      	add	r3, r2
 800aef8:	2200      	movs	r2, #0
 800aefa:	605a      	str	r2, [r3, #4]
				break;
 800aefc:	e006      	b.n	800af0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3301      	adds	r3, #1
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b07      	cmp	r3, #7
 800af08:	d9e5      	bls.n	800aed6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800af0a:	bf00      	nop
 800af0c:	bf00      	nop
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	20004f00 	.word	0x20004f00

0800af1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af2c:	f001 fea2 	bl	800cc74 <vPortEnterCritical>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af36:	b25b      	sxtb	r3, r3
 800af38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3c:	d103      	bne.n	800af46 <vQueueWaitForMessageRestricted+0x2a>
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af4c:	b25b      	sxtb	r3, r3
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d103      	bne.n	800af5c <vQueueWaitForMessageRestricted+0x40>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af5c:	f001 feba 	bl	800ccd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af64:	2b00      	cmp	r3, #0
 800af66:	d106      	bne.n	800af76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	3324      	adds	r3, #36	; 0x24
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	68b9      	ldr	r1, [r7, #8]
 800af70:	4618      	mov	r0, r3
 800af72:	f000 fc3b 	bl	800b7ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af76:	6978      	ldr	r0, [r7, #20]
 800af78:	f7ff fefb 	bl	800ad72 <prvUnlockQueue>
	}
 800af7c:	bf00      	nop
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08e      	sub	sp, #56	; 0x38
 800af88:	af04      	add	r7, sp, #16
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xTaskCreateStatic+0x2a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	623b      	str	r3, [r7, #32]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <xTaskCreateStatic+0x46>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	61fb      	str	r3, [r7, #28]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afca:	235c      	movs	r3, #92	; 0x5c
 800afcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b5c      	cmp	r3, #92	; 0x5c
 800afd2:	d00a      	beq.n	800afea <xTaskCreateStatic+0x66>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	61bb      	str	r3, [r7, #24]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01e      	beq.n	800b030 <xTaskCreateStatic+0xac>
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d01b      	beq.n	800b030 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	2202      	movs	r2, #2
 800b006:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b00a:	2300      	movs	r3, #0
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	f107 0314 	add.w	r3, r7, #20
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 f850 	bl	800b0c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b02a:	f000 f8dd 	bl	800b1e8 <prvAddNewTaskToReadyList>
 800b02e:	e001      	b.n	800b034 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b034:	697b      	ldr	r3, [r7, #20]
	}
 800b036:	4618      	mov	r0, r3
 800b038:	3728      	adds	r7, #40	; 0x28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b08c      	sub	sp, #48	; 0x30
 800b042:	af04      	add	r7, sp, #16
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	4613      	mov	r3, r2
 800b04c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b04e:	88fb      	ldrh	r3, [r7, #6]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4618      	mov	r0, r3
 800b054:	f001 ff30 	bl	800ceb8 <pvPortMalloc>
 800b058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00e      	beq.n	800b07e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b060:	205c      	movs	r0, #92	; 0x5c
 800b062:	f001 ff29 	bl	800ceb8 <pvPortMalloc>
 800b066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	631a      	str	r2, [r3, #48]	; 0x30
 800b074:	e005      	b.n	800b082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f001 ffea 	bl	800d050 <vPortFree>
 800b07c:	e001      	b.n	800b082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d017      	beq.n	800b0b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b090:	88fa      	ldrh	r2, [r7, #6]
 800b092:	2300      	movs	r3, #0
 800b094:	9303      	str	r3, [sp, #12]
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	9302      	str	r3, [sp, #8]
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 f80e 	bl	800b0c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0ac:	69f8      	ldr	r0, [r7, #28]
 800b0ae:	f000 f89b 	bl	800b1e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	e002      	b.n	800b0be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0be:	69bb      	ldr	r3, [r7, #24]
	}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3720      	adds	r7, #32
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	461a      	mov	r2, r3
 800b0e0:	21a5      	movs	r1, #165	; 0xa5
 800b0e2:	f002 fd6f 	bl	800dbc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	f023 0307 	bic.w	r3, r3, #7
 800b0fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	617b      	str	r3, [r7, #20]
}
 800b11c:	bf00      	nop
 800b11e:	e7fe      	b.n	800b11e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01f      	beq.n	800b166 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b126:	2300      	movs	r3, #0
 800b128:	61fb      	str	r3, [r7, #28]
 800b12a:	e012      	b.n	800b152 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	4413      	add	r3, r2
 800b132:	7819      	ldrb	r1, [r3, #0]
 800b134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	4413      	add	r3, r2
 800b13a:	3334      	adds	r3, #52	; 0x34
 800b13c:	460a      	mov	r2, r1
 800b13e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	4413      	add	r3, r2
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d006      	beq.n	800b15a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	3301      	adds	r3, #1
 800b150:	61fb      	str	r3, [r7, #28]
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	2b0f      	cmp	r3, #15
 800b156:	d9e9      	bls.n	800b12c <prvInitialiseNewTask+0x64>
 800b158:	e000      	b.n	800b15c <prvInitialiseNewTask+0x94>
			{
				break;
 800b15a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b164:	e003      	b.n	800b16e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	2b37      	cmp	r3, #55	; 0x37
 800b172:	d901      	bls.n	800b178 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b174:	2337      	movs	r3, #55	; 0x37
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b17c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	2200      	movs	r2, #0
 800b188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	3304      	adds	r3, #4
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fe56 	bl	8009e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	3318      	adds	r3, #24
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fe fe51 	bl	8009e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	68f9      	ldr	r1, [r7, #12]
 800b1c6:	69b8      	ldr	r0, [r7, #24]
 800b1c8:	f001 fc24 	bl	800ca14 <pxPortInitialiseStack>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1de:	bf00      	nop
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1f0:	f001 fd40 	bl	800cc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1f4:	4b2d      	ldr	r3, [pc, #180]	; (800b2ac <prvAddNewTaskToReadyList+0xc4>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	4a2c      	ldr	r2, [pc, #176]	; (800b2ac <prvAddNewTaskToReadyList+0xc4>)
 800b1fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1fe:	4b2c      	ldr	r3, [pc, #176]	; (800b2b0 <prvAddNewTaskToReadyList+0xc8>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b206:	4a2a      	ldr	r2, [pc, #168]	; (800b2b0 <prvAddNewTaskToReadyList+0xc8>)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b20c:	4b27      	ldr	r3, [pc, #156]	; (800b2ac <prvAddNewTaskToReadyList+0xc4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d110      	bne.n	800b236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b214:	f000 fc16 	bl	800ba44 <prvInitialiseTaskLists>
 800b218:	e00d      	b.n	800b236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b21a:	4b26      	ldr	r3, [pc, #152]	; (800b2b4 <prvAddNewTaskToReadyList+0xcc>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d109      	bne.n	800b236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b222:	4b23      	ldr	r3, [pc, #140]	; (800b2b0 <prvAddNewTaskToReadyList+0xc8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d802      	bhi.n	800b236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b230:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <prvAddNewTaskToReadyList+0xc8>)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b236:	4b20      	ldr	r3, [pc, #128]	; (800b2b8 <prvAddNewTaskToReadyList+0xd0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	4a1e      	ldr	r2, [pc, #120]	; (800b2b8 <prvAddNewTaskToReadyList+0xd0>)
 800b23e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b240:	4b1d      	ldr	r3, [pc, #116]	; (800b2b8 <prvAddNewTaskToReadyList+0xd0>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24c:	4b1b      	ldr	r3, [pc, #108]	; (800b2bc <prvAddNewTaskToReadyList+0xd4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d903      	bls.n	800b25c <prvAddNewTaskToReadyList+0x74>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	4a18      	ldr	r2, [pc, #96]	; (800b2bc <prvAddNewTaskToReadyList+0xd4>)
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <prvAddNewTaskToReadyList+0xd8>)
 800b26a:	441a      	add	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3304      	adds	r3, #4
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	f7fe fdf1 	bl	8009e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b278:	f001 fd2c 	bl	800ccd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b27c:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <prvAddNewTaskToReadyList+0xcc>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00e      	beq.n	800b2a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b284:	4b0a      	ldr	r3, [pc, #40]	; (800b2b0 <prvAddNewTaskToReadyList+0xc8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	429a      	cmp	r2, r3
 800b290:	d207      	bcs.n	800b2a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b292:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <prvAddNewTaskToReadyList+0xdc>)
 800b294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000e38 	.word	0x20000e38
 800b2b0:	20000964 	.word	0x20000964
 800b2b4:	20000e44 	.word	0x20000e44
 800b2b8:	20000e54 	.word	0x20000e54
 800b2bc:	20000e40 	.word	0x20000e40
 800b2c0:	20000968 	.word	0x20000968
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d017      	beq.n	800b30a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <vTaskDelay+0x60>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <vTaskDelay+0x30>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	60bb      	str	r3, [r7, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	e7fe      	b.n	800b2f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2f8:	f000 f880 	bl	800b3fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 ffe6 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b304:	f000 f888 	bl	800b418 <xTaskResumeAll>
 800b308:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d107      	bne.n	800b320 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b310:	4b06      	ldr	r3, [pc, #24]	; (800b32c <vTaskDelay+0x64>)
 800b312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20000e60 	.word	0x20000e60
 800b32c:	e000ed04 	.word	0xe000ed04

0800b330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08a      	sub	sp, #40	; 0x28
 800b334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b336:	2300      	movs	r3, #0
 800b338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b33e:	463a      	mov	r2, r7
 800b340:	1d39      	adds	r1, r7, #4
 800b342:	f107 0308 	add.w	r3, r7, #8
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fd26 	bl	8009d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	9202      	str	r2, [sp, #8]
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	2300      	movs	r3, #0
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	2300      	movs	r3, #0
 800b35c:	460a      	mov	r2, r1
 800b35e:	4921      	ldr	r1, [pc, #132]	; (800b3e4 <vTaskStartScheduler+0xb4>)
 800b360:	4821      	ldr	r0, [pc, #132]	; (800b3e8 <vTaskStartScheduler+0xb8>)
 800b362:	f7ff fe0f 	bl	800af84 <xTaskCreateStatic>
 800b366:	4603      	mov	r3, r0
 800b368:	4a20      	ldr	r2, [pc, #128]	; (800b3ec <vTaskStartScheduler+0xbc>)
 800b36a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b36c:	4b1f      	ldr	r3, [pc, #124]	; (800b3ec <vTaskStartScheduler+0xbc>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b374:	2301      	movs	r3, #1
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	e001      	b.n	800b37e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d102      	bne.n	800b38a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b384:	f000 fff8 	bl	800c378 <xTimerCreateTimerTask>
 800b388:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d116      	bne.n	800b3be <vTaskStartScheduler+0x8e>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	613b      	str	r3, [r7, #16]
}
 800b3a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3a4:	4b12      	ldr	r3, [pc, #72]	; (800b3f0 <vTaskStartScheduler+0xc0>)
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3ac:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <vTaskStartScheduler+0xc4>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3b2:	4b11      	ldr	r3, [pc, #68]	; (800b3f8 <vTaskStartScheduler+0xc8>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b3b8:	f001 fbba 	bl	800cb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b3bc:	e00e      	b.n	800b3dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c4:	d10a      	bne.n	800b3dc <vTaskStartScheduler+0xac>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	60fb      	str	r3, [r7, #12]
}
 800b3d8:	bf00      	nop
 800b3da:	e7fe      	b.n	800b3da <vTaskStartScheduler+0xaa>
}
 800b3dc:	bf00      	nop
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	0800e45c 	.word	0x0800e45c
 800b3e8:	0800ba15 	.word	0x0800ba15
 800b3ec:	20000e5c 	.word	0x20000e5c
 800b3f0:	20000e58 	.word	0x20000e58
 800b3f4:	20000e44 	.word	0x20000e44
 800b3f8:	20000e3c 	.word	0x20000e3c

0800b3fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <vTaskSuspendAll+0x18>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a03      	ldr	r2, [pc, #12]	; (800b414 <vTaskSuspendAll+0x18>)
 800b408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b40a:	bf00      	nop
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	20000e60 	.word	0x20000e60

0800b418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b426:	4b42      	ldr	r3, [pc, #264]	; (800b530 <xTaskResumeAll+0x118>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <xTaskResumeAll+0x2c>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	603b      	str	r3, [r7, #0]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b444:	f001 fc16 	bl	800cc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b448:	4b39      	ldr	r3, [pc, #228]	; (800b530 <xTaskResumeAll+0x118>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	4a38      	ldr	r2, [pc, #224]	; (800b530 <xTaskResumeAll+0x118>)
 800b450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b452:	4b37      	ldr	r3, [pc, #220]	; (800b530 <xTaskResumeAll+0x118>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d162      	bne.n	800b520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b45a:	4b36      	ldr	r3, [pc, #216]	; (800b534 <xTaskResumeAll+0x11c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d05e      	beq.n	800b520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b462:	e02f      	b.n	800b4c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b464:	4b34      	ldr	r3, [pc, #208]	; (800b538 <xTaskResumeAll+0x120>)
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3318      	adds	r3, #24
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe fd4f 	bl	8009f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3304      	adds	r3, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fd4a 	bl	8009f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b484:	4b2d      	ldr	r3, [pc, #180]	; (800b53c <xTaskResumeAll+0x124>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d903      	bls.n	800b494 <xTaskResumeAll+0x7c>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	4a2a      	ldr	r2, [pc, #168]	; (800b53c <xTaskResumeAll+0x124>)
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4a27      	ldr	r2, [pc, #156]	; (800b540 <xTaskResumeAll+0x128>)
 800b4a2:	441a      	add	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	f7fe fcd5 	bl	8009e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b4:	4b23      	ldr	r3, [pc, #140]	; (800b544 <xTaskResumeAll+0x12c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d302      	bcc.n	800b4c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b4be:	4b22      	ldr	r3, [pc, #136]	; (800b548 <xTaskResumeAll+0x130>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4c4:	4b1c      	ldr	r3, [pc, #112]	; (800b538 <xTaskResumeAll+0x120>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1cb      	bne.n	800b464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4d2:	f000 fb55 	bl	800bb80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4d6:	4b1d      	ldr	r3, [pc, #116]	; (800b54c <xTaskResumeAll+0x134>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d010      	beq.n	800b504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4e2:	f000 f847 	bl	800b574 <xTaskIncrementTick>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4ec:	4b16      	ldr	r3, [pc, #88]	; (800b548 <xTaskResumeAll+0x130>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1f1      	bne.n	800b4e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <xTaskResumeAll+0x134>)
 800b500:	2200      	movs	r2, #0
 800b502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b504:	4b10      	ldr	r3, [pc, #64]	; (800b548 <xTaskResumeAll+0x130>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b50c:	2301      	movs	r3, #1
 800b50e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b510:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <xTaskResumeAll+0x138>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b520:	f001 fbd8 	bl	800ccd4 <vPortExitCritical>

	return xAlreadyYielded;
 800b524:	68bb      	ldr	r3, [r7, #8]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20000e60 	.word	0x20000e60
 800b534:	20000e38 	.word	0x20000e38
 800b538:	20000df8 	.word	0x20000df8
 800b53c:	20000e40 	.word	0x20000e40
 800b540:	20000968 	.word	0x20000968
 800b544:	20000964 	.word	0x20000964
 800b548:	20000e4c 	.word	0x20000e4c
 800b54c:	20000e48 	.word	0x20000e48
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b55a:	4b05      	ldr	r3, [pc, #20]	; (800b570 <xTaskGetTickCount+0x1c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b560:	687b      	ldr	r3, [r7, #4]
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000e3c 	.word	0x20000e3c

0800b574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b57e:	4b4f      	ldr	r3, [pc, #316]	; (800b6bc <xTaskIncrementTick+0x148>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f040 808f 	bne.w	800b6a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b588:	4b4d      	ldr	r3, [pc, #308]	; (800b6c0 <xTaskIncrementTick+0x14c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b590:	4a4b      	ldr	r2, [pc, #300]	; (800b6c0 <xTaskIncrementTick+0x14c>)
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d120      	bne.n	800b5de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b59c:	4b49      	ldr	r3, [pc, #292]	; (800b6c4 <xTaskIncrementTick+0x150>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	603b      	str	r3, [r7, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	e7fe      	b.n	800b5ba <xTaskIncrementTick+0x46>
 800b5bc:	4b41      	ldr	r3, [pc, #260]	; (800b6c4 <xTaskIncrementTick+0x150>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	4b41      	ldr	r3, [pc, #260]	; (800b6c8 <xTaskIncrementTick+0x154>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a3f      	ldr	r2, [pc, #252]	; (800b6c4 <xTaskIncrementTick+0x150>)
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	4a3f      	ldr	r2, [pc, #252]	; (800b6c8 <xTaskIncrementTick+0x154>)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	4b3e      	ldr	r3, [pc, #248]	; (800b6cc <xTaskIncrementTick+0x158>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a3d      	ldr	r2, [pc, #244]	; (800b6cc <xTaskIncrementTick+0x158>)
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	f000 fad1 	bl	800bb80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5de:	4b3c      	ldr	r3, [pc, #240]	; (800b6d0 <xTaskIncrementTick+0x15c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d349      	bcc.n	800b67c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e8:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <xTaskIncrementTick+0x150>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d104      	bne.n	800b5fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f2:	4b37      	ldr	r3, [pc, #220]	; (800b6d0 <xTaskIncrementTick+0x15c>)
 800b5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f8:	601a      	str	r2, [r3, #0]
					break;
 800b5fa:	e03f      	b.n	800b67c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5fc:	4b31      	ldr	r3, [pc, #196]	; (800b6c4 <xTaskIncrementTick+0x150>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d203      	bcs.n	800b61c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b614:	4a2e      	ldr	r2, [pc, #184]	; (800b6d0 <xTaskIncrementTick+0x15c>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b61a:	e02f      	b.n	800b67c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	3304      	adds	r3, #4
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fc77 	bl	8009f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3318      	adds	r3, #24
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fc6e 	bl	8009f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <xTaskIncrementTick+0x160>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d903      	bls.n	800b64c <xTaskIncrementTick+0xd8>
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	4a22      	ldr	r2, [pc, #136]	; (800b6d4 <xTaskIncrementTick+0x160>)
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4a1f      	ldr	r2, [pc, #124]	; (800b6d8 <xTaskIncrementTick+0x164>)
 800b65a:	441a      	add	r2, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fe fbf9 	bl	8009e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <xTaskIncrementTick+0x168>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b672:	429a      	cmp	r2, r3
 800b674:	d3b8      	bcc.n	800b5e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b67a:	e7b5      	b.n	800b5e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b67c:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <xTaskIncrementTick+0x168>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b682:	4915      	ldr	r1, [pc, #84]	; (800b6d8 <xTaskIncrementTick+0x164>)
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d901      	bls.n	800b698 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b694:	2301      	movs	r3, #1
 800b696:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <xTaskIncrementTick+0x16c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d007      	beq.n	800b6b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	e004      	b.n	800b6b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b6a6:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <xTaskIncrementTick+0x170>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	4a0d      	ldr	r2, [pc, #52]	; (800b6e4 <xTaskIncrementTick+0x170>)
 800b6ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6b0:	697b      	ldr	r3, [r7, #20]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000e60 	.word	0x20000e60
 800b6c0:	20000e3c 	.word	0x20000e3c
 800b6c4:	20000df0 	.word	0x20000df0
 800b6c8:	20000df4 	.word	0x20000df4
 800b6cc:	20000e50 	.word	0x20000e50
 800b6d0:	20000e58 	.word	0x20000e58
 800b6d4:	20000e40 	.word	0x20000e40
 800b6d8:	20000968 	.word	0x20000968
 800b6dc:	20000964 	.word	0x20000964
 800b6e0:	20000e4c 	.word	0x20000e4c
 800b6e4:	20000e48 	.word	0x20000e48

0800b6e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6ee:	4b28      	ldr	r3, [pc, #160]	; (800b790 <vTaskSwitchContext+0xa8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6f6:	4b27      	ldr	r3, [pc, #156]	; (800b794 <vTaskSwitchContext+0xac>)
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6fc:	e041      	b.n	800b782 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b6fe:	4b25      	ldr	r3, [pc, #148]	; (800b794 <vTaskSwitchContext+0xac>)
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b704:	4b24      	ldr	r3, [pc, #144]	; (800b798 <vTaskSwitchContext+0xb0>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	60fb      	str	r3, [r7, #12]
 800b70a:	e010      	b.n	800b72e <vTaskSwitchContext+0x46>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <vTaskSwitchContext+0x40>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	607b      	str	r3, [r7, #4]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <vTaskSwitchContext+0x3e>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	491b      	ldr	r1, [pc, #108]	; (800b79c <vTaskSwitchContext+0xb4>)
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	4613      	mov	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0e4      	beq.n	800b70c <vTaskSwitchContext+0x24>
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <vTaskSwitchContext+0xb4>)
 800b74e:	4413      	add	r3, r2
 800b750:	60bb      	str	r3, [r7, #8]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	605a      	str	r2, [r3, #4]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3308      	adds	r3, #8
 800b764:	429a      	cmp	r2, r3
 800b766:	d104      	bne.n	800b772 <vTaskSwitchContext+0x8a>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	605a      	str	r2, [r3, #4]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <vTaskSwitchContext+0xb8>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	4a06      	ldr	r2, [pc, #24]	; (800b798 <vTaskSwitchContext+0xb0>)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6013      	str	r3, [r2, #0]
}
 800b782:	bf00      	nop
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20000e60 	.word	0x20000e60
 800b794:	20000e4c 	.word	0x20000e4c
 800b798:	20000e40 	.word	0x20000e40
 800b79c:	20000968 	.word	0x20000968
 800b7a0:	20000964 	.word	0x20000964

0800b7a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60fb      	str	r3, [r7, #12]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <vTaskPlaceOnEventList+0x44>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3318      	adds	r3, #24
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7fe fb65 	bl	8009ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7d8:	2101      	movs	r1, #1
 800b7da:	6838      	ldr	r0, [r7, #0]
 800b7dc:	f000 fd78 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
}
 800b7e0:	bf00      	nop
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20000964 	.word	0x20000964

0800b7ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	617b      	str	r3, [r7, #20]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <vTaskPlaceOnEventListRestricted+0x54>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3318      	adds	r3, #24
 800b81a:	4619      	mov	r1, r3
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7fe fb1c 	bl	8009e5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
 800b82c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	68b8      	ldr	r0, [r7, #8]
 800b832:	f000 fd4d 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
	}
 800b836:	bf00      	nop
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000964 	.word	0x20000964

0800b844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10a      	bne.n	800b870 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	60fb      	str	r3, [r7, #12]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	3318      	adds	r3, #24
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fb4d 	bl	8009f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b87a:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <xTaskRemoveFromEventList+0xb0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d11d      	bne.n	800b8be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	3304      	adds	r3, #4
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fb44 	bl	8009f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	4b19      	ldr	r3, [pc, #100]	; (800b8f8 <xTaskRemoveFromEventList+0xb4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d903      	bls.n	800b8a0 <xTaskRemoveFromEventList+0x5c>
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	4a16      	ldr	r2, [pc, #88]	; (800b8f8 <xTaskRemoveFromEventList+0xb4>)
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a13      	ldr	r2, [pc, #76]	; (800b8fc <xTaskRemoveFromEventList+0xb8>)
 800b8ae:	441a      	add	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe facf 	bl	8009e5a <vListInsertEnd>
 800b8bc:	e005      	b.n	800b8ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	3318      	adds	r3, #24
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	480e      	ldr	r0, [pc, #56]	; (800b900 <xTaskRemoveFromEventList+0xbc>)
 800b8c6:	f7fe fac8 	bl	8009e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <xTaskRemoveFromEventList+0xc0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d905      	bls.n	800b8e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <xTaskRemoveFromEventList+0xc4>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	e001      	b.n	800b8e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8e8:	697b      	ldr	r3, [r7, #20]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000e60 	.word	0x20000e60
 800b8f8:	20000e40 	.word	0x20000e40
 800b8fc:	20000968 	.word	0x20000968
 800b900:	20000df8 	.word	0x20000df8
 800b904:	20000964 	.word	0x20000964
 800b908:	20000e4c 	.word	0x20000e4c

0800b90c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b914:	4b06      	ldr	r3, [pc, #24]	; (800b930 <vTaskInternalSetTimeOutState+0x24>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b91c:	4b05      	ldr	r3, [pc, #20]	; (800b934 <vTaskInternalSetTimeOutState+0x28>)
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	605a      	str	r2, [r3, #4]
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20000e50 	.word	0x20000e50
 800b934:	20000e3c 	.word	0x20000e3c

0800b938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	613b      	str	r3, [r7, #16]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	60fb      	str	r3, [r7, #12]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b97a:	f001 f97b 	bl	800cc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b97e:	4b1d      	ldr	r3, [pc, #116]	; (800b9f4 <xTaskCheckForTimeOut+0xbc>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b996:	d102      	bne.n	800b99e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e023      	b.n	800b9e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4b15      	ldr	r3, [pc, #84]	; (800b9f8 <xTaskCheckForTimeOut+0xc0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d007      	beq.n	800b9ba <xTaskCheckForTimeOut+0x82>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	61fb      	str	r3, [r7, #28]
 800b9b8:	e015      	b.n	800b9e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d20b      	bcs.n	800b9dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	1ad2      	subs	r2, r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ff9b 	bl	800b90c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	e004      	b.n	800b9e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9e6:	f001 f975 	bl	800ccd4 <vPortExitCritical>

	return xReturn;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3720      	adds	r7, #32
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20000e3c 	.word	0x20000e3c
 800b9f8:	20000e50 	.word	0x20000e50

0800b9fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba00:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <vTaskMissedYield+0x14>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	601a      	str	r2, [r3, #0]
}
 800ba06:	bf00      	nop
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	20000e4c 	.word	0x20000e4c

0800ba14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba1c:	f000 f852 	bl	800bac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba20:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <prvIdleTask+0x28>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d9f9      	bls.n	800ba1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <prvIdleTask+0x2c>)
 800ba2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba38:	e7f0      	b.n	800ba1c <prvIdleTask+0x8>
 800ba3a:	bf00      	nop
 800ba3c:	20000968 	.word	0x20000968
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	607b      	str	r3, [r7, #4]
 800ba4e:	e00c      	b.n	800ba6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4a12      	ldr	r2, [pc, #72]	; (800baa4 <prvInitialiseTaskLists+0x60>)
 800ba5c:	4413      	add	r3, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe f9ce 	bl	8009e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3301      	adds	r3, #1
 800ba68:	607b      	str	r3, [r7, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b37      	cmp	r3, #55	; 0x37
 800ba6e:	d9ef      	bls.n	800ba50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba70:	480d      	ldr	r0, [pc, #52]	; (800baa8 <prvInitialiseTaskLists+0x64>)
 800ba72:	f7fe f9c5 	bl	8009e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba76:	480d      	ldr	r0, [pc, #52]	; (800baac <prvInitialiseTaskLists+0x68>)
 800ba78:	f7fe f9c2 	bl	8009e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba7c:	480c      	ldr	r0, [pc, #48]	; (800bab0 <prvInitialiseTaskLists+0x6c>)
 800ba7e:	f7fe f9bf 	bl	8009e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba82:	480c      	ldr	r0, [pc, #48]	; (800bab4 <prvInitialiseTaskLists+0x70>)
 800ba84:	f7fe f9bc 	bl	8009e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba88:	480b      	ldr	r0, [pc, #44]	; (800bab8 <prvInitialiseTaskLists+0x74>)
 800ba8a:	f7fe f9b9 	bl	8009e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	; (800babc <prvInitialiseTaskLists+0x78>)
 800ba90:	4a05      	ldr	r2, [pc, #20]	; (800baa8 <prvInitialiseTaskLists+0x64>)
 800ba92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba94:	4b0a      	ldr	r3, [pc, #40]	; (800bac0 <prvInitialiseTaskLists+0x7c>)
 800ba96:	4a05      	ldr	r2, [pc, #20]	; (800baac <prvInitialiseTaskLists+0x68>)
 800ba98:	601a      	str	r2, [r3, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20000968 	.word	0x20000968
 800baa8:	20000dc8 	.word	0x20000dc8
 800baac:	20000ddc 	.word	0x20000ddc
 800bab0:	20000df8 	.word	0x20000df8
 800bab4:	20000e0c 	.word	0x20000e0c
 800bab8:	20000e24 	.word	0x20000e24
 800babc:	20000df0 	.word	0x20000df0
 800bac0:	20000df4 	.word	0x20000df4

0800bac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baca:	e019      	b.n	800bb00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bacc:	f001 f8d2 	bl	800cc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad0:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <prvCheckTasksWaitingTermination+0x50>)
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	4618      	mov	r0, r3
 800bade:	f7fe fa19 	bl	8009f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bae2:	4b0d      	ldr	r3, [pc, #52]	; (800bb18 <prvCheckTasksWaitingTermination+0x54>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	4a0b      	ldr	r2, [pc, #44]	; (800bb18 <prvCheckTasksWaitingTermination+0x54>)
 800baea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <prvCheckTasksWaitingTermination+0x58>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4a0a      	ldr	r2, [pc, #40]	; (800bb1c <prvCheckTasksWaitingTermination+0x58>)
 800baf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baf6:	f001 f8ed 	bl	800ccd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f810 	bl	800bb20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb00:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <prvCheckTasksWaitingTermination+0x58>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e1      	bne.n	800bacc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000e0c 	.word	0x20000e0c
 800bb18:	20000e38 	.word	0x20000e38
 800bb1c:	20000e20 	.word	0x20000e20

0800bb20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d108      	bne.n	800bb44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 fa8a 	bl	800d050 <vPortFree>
				vPortFree( pxTCB );
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 fa87 	bl	800d050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb42:	e018      	b.n	800bb76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d103      	bne.n	800bb56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f001 fa7e 	bl	800d050 <vPortFree>
	}
 800bb54:	e00f      	b.n	800bb76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d00a      	beq.n	800bb76 <prvDeleteTCB+0x56>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <prvDeleteTCB+0x54>
	}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb86:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <prvResetNextTaskUnblockTime+0x38>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d104      	bne.n	800bb9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb90:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <prvResetNextTaskUnblockTime+0x3c>)
 800bb92:	f04f 32ff 	mov.w	r2, #4294967295
 800bb96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb98:	e008      	b.n	800bbac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <prvResetNextTaskUnblockTime+0x38>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	4a04      	ldr	r2, [pc, #16]	; (800bbbc <prvResetNextTaskUnblockTime+0x3c>)
 800bbaa:	6013      	str	r3, [r2, #0]
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000df0 	.word	0x20000df0
 800bbbc:	20000e58 	.word	0x20000e58

0800bbc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bbc6:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <xTaskGetCurrentTaskHandle+0x1c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bbcc:	687b      	ldr	r3, [r7, #4]
	}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20000964 	.word	0x20000964

0800bbe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <xTaskGetSchedulerState+0x34>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d102      	bne.n	800bbf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	607b      	str	r3, [r7, #4]
 800bbf2:	e008      	b.n	800bc06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbf4:	4b08      	ldr	r3, [pc, #32]	; (800bc18 <xTaskGetSchedulerState+0x38>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	607b      	str	r3, [r7, #4]
 800bc00:	e001      	b.n	800bc06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc02:	2300      	movs	r3, #0
 800bc04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc06:	687b      	ldr	r3, [r7, #4]
	}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr
 800bc14:	20000e44 	.word	0x20000e44
 800bc18:	20000e60 	.word	0x20000e60

0800bc1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d051      	beq.n	800bcd6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc36:	4b2a      	ldr	r3, [pc, #168]	; (800bce0 <xTaskPriorityInherit+0xc4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d241      	bcs.n	800bcc4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	db06      	blt.n	800bc56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc48:	4b25      	ldr	r3, [pc, #148]	; (800bce0 <xTaskPriorityInherit+0xc4>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	6959      	ldr	r1, [r3, #20]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4a1f      	ldr	r2, [pc, #124]	; (800bce4 <xTaskPriorityInherit+0xc8>)
 800bc68:	4413      	add	r3, r2
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d122      	bne.n	800bcb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe f94e 	bl	8009f14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc78:	4b19      	ldr	r3, [pc, #100]	; (800bce0 <xTaskPriorityInherit+0xc4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	4b18      	ldr	r3, [pc, #96]	; (800bce8 <xTaskPriorityInherit+0xcc>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d903      	bls.n	800bc96 <xTaskPriorityInherit+0x7a>
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	4a15      	ldr	r2, [pc, #84]	; (800bce8 <xTaskPriorityInherit+0xcc>)
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4a10      	ldr	r2, [pc, #64]	; (800bce4 <xTaskPriorityInherit+0xc8>)
 800bca4:	441a      	add	r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7fe f8d4 	bl	8009e5a <vListInsertEnd>
 800bcb2:	e004      	b.n	800bcbe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <xTaskPriorityInherit+0xc4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	e008      	b.n	800bcd6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcc8:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <xTaskPriorityInherit+0xc4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d201      	bcs.n	800bcd6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
	}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000964 	.word	0x20000964
 800bce4:	20000968 	.word	0x20000968
 800bce8:	20000e40 	.word	0x20000e40

0800bcec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d056      	beq.n	800bdb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd02:	4b2e      	ldr	r3, [pc, #184]	; (800bdbc <xTaskPriorityDisinherit+0xd0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d00a      	beq.n	800bd22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	60fb      	str	r3, [r7, #12]
}
 800bd1e:	bf00      	nop
 800bd20:	e7fe      	b.n	800bd20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	60bb      	str	r3, [r7, #8]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d02c      	beq.n	800bdb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d128      	bne.n	800bdb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe f8d6 	bl	8009f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <xTaskPriorityDisinherit+0xd4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d903      	bls.n	800bd90 <xTaskPriorityDisinherit+0xa4>
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a0c      	ldr	r2, [pc, #48]	; (800bdc0 <xTaskPriorityDisinherit+0xd4>)
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd94:	4613      	mov	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4a09      	ldr	r2, [pc, #36]	; (800bdc4 <xTaskPriorityDisinherit+0xd8>)
 800bd9e:	441a      	add	r2, r3
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f7fe f857 	bl	8009e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdac:	2301      	movs	r3, #1
 800bdae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdb0:	697b      	ldr	r3, [r7, #20]
	}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20000964 	.word	0x20000964
 800bdc0:	20000e40 	.word	0x20000e40
 800bdc4:	20000968 	.word	0x20000968

0800bdc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d06a      	beq.n	800beb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10a      	bne.n	800bdfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	60fb      	str	r3, [r7, #12]
}
 800bdfa:	bf00      	nop
 800bdfc:	e7fe      	b.n	800bdfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d902      	bls.n	800be0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	e002      	b.n	800be14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d04b      	beq.n	800beb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	429a      	cmp	r2, r3
 800be26:	d146      	bne.n	800beb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be28:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d10a      	bne.n	800be48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	db04      	blt.n	800be66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	6959      	ldr	r1, [r3, #20]
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	4613      	mov	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4a13      	ldr	r2, [pc, #76]	; (800bec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be76:	4413      	add	r3, r2
 800be78:	4299      	cmp	r1, r3
 800be7a:	d11c      	bne.n	800beb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	3304      	adds	r3, #4
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe f847 	bl	8009f14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d903      	bls.n	800be9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	4a0c      	ldr	r2, [pc, #48]	; (800bec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4a07      	ldr	r2, [pc, #28]	; (800bec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bea8:	441a      	add	r2, r3
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	3304      	adds	r3, #4
 800beae:	4619      	mov	r1, r3
 800beb0:	4610      	mov	r0, r2
 800beb2:	f7fd ffd2 	bl	8009e5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beb6:	bf00      	nop
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000964 	.word	0x20000964
 800bec4:	20000968 	.word	0x20000968
 800bec8:	20000e40 	.word	0x20000e40

0800becc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800becc:	b480      	push	{r7}
 800bece:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bed8:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <pvTaskIncrementMutexHeldCount+0x24>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bede:	3201      	adds	r2, #1
 800bee0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bee2:	4b03      	ldr	r3, [pc, #12]	; (800bef0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bee4:	681b      	ldr	r3, [r3, #0]
	}
 800bee6:	4618      	mov	r0, r3
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	20000964 	.word	0x20000964

0800bef4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bf02:	f000 feb7 	bl	800cc74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf06:	4b26      	ldr	r3, [pc, #152]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d01a      	beq.n	800bf4a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bf14:	4b22      	ldr	r3, [pc, #136]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	43d2      	mvns	r2, r2
 800bf1e:	400a      	ands	r2, r1
 800bf20:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bf22:	4b1f      	ldr	r3, [pc, #124]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00b      	beq.n	800bf4a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf32:	2101      	movs	r1, #1
 800bf34:	6838      	ldr	r0, [r7, #0]
 800bf36:	f000 f9cb 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bf3a:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <xTaskNotifyWait+0xb0>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bf4a:	f000 fec3 	bl	800ccd4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bf4e:	f000 fe91 	bl	800cc74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bf58:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf62:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d002      	beq.n	800bf76 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	e008      	b.n	800bf88 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bf76:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	43d2      	mvns	r2, r2
 800bf80:	400a      	ands	r2, r1
 800bf82:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf88:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <xTaskNotifyWait+0xac>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bf92:	f000 fe9f 	bl	800ccd4 <vPortExitCritical>

		return xReturn;
 800bf96:	697b      	ldr	r3, [r7, #20]
	}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20000964 	.word	0x20000964
 800bfa4:	e000ed04 	.word	0xe000ed04

0800bfa8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	; 0x28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <xTaskGenericNotify+0x30>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	61bb      	str	r3, [r7, #24]
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bfdc:	f000 fe4a 	bl	800cc74 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bff4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	2202      	movs	r2, #2
 800bffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bffe:	79fb      	ldrb	r3, [r7, #7]
 800c000:	2b04      	cmp	r3, #4
 800c002:	d828      	bhi.n	800c056 <xTaskGenericNotify+0xae>
 800c004:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <xTaskGenericNotify+0x64>)
 800c006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00a:	bf00      	nop
 800c00c:	0800c077 	.word	0x0800c077
 800c010:	0800c021 	.word	0x0800c021
 800c014:	0800c02f 	.word	0x0800c02f
 800c018:	0800c03b 	.word	0x0800c03b
 800c01c:	0800c043 	.word	0x0800c043
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	431a      	orrs	r2, r3
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c02c:	e026      	b.n	800c07c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c032:	1c5a      	adds	r2, r3, #1
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c038:	e020      	b.n	800c07c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c040:	e01c      	b.n	800c07c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c042:	7ffb      	ldrb	r3, [r7, #31]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d003      	beq.n	800c050 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c04e:	e015      	b.n	800c07c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c050:	2300      	movs	r3, #0
 800c052:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c054:	e012      	b.n	800c07c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05e:	d00c      	beq.n	800c07a <xTaskGenericNotify+0xd2>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	617b      	str	r3, [r7, #20]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xTaskGenericNotify+0xcc>
					break;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <xTaskGenericNotify+0xd4>

					break;
 800c07a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d13a      	bne.n	800c0f8 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	3304      	adds	r3, #4
 800c086:	4618      	mov	r0, r3
 800c088:	f7fd ff44 	bl	8009f14 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c090:	4b1d      	ldr	r3, [pc, #116]	; (800c108 <xTaskGenericNotify+0x160>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	429a      	cmp	r2, r3
 800c096:	d903      	bls.n	800c0a0 <xTaskGenericNotify+0xf8>
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	4a1a      	ldr	r2, [pc, #104]	; (800c108 <xTaskGenericNotify+0x160>)
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4a17      	ldr	r2, [pc, #92]	; (800c10c <xTaskGenericNotify+0x164>)
 800c0ae:	441a      	add	r2, r3
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fd fecf 	bl	8009e5a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00a      	beq.n	800c0da <xTaskGenericNotify+0x132>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	613b      	str	r3, [r7, #16]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <xTaskGenericNotify+0x168>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d907      	bls.n	800c0f8 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <xTaskGenericNotify+0x16c>)
 800c0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c0f8:	f000 fdec 	bl	800ccd4 <vPortExitCritical>

		return xReturn;
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3728      	adds	r7, #40	; 0x28
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000e40 	.word	0x20000e40
 800c10c:	20000968 	.word	0x20000968
 800c110:	20000964 	.word	0x20000964
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	4613      	mov	r3, r2
 800c126:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c128:	2301      	movs	r3, #1
 800c12a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c148:	f000 fe76 	bl	800ce38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c150:	f3ef 8211 	mrs	r2, BASEPRI
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	623a      	str	r2, [r7, #32]
 800c166:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c168:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c16a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	2202      	movs	r2, #2
 800c188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d828      	bhi.n	800c1e4 <xTaskGenericNotifyFromISR+0xcc>
 800c192:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <xTaskGenericNotifyFromISR+0x80>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c205 	.word	0x0800c205
 800c19c:	0800c1ad 	.word	0x0800c1ad
 800c1a0:	0800c1bb 	.word	0x0800c1bb
 800c1a4:	0800c1c7 	.word	0x0800c1c7
 800c1a8:	0800c1cf 	.word	0x0800c1cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1b8:	e027      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1c4:	e021      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1cc:	e01d      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c1ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d003      	beq.n	800c1de <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c1dc:	e015      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c1e2:	e012      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ec:	d00c      	beq.n	800c208 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	61bb      	str	r3, [r7, #24]
}
 800c200:	bf00      	nop
 800c202:	e7fe      	b.n	800c202 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c204:	bf00      	nop
 800c206:	e000      	b.n	800c20a <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c208:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c20a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d146      	bne.n	800c2a0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00a      	beq.n	800c230 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	617b      	str	r3, [r7, #20]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c230:	4b21      	ldr	r3, [pc, #132]	; (800c2b8 <xTaskGenericNotifyFromISR+0x1a0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d11d      	bne.n	800c274 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	3304      	adds	r3, #4
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fe69 	bl	8009f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c246:	4b1d      	ldr	r3, [pc, #116]	; (800c2bc <xTaskGenericNotifyFromISR+0x1a4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d903      	bls.n	800c256 <xTaskGenericNotifyFromISR+0x13e>
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	4a1a      	ldr	r2, [pc, #104]	; (800c2bc <xTaskGenericNotifyFromISR+0x1a4>)
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4a17      	ldr	r2, [pc, #92]	; (800c2c0 <xTaskGenericNotifyFromISR+0x1a8>)
 800c264:	441a      	add	r2, r3
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	3304      	adds	r3, #4
 800c26a:	4619      	mov	r1, r3
 800c26c:	4610      	mov	r0, r2
 800c26e:	f7fd fdf4 	bl	8009e5a <vListInsertEnd>
 800c272:	e005      	b.n	800c280 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	3318      	adds	r3, #24
 800c278:	4619      	mov	r1, r3
 800c27a:	4812      	ldr	r0, [pc, #72]	; (800c2c4 <xTaskGenericNotifyFromISR+0x1ac>)
 800c27c:	f7fd fded 	bl	8009e5a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <xTaskGenericNotifyFromISR+0x1b0>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d908      	bls.n	800c2a0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <xTaskGenericNotifyFromISR+0x1b4>)
 800c29c:	2201      	movs	r2, #1
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f383 8811 	msr	BASEPRI, r3
}
 800c2aa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3738      	adds	r7, #56	; 0x38
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20000e60 	.word	0x20000e60
 800c2bc:	20000e40 	.word	0x20000e40
 800c2c0:	20000968 	.word	0x20000968
 800c2c4:	20000df8 	.word	0x20000df8
 800c2c8:	20000964 	.word	0x20000964
 800c2cc:	20000e4c 	.word	0x20000e4c

0800c2d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2da:	4b21      	ldr	r3, [pc, #132]	; (800c360 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e0:	4b20      	ldr	r3, [pc, #128]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fd fe14 	bl	8009f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f2:	d10a      	bne.n	800c30a <prvAddCurrentTaskToDelayedList+0x3a>
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d007      	beq.n	800c30a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2fa:	4b1a      	ldr	r3, [pc, #104]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4819      	ldr	r0, [pc, #100]	; (800c368 <prvAddCurrentTaskToDelayedList+0x98>)
 800c304:	f7fd fda9 	bl	8009e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c308:	e026      	b.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4413      	add	r3, r2
 800c310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c312:	4b14      	ldr	r3, [pc, #80]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d209      	bcs.n	800c336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3304      	adds	r3, #4
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7fd fdb7 	bl	8009ea2 <vListInsert>
}
 800c334:	e010      	b.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c336:	4b0e      	ldr	r3, [pc, #56]	; (800c370 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b0a      	ldr	r3, [pc, #40]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3304      	adds	r3, #4
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7fd fdad 	bl	8009ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d202      	bcs.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c352:	4a08      	ldr	r2, [pc, #32]	; (800c374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	6013      	str	r3, [r2, #0]
}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20000e3c 	.word	0x20000e3c
 800c364:	20000964 	.word	0x20000964
 800c368:	20000e24 	.word	0x20000e24
 800c36c:	20000df4 	.word	0x20000df4
 800c370:	20000df0 	.word	0x20000df0
 800c374:	20000e58 	.word	0x20000e58

0800c378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08a      	sub	sp, #40	; 0x28
 800c37c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c37e:	2300      	movs	r3, #0
 800c380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c382:	f000 fb07 	bl	800c994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c386:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <xTimerCreateTimerTask+0x80>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d021      	beq.n	800c3d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c396:	1d3a      	adds	r2, r7, #4
 800c398:	f107 0108 	add.w	r1, r7, #8
 800c39c:	f107 030c 	add.w	r3, r7, #12
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fd fd13 	bl	8009dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	9202      	str	r2, [sp, #8]
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	4910      	ldr	r1, [pc, #64]	; (800c3fc <xTimerCreateTimerTask+0x84>)
 800c3ba:	4811      	ldr	r0, [pc, #68]	; (800c400 <xTimerCreateTimerTask+0x88>)
 800c3bc:	f7fe fde2 	bl	800af84 <xTaskCreateStatic>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4a10      	ldr	r2, [pc, #64]	; (800c404 <xTimerCreateTimerTask+0x8c>)
 800c3c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <xTimerCreateTimerTask+0x8c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	613b      	str	r3, [r7, #16]
}
 800c3ea:	bf00      	nop
 800c3ec:	e7fe      	b.n	800c3ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3ee:	697b      	ldr	r3, [r7, #20]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000e94 	.word	0x20000e94
 800c3fc:	0800e464 	.word	0x0800e464
 800c400:	0800c53d 	.word	0x0800c53d
 800c404:	20000e98 	.word	0x20000e98

0800c408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08a      	sub	sp, #40	; 0x28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c416:	2300      	movs	r3, #0
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	623b      	str	r3, [r7, #32]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c436:	4b1a      	ldr	r3, [pc, #104]	; (800c4a0 <xTimerGenericCommand+0x98>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d02a      	beq.n	800c494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2b05      	cmp	r3, #5
 800c44e:	dc18      	bgt.n	800c482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c450:	f7ff fbc6 	bl	800bbe0 <xTaskGetSchedulerState>
 800c454:	4603      	mov	r3, r0
 800c456:	2b02      	cmp	r3, #2
 800c458:	d109      	bne.n	800c46e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c45a:	4b11      	ldr	r3, [pc, #68]	; (800c4a0 <xTimerGenericCommand+0x98>)
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	f107 0110 	add.w	r1, r7, #16
 800c462:	2300      	movs	r3, #0
 800c464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c466:	f7fd ff27 	bl	800a2b8 <xQueueGenericSend>
 800c46a:	6278      	str	r0, [r7, #36]	; 0x24
 800c46c:	e012      	b.n	800c494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c46e:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <xTimerGenericCommand+0x98>)
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	f107 0110 	add.w	r1, r7, #16
 800c476:	2300      	movs	r3, #0
 800c478:	2200      	movs	r2, #0
 800c47a:	f7fd ff1d 	bl	800a2b8 <xQueueGenericSend>
 800c47e:	6278      	str	r0, [r7, #36]	; 0x24
 800c480:	e008      	b.n	800c494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <xTimerGenericCommand+0x98>)
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	f107 0110 	add.w	r1, r7, #16
 800c48a:	2300      	movs	r3, #0
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	f7fe f811 	bl	800a4b4 <xQueueGenericSendFromISR>
 800c492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c496:	4618      	mov	r0, r3
 800c498:	3728      	adds	r7, #40	; 0x28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000e94 	.word	0x20000e94

0800c4a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ae:	4b22      	ldr	r3, [pc, #136]	; (800c538 <prvProcessExpiredTimer+0x94>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fd fd29 	bl	8009f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4c8:	f003 0304 	and.w	r3, r3, #4
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d022      	beq.n	800c516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	699a      	ldr	r2, [r3, #24]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	18d1      	adds	r1, r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	6978      	ldr	r0, [r7, #20]
 800c4de:	f000 f8d1 	bl	800c684 <prvInsertTimerInActiveList>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01f      	beq.n	800c528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	6978      	ldr	r0, [r7, #20]
 800c4f4:	f7ff ff88 	bl	800c408 <xTimerGenericCommand>
 800c4f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d113      	bne.n	800c528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c51c:	f023 0301 	bic.w	r3, r3, #1
 800c520:	b2da      	uxtb	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	6978      	ldr	r0, [r7, #20]
 800c52e:	4798      	blx	r3
}
 800c530:	bf00      	nop
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20000e8c 	.word	0x20000e8c

0800c53c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c544:	f107 0308 	add.w	r3, r7, #8
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f857 	bl	800c5fc <prvGetNextExpireTime>
 800c54e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	4619      	mov	r1, r3
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 f803 	bl	800c560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c55a:	f000 f8d5 	bl	800c708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c55e:	e7f1      	b.n	800c544 <prvTimerTask+0x8>

0800c560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c56a:	f7fe ff47 	bl	800b3fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c56e:	f107 0308 	add.w	r3, r7, #8
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f866 	bl	800c644 <prvSampleTimeNow>
 800c578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d130      	bne.n	800c5e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10a      	bne.n	800c59c <prvProcessTimerOrBlockTask+0x3c>
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d806      	bhi.n	800c59c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c58e:	f7fe ff43 	bl	800b418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ff85 	bl	800c4a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c59a:	e024      	b.n	800c5e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <prvProcessTimerOrBlockTask+0x90>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <prvProcessTimerOrBlockTask+0x50>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e000      	b.n	800c5b2 <prvProcessTimerOrBlockTask+0x52>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5b4:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <prvProcessTimerOrBlockTask+0x94>)
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7fe fcab 	bl	800af1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5c6:	f7fe ff27 	bl	800b418 <xTaskResumeAll>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10a      	bne.n	800c5e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5d0:	4b09      	ldr	r3, [pc, #36]	; (800c5f8 <prvProcessTimerOrBlockTask+0x98>)
 800c5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	f3bf 8f6f 	isb	sy
}
 800c5e0:	e001      	b.n	800c5e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5e2:	f7fe ff19 	bl	800b418 <xTaskResumeAll>
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20000e90 	.word	0x20000e90
 800c5f4:	20000e94 	.word	0x20000e94
 800c5f8:	e000ed04 	.word	0xe000ed04

0800c5fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c604:	4b0e      	ldr	r3, [pc, #56]	; (800c640 <prvGetNextExpireTime+0x44>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <prvGetNextExpireTime+0x16>
 800c60e:	2201      	movs	r2, #1
 800c610:	e000      	b.n	800c614 <prvGetNextExpireTime+0x18>
 800c612:	2200      	movs	r2, #0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d105      	bne.n	800c62c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <prvGetNextExpireTime+0x44>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]
 800c62a:	e001      	b.n	800c630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c630:	68fb      	ldr	r3, [r7, #12]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	20000e8c 	.word	0x20000e8c

0800c644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c64c:	f7fe ff82 	bl	800b554 <xTaskGetTickCount>
 800c650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c652:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <prvSampleTimeNow+0x3c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d205      	bcs.n	800c668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c65c:	f000 f936 	bl	800c8cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	e002      	b.n	800c66e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c66e:	4a04      	ldr	r2, [pc, #16]	; (800c680 <prvSampleTimeNow+0x3c>)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c674:	68fb      	ldr	r3, [r7, #12]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000e9c 	.word	0x20000e9c

0800c684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d812      	bhi.n	800c6d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d302      	bcc.n	800c6be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	e01b      	b.n	800c6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6be:	4b10      	ldr	r3, [pc, #64]	; (800c700 <prvInsertTimerInActiveList+0x7c>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f7fd fbea 	bl	8009ea2 <vListInsert>
 800c6ce:	e012      	b.n	800c6f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d206      	bcs.n	800c6e6 <prvInsertTimerInActiveList+0x62>
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d302      	bcc.n	800c6e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	e007      	b.n	800c6f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6e6:	4b07      	ldr	r3, [pc, #28]	; (800c704 <prvInsertTimerInActiveList+0x80>)
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fd fbd6 	bl	8009ea2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6f6:	697b      	ldr	r3, [r7, #20]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20000e90 	.word	0x20000e90
 800c704:	20000e8c 	.word	0x20000e8c

0800c708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08e      	sub	sp, #56	; 0x38
 800c70c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c70e:	e0ca      	b.n	800c8a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	da18      	bge.n	800c748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c716:	1d3b      	adds	r3, r7, #4
 800c718:	3304      	adds	r3, #4
 800c71a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	61fb      	str	r3, [r7, #28]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c73e:	6850      	ldr	r0, [r2, #4]
 800c740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c742:	6892      	ldr	r2, [r2, #8]
 800c744:	4611      	mov	r1, r2
 800c746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f2c0 80aa 	blt.w	800c8a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	3304      	adds	r3, #4
 800c760:	4618      	mov	r0, r3
 800c762:	f7fd fbd7 	bl	8009f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c766:	463b      	mov	r3, r7
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff ff6b 	bl	800c644 <prvSampleTimeNow>
 800c76e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b09      	cmp	r3, #9
 800c774:	f200 8097 	bhi.w	800c8a6 <prvProcessReceivedCommands+0x19e>
 800c778:	a201      	add	r2, pc, #4	; (adr r2, 800c780 <prvProcessReceivedCommands+0x78>)
 800c77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77e:	bf00      	nop
 800c780:	0800c7a9 	.word	0x0800c7a9
 800c784:	0800c7a9 	.word	0x0800c7a9
 800c788:	0800c7a9 	.word	0x0800c7a9
 800c78c:	0800c81d 	.word	0x0800c81d
 800c790:	0800c831 	.word	0x0800c831
 800c794:	0800c87b 	.word	0x0800c87b
 800c798:	0800c7a9 	.word	0x0800c7a9
 800c79c:	0800c7a9 	.word	0x0800c7a9
 800c7a0:	0800c81d 	.word	0x0800c81d
 800c7a4:	0800c831 	.word	0x0800c831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7ae:	f043 0301 	orr.w	r3, r3, #1
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	18d1      	adds	r1, r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c8:	f7ff ff5c 	bl	800c684 <prvInsertTimerInActiveList>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d069      	beq.n	800c8a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d05e      	beq.n	800c8a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	699b      	ldr	r3, [r3, #24]
 800c7ee:	441a      	add	r2, r3
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7fa:	f7ff fe05 	bl	800c408 <xTimerGenericCommand>
 800c7fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d14f      	bne.n	800c8a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	61bb      	str	r3, [r7, #24]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c822:	f023 0301 	bic.w	r3, r3, #1
 800c826:	b2da      	uxtb	r2, r3
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c82e:	e03a      	b.n	800c8a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c836:	f043 0301 	orr.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10a      	bne.n	800c866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	617b      	str	r3, [r7, #20]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	699a      	ldr	r2, [r3, #24]
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	18d1      	adds	r1, r2, r3
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c874:	f7ff ff06 	bl	800c684 <prvInsertTimerInActiveList>
					break;
 800c878:	e015      	b.n	800c8a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d103      	bne.n	800c890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88a:	f000 fbe1 	bl	800d050 <vPortFree>
 800c88e:	e00a      	b.n	800c8a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c896:	f023 0301 	bic.w	r3, r3, #1
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8a2:	e000      	b.n	800c8a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8a6:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <prvProcessReceivedCommands+0x1c0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	1d39      	adds	r1, r7, #4
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fd ff28 	bl	800a704 <xQueueReceive>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f47f af2a 	bne.w	800c710 <prvProcessReceivedCommands+0x8>
	}
}
 800c8bc:	bf00      	nop
 800c8be:	bf00      	nop
 800c8c0:	3730      	adds	r7, #48	; 0x30
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000e94 	.word	0x20000e94

0800c8cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8d2:	e048      	b.n	800c966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8d4:	4b2d      	ldr	r3, [pc, #180]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8de:	4b2b      	ldr	r3, [pc, #172]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fd fb11 	bl	8009f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d02e      	beq.n	800c966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	4413      	add	r3, r2
 800c910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	429a      	cmp	r2, r3
 800c918:	d90e      	bls.n	800c938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c926:	4b19      	ldr	r3, [pc, #100]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3304      	adds	r3, #4
 800c92e:	4619      	mov	r1, r3
 800c930:	4610      	mov	r0, r2
 800c932:	f7fd fab6 	bl	8009ea2 <vListInsert>
 800c936:	e016      	b.n	800c966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c938:	2300      	movs	r3, #0
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	2100      	movs	r1, #0
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff fd60 	bl	800c408 <xTimerGenericCommand>
 800c948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	603b      	str	r3, [r7, #0]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1b1      	bne.n	800c8d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c970:	4b06      	ldr	r3, [pc, #24]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <prvSwitchTimerLists+0xc4>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a04      	ldr	r2, [pc, #16]	; (800c98c <prvSwitchTimerLists+0xc0>)
 800c97c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c97e:	4a04      	ldr	r2, [pc, #16]	; (800c990 <prvSwitchTimerLists+0xc4>)
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	6013      	str	r3, [r2, #0]
}
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20000e8c 	.word	0x20000e8c
 800c990:	20000e90 	.word	0x20000e90

0800c994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c99a:	f000 f96b 	bl	800cc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c99e:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d120      	bne.n	800c9e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9a6:	4814      	ldr	r0, [pc, #80]	; (800c9f8 <prvCheckForValidListAndQueue+0x64>)
 800c9a8:	f7fd fa2a 	bl	8009e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9ac:	4813      	ldr	r0, [pc, #76]	; (800c9fc <prvCheckForValidListAndQueue+0x68>)
 800c9ae:	f7fd fa27 	bl	8009e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9b2:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <prvCheckForValidListAndQueue+0x6c>)
 800c9b4:	4a10      	ldr	r2, [pc, #64]	; (800c9f8 <prvCheckForValidListAndQueue+0x64>)
 800c9b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9b8:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <prvCheckForValidListAndQueue+0x70>)
 800c9ba:	4a10      	ldr	r2, [pc, #64]	; (800c9fc <prvCheckForValidListAndQueue+0x68>)
 800c9bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <prvCheckForValidListAndQueue+0x74>)
 800c9c4:	4a11      	ldr	r2, [pc, #68]	; (800ca0c <prvCheckForValidListAndQueue+0x78>)
 800c9c6:	2110      	movs	r1, #16
 800c9c8:	200a      	movs	r0, #10
 800c9ca:	f7fd fb35 	bl	800a038 <xQueueGenericCreateStatic>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4a08      	ldr	r2, [pc, #32]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	490b      	ldr	r1, [pc, #44]	; (800ca10 <prvCheckForValidListAndQueue+0x7c>)
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fe fa46 	bl	800ae74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9e8:	f000 f974 	bl	800ccd4 <vPortExitCritical>
}
 800c9ec:	bf00      	nop
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000e94 	.word	0x20000e94
 800c9f8:	20000e64 	.word	0x20000e64
 800c9fc:	20000e78 	.word	0x20000e78
 800ca00:	20000e8c 	.word	0x20000e8c
 800ca04:	20000e90 	.word	0x20000e90
 800ca08:	20000f40 	.word	0x20000f40
 800ca0c:	20000ea0 	.word	0x20000ea0
 800ca10:	0800e46c 	.word	0x0800e46c

0800ca14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3b04      	subs	r3, #4
 800ca24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3b04      	subs	r3, #4
 800ca32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	f023 0201 	bic.w	r2, r3, #1
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3b04      	subs	r3, #4
 800ca42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca44:	4a0c      	ldr	r2, [pc, #48]	; (800ca78 <pxPortInitialiseStack+0x64>)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3b14      	subs	r3, #20
 800ca4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3b04      	subs	r3, #4
 800ca5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f06f 0202 	mvn.w	r2, #2
 800ca62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3b20      	subs	r3, #32
 800ca68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	0800ca7d 	.word	0x0800ca7d

0800ca7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca86:	4b12      	ldr	r3, [pc, #72]	; (800cad0 <prvTaskExitError+0x54>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8e:	d00a      	beq.n	800caa6 <prvTaskExitError+0x2a>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	60fb      	str	r3, [r7, #12]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <prvTaskExitError+0x28>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caba:	bf00      	nop
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0fc      	beq.n	800cabc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cac2:	bf00      	nop
 800cac4:	bf00      	nop
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	200000f8 	.word	0x200000f8
	...

0800cae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cae0:	4b07      	ldr	r3, [pc, #28]	; (800cb00 <pxCurrentTCBConst2>)
 800cae2:	6819      	ldr	r1, [r3, #0]
 800cae4:	6808      	ldr	r0, [r1, #0]
 800cae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caea:	f380 8809 	msr	PSP, r0
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8811 	msr	BASEPRI, r0
 800cafa:	4770      	bx	lr
 800cafc:	f3af 8000 	nop.w

0800cb00 <pxCurrentTCBConst2>:
 800cb00:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop

0800cb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb08:	4808      	ldr	r0, [pc, #32]	; (800cb2c <prvPortStartFirstTask+0x24>)
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	6800      	ldr	r0, [r0, #0]
 800cb0e:	f380 8808 	msr	MSP, r0
 800cb12:	f04f 0000 	mov.w	r0, #0
 800cb16:	f380 8814 	msr	CONTROL, r0
 800cb1a:	b662      	cpsie	i
 800cb1c:	b661      	cpsie	f
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	df00      	svc	0
 800cb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb2a:	bf00      	nop
 800cb2c:	e000ed08 	.word	0xe000ed08

0800cb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb36:	4b46      	ldr	r3, [pc, #280]	; (800cc50 <xPortStartScheduler+0x120>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a46      	ldr	r2, [pc, #280]	; (800cc54 <xPortStartScheduler+0x124>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d10a      	bne.n	800cb56 <xPortStartScheduler+0x26>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	613b      	str	r3, [r7, #16]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb56:	4b3e      	ldr	r3, [pc, #248]	; (800cc50 <xPortStartScheduler+0x120>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a3f      	ldr	r2, [pc, #252]	; (800cc58 <xPortStartScheduler+0x128>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d10a      	bne.n	800cb76 <xPortStartScheduler+0x46>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	60fb      	str	r3, [r7, #12]
}
 800cb72:	bf00      	nop
 800cb74:	e7fe      	b.n	800cb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb76:	4b39      	ldr	r3, [pc, #228]	; (800cc5c <xPortStartScheduler+0x12c>)
 800cb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	22ff      	movs	r2, #255	; 0xff
 800cb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <xPortStartScheduler+0x130>)
 800cb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb9e:	4b31      	ldr	r3, [pc, #196]	; (800cc64 <xPortStartScheduler+0x134>)
 800cba0:	2207      	movs	r2, #7
 800cba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cba4:	e009      	b.n	800cbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cba6:	4b2f      	ldr	r3, [pc, #188]	; (800cc64 <xPortStartScheduler+0x134>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	4a2d      	ldr	r2, [pc, #180]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbb0:	78fb      	ldrb	r3, [r7, #3]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbc2:	2b80      	cmp	r3, #128	; 0x80
 800cbc4:	d0ef      	beq.n	800cba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbc6:	4b27      	ldr	r3, [pc, #156]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1c3 0307 	rsb	r3, r3, #7
 800cbce:	2b04      	cmp	r3, #4
 800cbd0:	d00a      	beq.n	800cbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	60bb      	str	r3, [r7, #8]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbe8:	4b1e      	ldr	r3, [pc, #120]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbf2:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbfa:	4a1a      	ldr	r2, [pc, #104]	; (800cc64 <xPortStartScheduler+0x134>)
 800cbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc06:	4b18      	ldr	r3, [pc, #96]	; (800cc68 <xPortStartScheduler+0x138>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a17      	ldr	r2, [pc, #92]	; (800cc68 <xPortStartScheduler+0x138>)
 800cc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc12:	4b15      	ldr	r3, [pc, #84]	; (800cc68 <xPortStartScheduler+0x138>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a14      	ldr	r2, [pc, #80]	; (800cc68 <xPortStartScheduler+0x138>)
 800cc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc1e:	f000 f8dd 	bl	800cddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc22:	4b12      	ldr	r3, [pc, #72]	; (800cc6c <xPortStartScheduler+0x13c>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc28:	f000 f8fc 	bl	800ce24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc2c:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <xPortStartScheduler+0x140>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a0f      	ldr	r2, [pc, #60]	; (800cc70 <xPortStartScheduler+0x140>)
 800cc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc38:	f7ff ff66 	bl	800cb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc3c:	f7fe fd54 	bl	800b6e8 <vTaskSwitchContext>
	prvTaskExitError();
 800cc40:	f7ff ff1c 	bl	800ca7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	e000ed00 	.word	0xe000ed00
 800cc54:	410fc271 	.word	0x410fc271
 800cc58:	410fc270 	.word	0x410fc270
 800cc5c:	e000e400 	.word	0xe000e400
 800cc60:	20000f90 	.word	0x20000f90
 800cc64:	20000f94 	.word	0x20000f94
 800cc68:	e000ed20 	.word	0xe000ed20
 800cc6c:	200000f8 	.word	0x200000f8
 800cc70:	e000ef34 	.word	0xe000ef34

0800cc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	607b      	str	r3, [r7, #4]
}
 800cc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc8e:	4b0f      	ldr	r3, [pc, #60]	; (800cccc <vPortEnterCritical+0x58>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3301      	adds	r3, #1
 800cc94:	4a0d      	ldr	r2, [pc, #52]	; (800cccc <vPortEnterCritical+0x58>)
 800cc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc98:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <vPortEnterCritical+0x58>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d10f      	bne.n	800ccc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cca0:	4b0b      	ldr	r3, [pc, #44]	; (800ccd0 <vPortEnterCritical+0x5c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	603b      	str	r3, [r7, #0]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <vPortEnterCritical+0x4a>
	}
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	200000f8 	.word	0x200000f8
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccda:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <vPortExitCritical+0x50>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <vPortExitCritical+0x24>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	607b      	str	r3, [r7, #4]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <vPortExitCritical+0x50>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	4a09      	ldr	r2, [pc, #36]	; (800cd24 <vPortExitCritical+0x50>)
 800cd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <vPortExitCritical+0x50>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d105      	bne.n	800cd16 <vPortExitCritical+0x42>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	f383 8811 	msr	BASEPRI, r3
}
 800cd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	200000f8 	.word	0x200000f8
	...

0800cd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd30:	f3ef 8009 	mrs	r0, PSP
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	4b15      	ldr	r3, [pc, #84]	; (800cd90 <pxCurrentTCBConst>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	f01e 0f10 	tst.w	lr, #16
 800cd40:	bf08      	it	eq
 800cd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4a:	6010      	str	r0, [r2, #0]
 800cd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd54:	f380 8811 	msr	BASEPRI, r0
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f7fe fcc2 	bl	800b6e8 <vTaskSwitchContext>
 800cd64:	f04f 0000 	mov.w	r0, #0
 800cd68:	f380 8811 	msr	BASEPRI, r0
 800cd6c:	bc09      	pop	{r0, r3}
 800cd6e:	6819      	ldr	r1, [r3, #0]
 800cd70:	6808      	ldr	r0, [r1, #0]
 800cd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd76:	f01e 0f10 	tst.w	lr, #16
 800cd7a:	bf08      	it	eq
 800cd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd80:	f380 8809 	msr	PSP, r0
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	f3af 8000 	nop.w

0800cd90 <pxCurrentTCBConst>:
 800cd90:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop

0800cd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdb2:	f7fe fbdf 	bl	800b574 <xTaskIncrementTick>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdbc:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <xPortSysTickHandler+0x40>)
 800cdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	f383 8811 	msr	BASEPRI, r3
}
 800cdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdd0:	bf00      	nop
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	e000ed04 	.word	0xe000ed04

0800cddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cddc:	b480      	push	{r7}
 800cdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <vPortSetupTimerInterrupt+0x34>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cde6:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <vPortSetupTimerInterrupt+0x38>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdec:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <vPortSetupTimerInterrupt+0x3c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a0a      	ldr	r2, [pc, #40]	; (800ce1c <vPortSetupTimerInterrupt+0x40>)
 800cdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf6:	099b      	lsrs	r3, r3, #6
 800cdf8:	4a09      	ldr	r2, [pc, #36]	; (800ce20 <vPortSetupTimerInterrupt+0x44>)
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdfe:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <vPortSetupTimerInterrupt+0x34>)
 800ce00:	2207      	movs	r2, #7
 800ce02:	601a      	str	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	e000e010 	.word	0xe000e010
 800ce14:	e000e018 	.word	0xe000e018
 800ce18:	20000018 	.word	0x20000018
 800ce1c:	10624dd3 	.word	0x10624dd3
 800ce20:	e000e014 	.word	0xe000e014

0800ce24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce34 <vPortEnableVFP+0x10>
 800ce28:	6801      	ldr	r1, [r0, #0]
 800ce2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce2e:	6001      	str	r1, [r0, #0]
 800ce30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce32:	bf00      	nop
 800ce34:	e000ed88 	.word	0xe000ed88

0800ce38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce3e:	f3ef 8305 	mrs	r3, IPSR
 800ce42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b0f      	cmp	r3, #15
 800ce48:	d914      	bls.n	800ce74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce4a:	4a17      	ldr	r2, [pc, #92]	; (800cea8 <vPortValidateInterruptPriority+0x70>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce54:	4b15      	ldr	r3, [pc, #84]	; (800ceac <vPortValidateInterruptPriority+0x74>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	7afa      	ldrb	r2, [r7, #11]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d20a      	bcs.n	800ce74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	607b      	str	r3, [r7, #4]
}
 800ce70:	bf00      	nop
 800ce72:	e7fe      	b.n	800ce72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce74:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <vPortValidateInterruptPriority+0x78>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce7c:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <vPortValidateInterruptPriority+0x7c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d90a      	bls.n	800ce9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	603b      	str	r3, [r7, #0]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <vPortValidateInterruptPriority+0x60>
	}
 800ce9a:	bf00      	nop
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	e000e3f0 	.word	0xe000e3f0
 800ceac:	20000f90 	.word	0x20000f90
 800ceb0:	e000ed0c 	.word	0xe000ed0c
 800ceb4:	20000f94 	.word	0x20000f94

0800ceb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cec4:	f7fe fa9a 	bl	800b3fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cec8:	4b5b      	ldr	r3, [pc, #364]	; (800d038 <pvPortMalloc+0x180>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ced0:	f000 f920 	bl	800d114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ced4:	4b59      	ldr	r3, [pc, #356]	; (800d03c <pvPortMalloc+0x184>)
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4013      	ands	r3, r2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f040 8093 	bne.w	800d008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01d      	beq.n	800cf24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cee8:	2208      	movs	r2, #8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4413      	add	r3, r2
 800ceee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d014      	beq.n	800cf24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f023 0307 	bic.w	r3, r3, #7
 800cf00:	3308      	adds	r3, #8
 800cf02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f003 0307 	and.w	r3, r3, #7
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <pvPortMalloc+0x6c>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	617b      	str	r3, [r7, #20]
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d06e      	beq.n	800d008 <pvPortMalloc+0x150>
 800cf2a:	4b45      	ldr	r3, [pc, #276]	; (800d040 <pvPortMalloc+0x188>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d869      	bhi.n	800d008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf34:	4b43      	ldr	r3, [pc, #268]	; (800d044 <pvPortMalloc+0x18c>)
 800cf36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf38:	4b42      	ldr	r3, [pc, #264]	; (800d044 <pvPortMalloc+0x18c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf3e:	e004      	b.n	800cf4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d903      	bls.n	800cf5c <pvPortMalloc+0xa4>
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1f1      	bne.n	800cf40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf5c:	4b36      	ldr	r3, [pc, #216]	; (800d038 <pvPortMalloc+0x180>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d050      	beq.n	800d008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2208      	movs	r2, #8
 800cf6c:	4413      	add	r3, r2
 800cf6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	1ad2      	subs	r2, r2, r3
 800cf80:	2308      	movs	r3, #8
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d91f      	bls.n	800cfc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	f003 0307 	and.w	r3, r3, #7
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00a      	beq.n	800cfb0 <pvPortMalloc+0xf8>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	613b      	str	r3, [r7, #16]
}
 800cfac:	bf00      	nop
 800cfae:	e7fe      	b.n	800cfae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	1ad2      	subs	r2, r2, r3
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfc2:	69b8      	ldr	r0, [r7, #24]
 800cfc4:	f000 f908 	bl	800d1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfc8:	4b1d      	ldr	r3, [pc, #116]	; (800d040 <pvPortMalloc+0x188>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	4a1b      	ldr	r2, [pc, #108]	; (800d040 <pvPortMalloc+0x188>)
 800cfd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfd6:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <pvPortMalloc+0x188>)
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	4b1b      	ldr	r3, [pc, #108]	; (800d048 <pvPortMalloc+0x190>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d203      	bcs.n	800cfea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfe2:	4b17      	ldr	r3, [pc, #92]	; (800d040 <pvPortMalloc+0x188>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a18      	ldr	r2, [pc, #96]	; (800d048 <pvPortMalloc+0x190>)
 800cfe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	4b13      	ldr	r3, [pc, #76]	; (800d03c <pvPortMalloc+0x184>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <pvPortMalloc+0x194>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	4a11      	ldr	r2, [pc, #68]	; (800d04c <pvPortMalloc+0x194>)
 800d006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d008:	f7fe fa06 	bl	800b418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	f003 0307 	and.w	r3, r3, #7
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00a      	beq.n	800d02c <pvPortMalloc+0x174>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	60fb      	str	r3, [r7, #12]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <pvPortMalloc+0x172>
	return pvReturn;
 800d02c:	69fb      	ldr	r3, [r7, #28]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3728      	adds	r7, #40	; 0x28
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20004ba0 	.word	0x20004ba0
 800d03c:	20004bb4 	.word	0x20004bb4
 800d040:	20004ba4 	.word	0x20004ba4
 800d044:	20004b98 	.word	0x20004b98
 800d048:	20004ba8 	.word	0x20004ba8
 800d04c:	20004bac 	.word	0x20004bac

0800d050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d04d      	beq.n	800d0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d062:	2308      	movs	r3, #8
 800d064:	425b      	negs	r3, r3
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	4413      	add	r3, r2
 800d06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	4b24      	ldr	r3, [pc, #144]	; (800d108 <vPortFree+0xb8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4013      	ands	r3, r2
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10a      	bne.n	800d094 <vPortFree+0x44>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	60fb      	str	r3, [r7, #12]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <vPortFree+0x62>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60bb      	str	r3, [r7, #8]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	4b14      	ldr	r3, [pc, #80]	; (800d108 <vPortFree+0xb8>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01e      	beq.n	800d0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d11a      	bne.n	800d0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	4b0e      	ldr	r3, [pc, #56]	; (800d108 <vPortFree+0xb8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	43db      	mvns	r3, r3
 800d0d2:	401a      	ands	r2, r3
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0d8:	f7fe f990 	bl	800b3fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	685a      	ldr	r2, [r3, #4]
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <vPortFree+0xbc>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4a09      	ldr	r2, [pc, #36]	; (800d10c <vPortFree+0xbc>)
 800d0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0ea:	6938      	ldr	r0, [r7, #16]
 800d0ec:	f000 f874 	bl	800d1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <vPortFree+0xc0>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	4a06      	ldr	r2, [pc, #24]	; (800d110 <vPortFree+0xc0>)
 800d0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d0fa:	f7fe f98d 	bl	800b418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0fe:	bf00      	nop
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20004bb4 	.word	0x20004bb4
 800d10c:	20004ba4 	.word	0x20004ba4
 800d110:	20004bb0 	.word	0x20004bb0

0800d114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d120:	4b27      	ldr	r3, [pc, #156]	; (800d1c0 <prvHeapInit+0xac>)
 800d122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00c      	beq.n	800d148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3307      	adds	r3, #7
 800d132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f023 0307 	bic.w	r3, r3, #7
 800d13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	4a1f      	ldr	r2, [pc, #124]	; (800d1c0 <prvHeapInit+0xac>)
 800d144:	4413      	add	r3, r2
 800d146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d14c:	4a1d      	ldr	r2, [pc, #116]	; (800d1c4 <prvHeapInit+0xb0>)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d152:	4b1c      	ldr	r3, [pc, #112]	; (800d1c4 <prvHeapInit+0xb0>)
 800d154:	2200      	movs	r2, #0
 800d156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	4413      	add	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d160:	2208      	movs	r2, #8
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1a9b      	subs	r3, r3, r2
 800d166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f023 0307 	bic.w	r3, r3, #7
 800d16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4a15      	ldr	r2, [pc, #84]	; (800d1c8 <prvHeapInit+0xb4>)
 800d174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d176:	4b14      	ldr	r3, [pc, #80]	; (800d1c8 <prvHeapInit+0xb4>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2200      	movs	r2, #0
 800d17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d17e:	4b12      	ldr	r3, [pc, #72]	; (800d1c8 <prvHeapInit+0xb4>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d194:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <prvHeapInit+0xb4>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	4a0a      	ldr	r2, [pc, #40]	; (800d1cc <prvHeapInit+0xb8>)
 800d1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	4a09      	ldr	r2, [pc, #36]	; (800d1d0 <prvHeapInit+0xbc>)
 800d1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1ac:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <prvHeapInit+0xc0>)
 800d1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1b2:	601a      	str	r2, [r3, #0]
}
 800d1b4:	bf00      	nop
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	20000f98 	.word	0x20000f98
 800d1c4:	20004b98 	.word	0x20004b98
 800d1c8:	20004ba0 	.word	0x20004ba0
 800d1cc:	20004ba8 	.word	0x20004ba8
 800d1d0:	20004ba4 	.word	0x20004ba4
 800d1d4:	20004bb4 	.word	0x20004bb4

0800d1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1e0:	4b28      	ldr	r3, [pc, #160]	; (800d284 <prvInsertBlockIntoFreeList+0xac>)
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	e002      	b.n	800d1ec <prvInsertBlockIntoFreeList+0x14>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60fb      	str	r3, [r7, #12]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d8f7      	bhi.n	800d1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	4413      	add	r3, r2
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	429a      	cmp	r2, r3
 800d206:	d108      	bne.n	800d21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	441a      	add	r2, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	68ba      	ldr	r2, [r7, #8]
 800d224:	441a      	add	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d118      	bne.n	800d260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b15      	ldr	r3, [pc, #84]	; (800d288 <prvInsertBlockIntoFreeList+0xb0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d00d      	beq.n	800d256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	441a      	add	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	e008      	b.n	800d268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d256:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <prvInsertBlockIntoFreeList+0xb0>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	601a      	str	r2, [r3, #0]
 800d25e:	e003      	b.n	800d268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d002      	beq.n	800d276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d276:	bf00      	nop
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	20004b98 	.word	0x20004b98
 800d288:	20004ba0 	.word	0x20004ba0

0800d28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d290:	2200      	movs	r2, #0
 800d292:	4912      	ldr	r1, [pc, #72]	; (800d2dc <MX_USB_DEVICE_Init+0x50>)
 800d294:	4812      	ldr	r0, [pc, #72]	; (800d2e0 <MX_USB_DEVICE_Init+0x54>)
 800d296:	f7fb f88e 	bl	80083b6 <USBD_Init>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2a0:	f7f3 fee2 	bl	8001068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800d2a4:	490f      	ldr	r1, [pc, #60]	; (800d2e4 <MX_USB_DEVICE_Init+0x58>)
 800d2a6:	480e      	ldr	r0, [pc, #56]	; (800d2e0 <MX_USB_DEVICE_Init+0x54>)
 800d2a8:	f7fb f8b5 	bl	8008416 <USBD_RegisterClass>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d2b2:	f7f3 fed9 	bl	8001068 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800d2b6:	490c      	ldr	r1, [pc, #48]	; (800d2e8 <MX_USB_DEVICE_Init+0x5c>)
 800d2b8:	4809      	ldr	r0, [pc, #36]	; (800d2e0 <MX_USB_DEVICE_Init+0x54>)
 800d2ba:	f7fb f867 	bl	800838c <USBD_CUSTOM_HID_RegisterInterface>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2c4:	f7f3 fed0 	bl	8001068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d2c8:	4805      	ldr	r0, [pc, #20]	; (800d2e0 <MX_USB_DEVICE_Init+0x54>)
 800d2ca:	f7fb f8cb 	bl	8008464 <USBD_Start>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d2d4:	f7f3 fec8 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d2d8:	bf00      	nop
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	200001c8 	.word	0x200001c8
 800d2e0:	20004f40 	.word	0x20004f40
 800d2e4:	20000024 	.word	0x20000024
 800d2e8:	200001b8 	.word	0x200001b8

0800d2ec <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d2f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d300:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d302:	4618      	mov	r0, r3
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	460a      	mov	r2, r1
 800d316:	71fb      	strb	r3, [r7, #7]
 800d318:	4613      	mov	r3, r2
 800d31a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800d31c:	4803      	ldr	r0, [pc, #12]	; (800d32c <CUSTOM_HID_OutEvent_FS+0x20>)
 800d31e:	f7fa ffe7 	bl	80082f0 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800d322:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	20004f40 	.word	0x20004f40

0800d330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	6039      	str	r1, [r7, #0]
 800d33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2212      	movs	r2, #18
 800d340:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d342:	4b03      	ldr	r3, [pc, #12]	; (800d350 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	200001e4 	.word	0x200001e4

0800d354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2204      	movs	r2, #4
 800d364:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d366:	4b03      	ldr	r3, [pc, #12]	; (800d374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	200001f8 	.word	0x200001f8

0800d378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	6039      	str	r1, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d105      	bne.n	800d396 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	4907      	ldr	r1, [pc, #28]	; (800d3ac <USBD_FS_ProductStrDescriptor+0x34>)
 800d38e:	4808      	ldr	r0, [pc, #32]	; (800d3b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d390:	f7fc f899 	bl	80094c6 <USBD_GetString>
 800d394:	e004      	b.n	800d3a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	4904      	ldr	r1, [pc, #16]	; (800d3ac <USBD_FS_ProductStrDescriptor+0x34>)
 800d39a:	4805      	ldr	r0, [pc, #20]	; (800d3b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d39c:	f7fc f893 	bl	80094c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3a0:	4b02      	ldr	r3, [pc, #8]	; (800d3ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20005210 	.word	0x20005210
 800d3b0:	0800e474 	.word	0x0800e474

0800d3b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	6039      	str	r1, [r7, #0]
 800d3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	4904      	ldr	r1, [pc, #16]	; (800d3d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d3c4:	4804      	ldr	r0, [pc, #16]	; (800d3d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d3c6:	f7fc f87e 	bl	80094c6 <USBD_GetString>
  return USBD_StrDesc;
 800d3ca:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20005210 	.word	0x20005210
 800d3d8:	0800e494 	.word	0x0800e494

0800d3dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	221a      	movs	r2, #26
 800d3ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3ee:	f000 f843 	bl	800d478 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d3f2:	4b02      	ldr	r3, [pc, #8]	; (800d3fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	200001fc 	.word	0x200001fc

0800d400 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	6039      	str	r1, [r7, #0]
 800d40a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d105      	bne.n	800d41e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	4907      	ldr	r1, [pc, #28]	; (800d434 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d416:	4808      	ldr	r0, [pc, #32]	; (800d438 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d418:	f7fc f855 	bl	80094c6 <USBD_GetString>
 800d41c:	e004      	b.n	800d428 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	4904      	ldr	r1, [pc, #16]	; (800d434 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d422:	4805      	ldr	r0, [pc, #20]	; (800d438 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d424:	f7fc f84f 	bl	80094c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d428:	4b02      	ldr	r3, [pc, #8]	; (800d434 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20005210 	.word	0x20005210
 800d438:	0800e4a8 	.word	0x0800e4a8

0800d43c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	6039      	str	r1, [r7, #0]
 800d446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d105      	bne.n	800d45a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	4907      	ldr	r1, [pc, #28]	; (800d470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d452:	4808      	ldr	r0, [pc, #32]	; (800d474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d454:	f7fc f837 	bl	80094c6 <USBD_GetString>
 800d458:	e004      	b.n	800d464 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	4904      	ldr	r1, [pc, #16]	; (800d470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d45e:	4805      	ldr	r0, [pc, #20]	; (800d474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d460:	f7fc f831 	bl	80094c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d464:	4b02      	ldr	r3, [pc, #8]	; (800d470 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	20005210 	.word	0x20005210
 800d474:	0800e4bc 	.word	0x0800e4bc

0800d478 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <Get_SerialNum+0x44>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d484:	4b0e      	ldr	r3, [pc, #56]	; (800d4c0 <Get_SerialNum+0x48>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d48a:	4b0e      	ldr	r3, [pc, #56]	; (800d4c4 <Get_SerialNum+0x4c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4413      	add	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d009      	beq.n	800d4b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d49e:	2208      	movs	r2, #8
 800d4a0:	4909      	ldr	r1, [pc, #36]	; (800d4c8 <Get_SerialNum+0x50>)
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 f814 	bl	800d4d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d4a8:	2204      	movs	r2, #4
 800d4aa:	4908      	ldr	r1, [pc, #32]	; (800d4cc <Get_SerialNum+0x54>)
 800d4ac:	68b8      	ldr	r0, [r7, #8]
 800d4ae:	f000 f80f 	bl	800d4d0 <IntToUnicode>
  }
}
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	1fff7a10 	.word	0x1fff7a10
 800d4c0:	1fff7a14 	.word	0x1fff7a14
 800d4c4:	1fff7a18 	.word	0x1fff7a18
 800d4c8:	200001fe 	.word	0x200001fe
 800d4cc:	2000020e 	.word	0x2000020e

0800d4d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b087      	sub	sp, #28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	75fb      	strb	r3, [r7, #23]
 800d4e6:	e027      	b.n	800d538 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	0f1b      	lsrs	r3, r3, #28
 800d4ec:	2b09      	cmp	r3, #9
 800d4ee:	d80b      	bhi.n	800d508 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	0f1b      	lsrs	r3, r3, #28
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	440b      	add	r3, r1
 800d500:	3230      	adds	r2, #48	; 0x30
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	e00a      	b.n	800d51e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	0f1b      	lsrs	r3, r3, #28
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	4619      	mov	r1, r3
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	440b      	add	r3, r1
 800d518:	3237      	adds	r2, #55	; 0x37
 800d51a:	b2d2      	uxtb	r2, r2
 800d51c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	3301      	adds	r3, #1
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	4413      	add	r3, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d532:	7dfb      	ldrb	r3, [r7, #23]
 800d534:	3301      	adds	r3, #1
 800d536:	75fb      	strb	r3, [r7, #23]
 800d538:	7dfa      	ldrb	r2, [r7, #23]
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d3d3      	bcc.n	800d4e8 <IntToUnicode+0x18>
  }
}
 800d540:	bf00      	nop
 800d542:	bf00      	nop
 800d544:	371c      	adds	r7, #28
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b08a      	sub	sp, #40	; 0x28
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d558:	f107 0314 	add.w	r3, r7, #20
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	605a      	str	r2, [r3, #4]
 800d562:	609a      	str	r2, [r3, #8]
 800d564:	60da      	str	r2, [r3, #12]
 800d566:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d570:	d13a      	bne.n	800d5e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d572:	2300      	movs	r3, #0
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	4b1e      	ldr	r3, [pc, #120]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57a:	4a1d      	ldr	r2, [pc, #116]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d57c:	f043 0301 	orr.w	r3, r3, #1
 800d580:	6313      	str	r3, [r2, #48]	; 0x30
 800d582:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	613b      	str	r3, [r7, #16]
 800d58c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d58e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d594:	2302      	movs	r3, #2
 800d596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d598:	2300      	movs	r3, #0
 800d59a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d59c:	2303      	movs	r3, #3
 800d59e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d5a0:	230a      	movs	r3, #10
 800d5a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4812      	ldr	r0, [pc, #72]	; (800d5f4 <HAL_PCD_MspInit+0xa4>)
 800d5ac:	f7f5 faae 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5b0:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	4a0e      	ldr	r2, [pc, #56]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ba:	6353      	str	r3, [r2, #52]	; 0x34
 800d5bc:	2300      	movs	r3, #0
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	4b0b      	ldr	r3, [pc, #44]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c4:	4a0a      	ldr	r2, [pc, #40]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d5c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5ca:	6453      	str	r3, [r2, #68]	; 0x44
 800d5cc:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <HAL_PCD_MspInit+0xa0>)
 800d5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2105      	movs	r1, #5
 800d5dc:	2043      	movs	r0, #67	; 0x43
 800d5de:	f7f4 fe69 	bl	80022b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5e2:	2043      	movs	r0, #67	; 0x43
 800d5e4:	f7f4 fe82 	bl	80022ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5e8:	bf00      	nop
 800d5ea:	3728      	adds	r7, #40	; 0x28
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	40023800 	.word	0x40023800
 800d5f4:	40020000 	.word	0x40020000

0800d5f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d60c:	4619      	mov	r1, r3
 800d60e:	4610      	mov	r0, r2
 800d610:	f7fa ff73 	bl	80084fa <USBD_LL_SetupStage>
}
 800d614:	bf00      	nop
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d62e:	78fa      	ldrb	r2, [r7, #3]
 800d630:	6879      	ldr	r1, [r7, #4]
 800d632:	4613      	mov	r3, r2
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	1a9b      	subs	r3, r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	440b      	add	r3, r1
 800d63c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	78fb      	ldrb	r3, [r7, #3]
 800d644:	4619      	mov	r1, r3
 800d646:	f7fa ffad 	bl	80085a4 <USBD_LL_DataOutStage>
}
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	460b      	mov	r3, r1
 800d65c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d664:	78fa      	ldrb	r2, [r7, #3]
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	4613      	mov	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	1a9b      	subs	r3, r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	440b      	add	r3, r1
 800d672:	3348      	adds	r3, #72	; 0x48
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	78fb      	ldrb	r3, [r7, #3]
 800d678:	4619      	mov	r1, r3
 800d67a:	f7fa fff6 	bl	800866a <USBD_LL_DataInStage>
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d694:	4618      	mov	r0, r3
 800d696:	f7fb f90a 	bl	80088ae <USBD_LL_SOF>
}
 800d69a:	bf00      	nop
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
 800d6ba:	e008      	b.n	800d6ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d102      	bne.n	800d6ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	73fb      	strb	r3, [r7, #15]
 800d6c8:	e001      	b.n	800d6ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6ca:	f7f3 fccd 	bl	8001068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6d4:	7bfa      	ldrb	r2, [r7, #15]
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fb f8aa 	bl	8008832 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fb f856 	bl	8008796 <USBD_LL_Reset>
}
 800d6ea:	bf00      	nop
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d702:	4618      	mov	r0, r3
 800d704:	f7fb f8a5 	bl	8008852 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d71a:	f043 0301 	orr.w	r3, r3, #1
 800d71e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a1b      	ldr	r3, [r3, #32]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d728:	4b04      	ldr	r3, [pc, #16]	; (800d73c <HAL_PCD_SuspendCallback+0x48>)
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	4a03      	ldr	r2, [pc, #12]	; (800d73c <HAL_PCD_SuspendCallback+0x48>)
 800d72e:	f043 0306 	orr.w	r3, r3, #6
 800d732:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	e000ed00 	.word	0xe000ed00

0800d740 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fb f895 	bl	800887e <USBD_LL_Resume>
}
 800d754:	bf00      	nop
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d76e:	78fa      	ldrb	r2, [r7, #3]
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f7fb f8e3 	bl	800893e <USBD_LL_IsoOUTIncomplete>
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d792:	78fa      	ldrb	r2, [r7, #3]
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f7fb f8ab 	bl	80088f2 <USBD_LL_IsoINIncomplete>
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fb f8e9 	bl	800898a <USBD_LL_DevConnected>
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fb f8e6 	bl	80089a0 <USBD_LL_DevDisconnected>
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d13c      	bne.n	800d866 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7ec:	4a20      	ldr	r2, [pc, #128]	; (800d870 <USBD_LL_Init+0x94>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a1e      	ldr	r2, [pc, #120]	; (800d870 <USBD_LL_Init+0x94>)
 800d7f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7fc:	4b1c      	ldr	r3, [pc, #112]	; (800d870 <USBD_LL_Init+0x94>)
 800d7fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d802:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d804:	4b1a      	ldr	r3, [pc, #104]	; (800d870 <USBD_LL_Init+0x94>)
 800d806:	2204      	movs	r2, #4
 800d808:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d80a:	4b19      	ldr	r3, [pc, #100]	; (800d870 <USBD_LL_Init+0x94>)
 800d80c:	2202      	movs	r2, #2
 800d80e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d810:	4b17      	ldr	r3, [pc, #92]	; (800d870 <USBD_LL_Init+0x94>)
 800d812:	2200      	movs	r2, #0
 800d814:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d816:	4b16      	ldr	r3, [pc, #88]	; (800d870 <USBD_LL_Init+0x94>)
 800d818:	2202      	movs	r2, #2
 800d81a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d81c:	4b14      	ldr	r3, [pc, #80]	; (800d870 <USBD_LL_Init+0x94>)
 800d81e:	2200      	movs	r2, #0
 800d820:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d822:	4b13      	ldr	r3, [pc, #76]	; (800d870 <USBD_LL_Init+0x94>)
 800d824:	2200      	movs	r2, #0
 800d826:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d828:	4b11      	ldr	r3, [pc, #68]	; (800d870 <USBD_LL_Init+0x94>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d82e:	4b10      	ldr	r3, [pc, #64]	; (800d870 <USBD_LL_Init+0x94>)
 800d830:	2200      	movs	r2, #0
 800d832:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d834:	4b0e      	ldr	r3, [pc, #56]	; (800d870 <USBD_LL_Init+0x94>)
 800d836:	2200      	movs	r2, #0
 800d838:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d83a:	480d      	ldr	r0, [pc, #52]	; (800d870 <USBD_LL_Init+0x94>)
 800d83c:	f7f5 fb5c 	bl	8002ef8 <HAL_PCD_Init>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d846:	f7f3 fc0f 	bl	8001068 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d84a:	2180      	movs	r1, #128	; 0x80
 800d84c:	4808      	ldr	r0, [pc, #32]	; (800d870 <USBD_LL_Init+0x94>)
 800d84e:	f7f6 fca2 	bl	8004196 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d852:	2240      	movs	r2, #64	; 0x40
 800d854:	2100      	movs	r1, #0
 800d856:	4806      	ldr	r0, [pc, #24]	; (800d870 <USBD_LL_Init+0x94>)
 800d858:	f7f6 fc56 	bl	8004108 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d85c:	2280      	movs	r2, #128	; 0x80
 800d85e:	2101      	movs	r1, #1
 800d860:	4803      	ldr	r0, [pc, #12]	; (800d870 <USBD_LL_Init+0x94>)
 800d862:	f7f6 fc51 	bl	8004108 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20005410 	.word	0x20005410

0800d874 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f5 fc51 	bl	8003132 <HAL_PCD_Start>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f930 	bl	800dafc <USBD_Get_USB_Status>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	70fb      	strb	r3, [r7, #3]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70bb      	strb	r3, [r7, #2]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8d2:	78bb      	ldrb	r3, [r7, #2]
 800d8d4:	883a      	ldrh	r2, [r7, #0]
 800d8d6:	78f9      	ldrb	r1, [r7, #3]
 800d8d8:	f7f6 f835 	bl	8003946 <HAL_PCD_EP_Open>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 f90a 	bl	800dafc <USBD_Get_USB_Status>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	460b      	mov	r3, r1
 800d900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d910:	78fa      	ldrb	r2, [r7, #3]
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f7f6 f87e 	bl	8003a16 <HAL_PCD_EP_Close>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 f8eb 	bl	800dafc <USBD_Get_USB_Status>
 800d926:	4603      	mov	r3, r0
 800d928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	f7f6 f93e 	bl	8003bd4 <HAL_PCD_EP_SetStall>
 800d958:	4603      	mov	r3, r0
 800d95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 f8cc 	bl	800dafc <USBD_Get_USB_Status>
 800d964:	4603      	mov	r3, r0
 800d966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d968:	7bbb      	ldrb	r3, [r7, #14]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d98c:	78fa      	ldrb	r2, [r7, #3]
 800d98e:	4611      	mov	r1, r2
 800d990:	4618      	mov	r0, r3
 800d992:	f7f6 f983 	bl	8003c9c <HAL_PCD_EP_ClrStall>
 800d996:	4603      	mov	r3, r0
 800d998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 f8ad 	bl	800dafc <USBD_Get_USB_Status>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	da0b      	bge.n	800d9e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9d2:	68f9      	ldr	r1, [r7, #12]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	440b      	add	r3, r1
 800d9de:	333e      	adds	r3, #62	; 0x3e
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	e00b      	b.n	800d9fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9ea:	68f9      	ldr	r1, [r7, #12]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	1a9b      	subs	r3, r3, r2
 800d9f2:	009b      	lsls	r3, r3, #2
 800d9f4:	440b      	add	r3, r1
 800d9f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da18:	2300      	movs	r3, #0
 800da1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da22:	78fa      	ldrb	r2, [r7, #3]
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7f5 ff68 	bl	80038fc <HAL_PCD_SetAddress>
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da30:	7bfb      	ldrb	r3, [r7, #15]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 f862 	bl	800dafc <USBD_Get_USB_Status>
 800da38:	4603      	mov	r3, r0
 800da3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	603b      	str	r3, [r7, #0]
 800da52:	460b      	mov	r3, r1
 800da54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da64:	7af9      	ldrb	r1, [r7, #11]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	f7f6 f869 	bl	8003b40 <HAL_PCD_EP_Transmit>
 800da6e:	4603      	mov	r3, r0
 800da70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	4618      	mov	r0, r3
 800da76:	f000 f841 	bl	800dafc <USBD_Get_USB_Status>
 800da7a:	4603      	mov	r3, r0
 800da7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	607a      	str	r2, [r7, #4]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	460b      	mov	r3, r1
 800da96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800daa6:	7af9      	ldrb	r1, [r7, #11]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	f7f5 fffd 	bl	8003aaa <HAL_PCD_EP_Receive>
 800dab0:	4603      	mov	r3, r0
 800dab2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f820 	bl	800dafc <USBD_Get_USB_Status>
 800dabc:	4603      	mov	r3, r0
 800dabe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dac0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800dad4:	4b03      	ldr	r3, [pc, #12]	; (800dae4 <USBD_static_malloc+0x18>)
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	20004bb8 	.word	0x20004bb8

0800dae8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]

}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	2b03      	cmp	r3, #3
 800db0e:	d817      	bhi.n	800db40 <USBD_Get_USB_Status+0x44>
 800db10:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <USBD_Get_USB_Status+0x1c>)
 800db12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db16:	bf00      	nop
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db2f 	.word	0x0800db2f
 800db20:	0800db35 	.word	0x0800db35
 800db24:	0800db3b 	.word	0x0800db3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db28:	2300      	movs	r3, #0
 800db2a:	73fb      	strb	r3, [r7, #15]
    break;
 800db2c:	e00b      	b.n	800db46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	73fb      	strb	r3, [r7, #15]
    break;
 800db32:	e008      	b.n	800db46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db34:	2301      	movs	r3, #1
 800db36:	73fb      	strb	r3, [r7, #15]
    break;
 800db38:	e005      	b.n	800db46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db3a:	2303      	movs	r3, #3
 800db3c:	73fb      	strb	r3, [r7, #15]
    break;
 800db3e:	e002      	b.n	800db46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db40:	2303      	movs	r3, #3
 800db42:	73fb      	strb	r3, [r7, #15]
    break;
 800db44:	bf00      	nop
  }
  return usb_status;
 800db46:	7bfb      	ldrb	r3, [r7, #15]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <__errno>:
 800db54:	4b01      	ldr	r3, [pc, #4]	; (800db5c <__errno+0x8>)
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	20000218 	.word	0x20000218

0800db60 <__libc_init_array>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	4d0d      	ldr	r5, [pc, #52]	; (800db98 <__libc_init_array+0x38>)
 800db64:	4c0d      	ldr	r4, [pc, #52]	; (800db9c <__libc_init_array+0x3c>)
 800db66:	1b64      	subs	r4, r4, r5
 800db68:	10a4      	asrs	r4, r4, #2
 800db6a:	2600      	movs	r6, #0
 800db6c:	42a6      	cmp	r6, r4
 800db6e:	d109      	bne.n	800db84 <__libc_init_array+0x24>
 800db70:	4d0b      	ldr	r5, [pc, #44]	; (800dba0 <__libc_init_array+0x40>)
 800db72:	4c0c      	ldr	r4, [pc, #48]	; (800dba4 <__libc_init_array+0x44>)
 800db74:	f000 fc3c 	bl	800e3f0 <_init>
 800db78:	1b64      	subs	r4, r4, r5
 800db7a:	10a4      	asrs	r4, r4, #2
 800db7c:	2600      	movs	r6, #0
 800db7e:	42a6      	cmp	r6, r4
 800db80:	d105      	bne.n	800db8e <__libc_init_array+0x2e>
 800db82:	bd70      	pop	{r4, r5, r6, pc}
 800db84:	f855 3b04 	ldr.w	r3, [r5], #4
 800db88:	4798      	blx	r3
 800db8a:	3601      	adds	r6, #1
 800db8c:	e7ee      	b.n	800db6c <__libc_init_array+0xc>
 800db8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db92:	4798      	blx	r3
 800db94:	3601      	adds	r6, #1
 800db96:	e7f2      	b.n	800db7e <__libc_init_array+0x1e>
 800db98:	0800e610 	.word	0x0800e610
 800db9c:	0800e610 	.word	0x0800e610
 800dba0:	0800e610 	.word	0x0800e610
 800dba4:	0800e614 	.word	0x0800e614

0800dba8 <memcpy>:
 800dba8:	440a      	add	r2, r1
 800dbaa:	4291      	cmp	r1, r2
 800dbac:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbb0:	d100      	bne.n	800dbb4 <memcpy+0xc>
 800dbb2:	4770      	bx	lr
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbbe:	4291      	cmp	r1, r2
 800dbc0:	d1f9      	bne.n	800dbb6 <memcpy+0xe>
 800dbc2:	bd10      	pop	{r4, pc}

0800dbc4 <memset>:
 800dbc4:	4402      	add	r2, r0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d100      	bne.n	800dbce <memset+0xa>
 800dbcc:	4770      	bx	lr
 800dbce:	f803 1b01 	strb.w	r1, [r3], #1
 800dbd2:	e7f9      	b.n	800dbc8 <memset+0x4>

0800dbd4 <setvbuf>:
 800dbd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbd8:	461d      	mov	r5, r3
 800dbda:	4b5d      	ldr	r3, [pc, #372]	; (800dd50 <setvbuf+0x17c>)
 800dbdc:	681f      	ldr	r7, [r3, #0]
 800dbde:	4604      	mov	r4, r0
 800dbe0:	460e      	mov	r6, r1
 800dbe2:	4690      	mov	r8, r2
 800dbe4:	b127      	cbz	r7, 800dbf0 <setvbuf+0x1c>
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	b913      	cbnz	r3, 800dbf0 <setvbuf+0x1c>
 800dbea:	4638      	mov	r0, r7
 800dbec:	f000 f9d2 	bl	800df94 <__sinit>
 800dbf0:	4b58      	ldr	r3, [pc, #352]	; (800dd54 <setvbuf+0x180>)
 800dbf2:	429c      	cmp	r4, r3
 800dbf4:	d167      	bne.n	800dcc6 <setvbuf+0xf2>
 800dbf6:	687c      	ldr	r4, [r7, #4]
 800dbf8:	f1b8 0f02 	cmp.w	r8, #2
 800dbfc:	d006      	beq.n	800dc0c <setvbuf+0x38>
 800dbfe:	f1b8 0f01 	cmp.w	r8, #1
 800dc02:	f200 809f 	bhi.w	800dd44 <setvbuf+0x170>
 800dc06:	2d00      	cmp	r5, #0
 800dc08:	f2c0 809c 	blt.w	800dd44 <setvbuf+0x170>
 800dc0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc0e:	07db      	lsls	r3, r3, #31
 800dc10:	d405      	bmi.n	800dc1e <setvbuf+0x4a>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	0598      	lsls	r0, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <setvbuf+0x4a>
 800dc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc1a:	f000 fa59 	bl	800e0d0 <__retarget_lock_acquire_recursive>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4638      	mov	r0, r7
 800dc22:	f000 f923 	bl	800de6c <_fflush_r>
 800dc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc28:	b141      	cbz	r1, 800dc3c <setvbuf+0x68>
 800dc2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	d002      	beq.n	800dc38 <setvbuf+0x64>
 800dc32:	4638      	mov	r0, r7
 800dc34:	f000 fa7a 	bl	800e12c <_free_r>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6363      	str	r3, [r4, #52]	; 0x34
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61a3      	str	r3, [r4, #24]
 800dc40:	6063      	str	r3, [r4, #4]
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	0619      	lsls	r1, r3, #24
 800dc46:	d503      	bpl.n	800dc50 <setvbuf+0x7c>
 800dc48:	6921      	ldr	r1, [r4, #16]
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f000 fa6e 	bl	800e12c <_free_r>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800dc56:	f023 0303 	bic.w	r3, r3, #3
 800dc5a:	f1b8 0f02 	cmp.w	r8, #2
 800dc5e:	81a3      	strh	r3, [r4, #12]
 800dc60:	d06c      	beq.n	800dd3c <setvbuf+0x168>
 800dc62:	ab01      	add	r3, sp, #4
 800dc64:	466a      	mov	r2, sp
 800dc66:	4621      	mov	r1, r4
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f000 fa33 	bl	800e0d4 <__swhatbuf_r>
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	4318      	orrs	r0, r3
 800dc72:	81a0      	strh	r0, [r4, #12]
 800dc74:	2d00      	cmp	r5, #0
 800dc76:	d130      	bne.n	800dcda <setvbuf+0x106>
 800dc78:	9d00      	ldr	r5, [sp, #0]
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f000 fa4e 	bl	800e11c <malloc>
 800dc80:	4606      	mov	r6, r0
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d155      	bne.n	800dd32 <setvbuf+0x15e>
 800dc86:	f8dd 9000 	ldr.w	r9, [sp]
 800dc8a:	45a9      	cmp	r9, r5
 800dc8c:	d14a      	bne.n	800dd24 <setvbuf+0x150>
 800dc8e:	f04f 35ff 	mov.w	r5, #4294967295
 800dc92:	2200      	movs	r2, #0
 800dc94:	60a2      	str	r2, [r4, #8]
 800dc96:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800dc9a:	6022      	str	r2, [r4, #0]
 800dc9c:	6122      	str	r2, [r4, #16]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca4:	6162      	str	r2, [r4, #20]
 800dca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dca8:	f043 0302 	orr.w	r3, r3, #2
 800dcac:	07d2      	lsls	r2, r2, #31
 800dcae:	81a3      	strh	r3, [r4, #12]
 800dcb0:	d405      	bmi.n	800dcbe <setvbuf+0xea>
 800dcb2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800dcb6:	d102      	bne.n	800dcbe <setvbuf+0xea>
 800dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcba:	f000 fa0a 	bl	800e0d2 <__retarget_lock_release_recursive>
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	b003      	add	sp, #12
 800dcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	4b24      	ldr	r3, [pc, #144]	; (800dd58 <setvbuf+0x184>)
 800dcc8:	429c      	cmp	r4, r3
 800dcca:	d101      	bne.n	800dcd0 <setvbuf+0xfc>
 800dccc:	68bc      	ldr	r4, [r7, #8]
 800dcce:	e793      	b.n	800dbf8 <setvbuf+0x24>
 800dcd0:	4b22      	ldr	r3, [pc, #136]	; (800dd5c <setvbuf+0x188>)
 800dcd2:	429c      	cmp	r4, r3
 800dcd4:	bf08      	it	eq
 800dcd6:	68fc      	ldreq	r4, [r7, #12]
 800dcd8:	e78e      	b.n	800dbf8 <setvbuf+0x24>
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	d0cd      	beq.n	800dc7a <setvbuf+0xa6>
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	b913      	cbnz	r3, 800dce8 <setvbuf+0x114>
 800dce2:	4638      	mov	r0, r7
 800dce4:	f000 f956 	bl	800df94 <__sinit>
 800dce8:	f1b8 0f01 	cmp.w	r8, #1
 800dcec:	bf08      	it	eq
 800dcee:	89a3      	ldrheq	r3, [r4, #12]
 800dcf0:	6026      	str	r6, [r4, #0]
 800dcf2:	bf04      	itt	eq
 800dcf4:	f043 0301 	orreq.w	r3, r3, #1
 800dcf8:	81a3      	strheq	r3, [r4, #12]
 800dcfa:	89a2      	ldrh	r2, [r4, #12]
 800dcfc:	f012 0308 	ands.w	r3, r2, #8
 800dd00:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dd04:	d01c      	beq.n	800dd40 <setvbuf+0x16c>
 800dd06:	07d3      	lsls	r3, r2, #31
 800dd08:	bf41      	itttt	mi
 800dd0a:	2300      	movmi	r3, #0
 800dd0c:	426d      	negmi	r5, r5
 800dd0e:	60a3      	strmi	r3, [r4, #8]
 800dd10:	61a5      	strmi	r5, [r4, #24]
 800dd12:	bf58      	it	pl
 800dd14:	60a5      	strpl	r5, [r4, #8]
 800dd16:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800dd18:	f015 0501 	ands.w	r5, r5, #1
 800dd1c:	d115      	bne.n	800dd4a <setvbuf+0x176>
 800dd1e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800dd22:	e7c8      	b.n	800dcb6 <setvbuf+0xe2>
 800dd24:	4648      	mov	r0, r9
 800dd26:	f000 f9f9 	bl	800e11c <malloc>
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d0ae      	beq.n	800dc8e <setvbuf+0xba>
 800dd30:	464d      	mov	r5, r9
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd38:	81a3      	strh	r3, [r4, #12]
 800dd3a:	e7d0      	b.n	800dcde <setvbuf+0x10a>
 800dd3c:	2500      	movs	r5, #0
 800dd3e:	e7a8      	b.n	800dc92 <setvbuf+0xbe>
 800dd40:	60a3      	str	r3, [r4, #8]
 800dd42:	e7e8      	b.n	800dd16 <setvbuf+0x142>
 800dd44:	f04f 35ff 	mov.w	r5, #4294967295
 800dd48:	e7b9      	b.n	800dcbe <setvbuf+0xea>
 800dd4a:	2500      	movs	r5, #0
 800dd4c:	e7b7      	b.n	800dcbe <setvbuf+0xea>
 800dd4e:	bf00      	nop
 800dd50:	20000218 	.word	0x20000218
 800dd54:	0800e5c8 	.word	0x0800e5c8
 800dd58:	0800e5e8 	.word	0x0800e5e8
 800dd5c:	0800e5a8 	.word	0x0800e5a8

0800dd60 <__sflush_r>:
 800dd60:	898a      	ldrh	r2, [r1, #12]
 800dd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd66:	4605      	mov	r5, r0
 800dd68:	0710      	lsls	r0, r2, #28
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	d458      	bmi.n	800de20 <__sflush_r+0xc0>
 800dd6e:	684b      	ldr	r3, [r1, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dc05      	bgt.n	800dd80 <__sflush_r+0x20>
 800dd74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	dc02      	bgt.n	800dd80 <__sflush_r+0x20>
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd82:	2e00      	cmp	r6, #0
 800dd84:	d0f9      	beq.n	800dd7a <__sflush_r+0x1a>
 800dd86:	2300      	movs	r3, #0
 800dd88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd8c:	682f      	ldr	r7, [r5, #0]
 800dd8e:	602b      	str	r3, [r5, #0]
 800dd90:	d032      	beq.n	800ddf8 <__sflush_r+0x98>
 800dd92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	075a      	lsls	r2, r3, #29
 800dd98:	d505      	bpl.n	800dda6 <__sflush_r+0x46>
 800dd9a:	6863      	ldr	r3, [r4, #4]
 800dd9c:	1ac0      	subs	r0, r0, r3
 800dd9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dda0:	b10b      	cbz	r3, 800dda6 <__sflush_r+0x46>
 800dda2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dda4:	1ac0      	subs	r0, r0, r3
 800dda6:	2300      	movs	r3, #0
 800dda8:	4602      	mov	r2, r0
 800ddaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddac:	6a21      	ldr	r1, [r4, #32]
 800ddae:	4628      	mov	r0, r5
 800ddb0:	47b0      	blx	r6
 800ddb2:	1c43      	adds	r3, r0, #1
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	d106      	bne.n	800ddc6 <__sflush_r+0x66>
 800ddb8:	6829      	ldr	r1, [r5, #0]
 800ddba:	291d      	cmp	r1, #29
 800ddbc:	d82c      	bhi.n	800de18 <__sflush_r+0xb8>
 800ddbe:	4a2a      	ldr	r2, [pc, #168]	; (800de68 <__sflush_r+0x108>)
 800ddc0:	40ca      	lsrs	r2, r1
 800ddc2:	07d6      	lsls	r6, r2, #31
 800ddc4:	d528      	bpl.n	800de18 <__sflush_r+0xb8>
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	6062      	str	r2, [r4, #4]
 800ddca:	04d9      	lsls	r1, r3, #19
 800ddcc:	6922      	ldr	r2, [r4, #16]
 800ddce:	6022      	str	r2, [r4, #0]
 800ddd0:	d504      	bpl.n	800dddc <__sflush_r+0x7c>
 800ddd2:	1c42      	adds	r2, r0, #1
 800ddd4:	d101      	bne.n	800ddda <__sflush_r+0x7a>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b903      	cbnz	r3, 800dddc <__sflush_r+0x7c>
 800ddda:	6560      	str	r0, [r4, #84]	; 0x54
 800dddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddde:	602f      	str	r7, [r5, #0]
 800dde0:	2900      	cmp	r1, #0
 800dde2:	d0ca      	beq.n	800dd7a <__sflush_r+0x1a>
 800dde4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde8:	4299      	cmp	r1, r3
 800ddea:	d002      	beq.n	800ddf2 <__sflush_r+0x92>
 800ddec:	4628      	mov	r0, r5
 800ddee:	f000 f99d 	bl	800e12c <_free_r>
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	6360      	str	r0, [r4, #52]	; 0x34
 800ddf6:	e7c1      	b.n	800dd7c <__sflush_r+0x1c>
 800ddf8:	6a21      	ldr	r1, [r4, #32]
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b0      	blx	r6
 800de00:	1c41      	adds	r1, r0, #1
 800de02:	d1c7      	bne.n	800dd94 <__sflush_r+0x34>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d0c4      	beq.n	800dd94 <__sflush_r+0x34>
 800de0a:	2b1d      	cmp	r3, #29
 800de0c:	d001      	beq.n	800de12 <__sflush_r+0xb2>
 800de0e:	2b16      	cmp	r3, #22
 800de10:	d101      	bne.n	800de16 <__sflush_r+0xb6>
 800de12:	602f      	str	r7, [r5, #0]
 800de14:	e7b1      	b.n	800dd7a <__sflush_r+0x1a>
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	e7ad      	b.n	800dd7c <__sflush_r+0x1c>
 800de20:	690f      	ldr	r7, [r1, #16]
 800de22:	2f00      	cmp	r7, #0
 800de24:	d0a9      	beq.n	800dd7a <__sflush_r+0x1a>
 800de26:	0793      	lsls	r3, r2, #30
 800de28:	680e      	ldr	r6, [r1, #0]
 800de2a:	bf08      	it	eq
 800de2c:	694b      	ldreq	r3, [r1, #20]
 800de2e:	600f      	str	r7, [r1, #0]
 800de30:	bf18      	it	ne
 800de32:	2300      	movne	r3, #0
 800de34:	eba6 0807 	sub.w	r8, r6, r7
 800de38:	608b      	str	r3, [r1, #8]
 800de3a:	f1b8 0f00 	cmp.w	r8, #0
 800de3e:	dd9c      	ble.n	800dd7a <__sflush_r+0x1a>
 800de40:	6a21      	ldr	r1, [r4, #32]
 800de42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de44:	4643      	mov	r3, r8
 800de46:	463a      	mov	r2, r7
 800de48:	4628      	mov	r0, r5
 800de4a:	47b0      	blx	r6
 800de4c:	2800      	cmp	r0, #0
 800de4e:	dc06      	bgt.n	800de5e <__sflush_r+0xfe>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de56:	81a3      	strh	r3, [r4, #12]
 800de58:	f04f 30ff 	mov.w	r0, #4294967295
 800de5c:	e78e      	b.n	800dd7c <__sflush_r+0x1c>
 800de5e:	4407      	add	r7, r0
 800de60:	eba8 0800 	sub.w	r8, r8, r0
 800de64:	e7e9      	b.n	800de3a <__sflush_r+0xda>
 800de66:	bf00      	nop
 800de68:	20400001 	.word	0x20400001

0800de6c <_fflush_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	690b      	ldr	r3, [r1, #16]
 800de70:	4605      	mov	r5, r0
 800de72:	460c      	mov	r4, r1
 800de74:	b913      	cbnz	r3, 800de7c <_fflush_r+0x10>
 800de76:	2500      	movs	r5, #0
 800de78:	4628      	mov	r0, r5
 800de7a:	bd38      	pop	{r3, r4, r5, pc}
 800de7c:	b118      	cbz	r0, 800de86 <_fflush_r+0x1a>
 800de7e:	6983      	ldr	r3, [r0, #24]
 800de80:	b90b      	cbnz	r3, 800de86 <_fflush_r+0x1a>
 800de82:	f000 f887 	bl	800df94 <__sinit>
 800de86:	4b14      	ldr	r3, [pc, #80]	; (800ded8 <_fflush_r+0x6c>)
 800de88:	429c      	cmp	r4, r3
 800de8a:	d11b      	bne.n	800dec4 <_fflush_r+0x58>
 800de8c:	686c      	ldr	r4, [r5, #4]
 800de8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0ef      	beq.n	800de76 <_fflush_r+0xa>
 800de96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de98:	07d0      	lsls	r0, r2, #31
 800de9a:	d404      	bmi.n	800dea6 <_fflush_r+0x3a>
 800de9c:	0599      	lsls	r1, r3, #22
 800de9e:	d402      	bmi.n	800dea6 <_fflush_r+0x3a>
 800dea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dea2:	f000 f915 	bl	800e0d0 <__retarget_lock_acquire_recursive>
 800dea6:	4628      	mov	r0, r5
 800dea8:	4621      	mov	r1, r4
 800deaa:	f7ff ff59 	bl	800dd60 <__sflush_r>
 800deae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deb0:	07da      	lsls	r2, r3, #31
 800deb2:	4605      	mov	r5, r0
 800deb4:	d4e0      	bmi.n	800de78 <_fflush_r+0xc>
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	059b      	lsls	r3, r3, #22
 800deba:	d4dd      	bmi.n	800de78 <_fflush_r+0xc>
 800debc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800debe:	f000 f908 	bl	800e0d2 <__retarget_lock_release_recursive>
 800dec2:	e7d9      	b.n	800de78 <_fflush_r+0xc>
 800dec4:	4b05      	ldr	r3, [pc, #20]	; (800dedc <_fflush_r+0x70>)
 800dec6:	429c      	cmp	r4, r3
 800dec8:	d101      	bne.n	800dece <_fflush_r+0x62>
 800deca:	68ac      	ldr	r4, [r5, #8]
 800decc:	e7df      	b.n	800de8e <_fflush_r+0x22>
 800dece:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <_fflush_r+0x74>)
 800ded0:	429c      	cmp	r4, r3
 800ded2:	bf08      	it	eq
 800ded4:	68ec      	ldreq	r4, [r5, #12]
 800ded6:	e7da      	b.n	800de8e <_fflush_r+0x22>
 800ded8:	0800e5c8 	.word	0x0800e5c8
 800dedc:	0800e5e8 	.word	0x0800e5e8
 800dee0:	0800e5a8 	.word	0x0800e5a8

0800dee4 <std>:
 800dee4:	2300      	movs	r3, #0
 800dee6:	b510      	push	{r4, lr}
 800dee8:	4604      	mov	r4, r0
 800deea:	e9c0 3300 	strd	r3, r3, [r0]
 800deee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800def2:	6083      	str	r3, [r0, #8]
 800def4:	8181      	strh	r1, [r0, #12]
 800def6:	6643      	str	r3, [r0, #100]	; 0x64
 800def8:	81c2      	strh	r2, [r0, #14]
 800defa:	6183      	str	r3, [r0, #24]
 800defc:	4619      	mov	r1, r3
 800defe:	2208      	movs	r2, #8
 800df00:	305c      	adds	r0, #92	; 0x5c
 800df02:	f7ff fe5f 	bl	800dbc4 <memset>
 800df06:	4b05      	ldr	r3, [pc, #20]	; (800df1c <std+0x38>)
 800df08:	6263      	str	r3, [r4, #36]	; 0x24
 800df0a:	4b05      	ldr	r3, [pc, #20]	; (800df20 <std+0x3c>)
 800df0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800df0e:	4b05      	ldr	r3, [pc, #20]	; (800df24 <std+0x40>)
 800df10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df12:	4b05      	ldr	r3, [pc, #20]	; (800df28 <std+0x44>)
 800df14:	6224      	str	r4, [r4, #32]
 800df16:	6323      	str	r3, [r4, #48]	; 0x30
 800df18:	bd10      	pop	{r4, pc}
 800df1a:	bf00      	nop
 800df1c:	0800e2a1 	.word	0x0800e2a1
 800df20:	0800e2c3 	.word	0x0800e2c3
 800df24:	0800e2fb 	.word	0x0800e2fb
 800df28:	0800e31f 	.word	0x0800e31f

0800df2c <_cleanup_r>:
 800df2c:	4901      	ldr	r1, [pc, #4]	; (800df34 <_cleanup_r+0x8>)
 800df2e:	f000 b8af 	b.w	800e090 <_fwalk_reent>
 800df32:	bf00      	nop
 800df34:	0800de6d 	.word	0x0800de6d

0800df38 <__sfmoreglue>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	1e4a      	subs	r2, r1, #1
 800df3c:	2568      	movs	r5, #104	; 0x68
 800df3e:	4355      	muls	r5, r2
 800df40:	460e      	mov	r6, r1
 800df42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df46:	f000 f941 	bl	800e1cc <_malloc_r>
 800df4a:	4604      	mov	r4, r0
 800df4c:	b140      	cbz	r0, 800df60 <__sfmoreglue+0x28>
 800df4e:	2100      	movs	r1, #0
 800df50:	e9c0 1600 	strd	r1, r6, [r0]
 800df54:	300c      	adds	r0, #12
 800df56:	60a0      	str	r0, [r4, #8]
 800df58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df5c:	f7ff fe32 	bl	800dbc4 <memset>
 800df60:	4620      	mov	r0, r4
 800df62:	bd70      	pop	{r4, r5, r6, pc}

0800df64 <__sfp_lock_acquire>:
 800df64:	4801      	ldr	r0, [pc, #4]	; (800df6c <__sfp_lock_acquire+0x8>)
 800df66:	f000 b8b3 	b.w	800e0d0 <__retarget_lock_acquire_recursive>
 800df6a:	bf00      	nop
 800df6c:	20005820 	.word	0x20005820

0800df70 <__sfp_lock_release>:
 800df70:	4801      	ldr	r0, [pc, #4]	; (800df78 <__sfp_lock_release+0x8>)
 800df72:	f000 b8ae 	b.w	800e0d2 <__retarget_lock_release_recursive>
 800df76:	bf00      	nop
 800df78:	20005820 	.word	0x20005820

0800df7c <__sinit_lock_acquire>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__sinit_lock_acquire+0x8>)
 800df7e:	f000 b8a7 	b.w	800e0d0 <__retarget_lock_acquire_recursive>
 800df82:	bf00      	nop
 800df84:	2000581b 	.word	0x2000581b

0800df88 <__sinit_lock_release>:
 800df88:	4801      	ldr	r0, [pc, #4]	; (800df90 <__sinit_lock_release+0x8>)
 800df8a:	f000 b8a2 	b.w	800e0d2 <__retarget_lock_release_recursive>
 800df8e:	bf00      	nop
 800df90:	2000581b 	.word	0x2000581b

0800df94 <__sinit>:
 800df94:	b510      	push	{r4, lr}
 800df96:	4604      	mov	r4, r0
 800df98:	f7ff fff0 	bl	800df7c <__sinit_lock_acquire>
 800df9c:	69a3      	ldr	r3, [r4, #24]
 800df9e:	b11b      	cbz	r3, 800dfa8 <__sinit+0x14>
 800dfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa4:	f7ff bff0 	b.w	800df88 <__sinit_lock_release>
 800dfa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dfac:	6523      	str	r3, [r4, #80]	; 0x50
 800dfae:	4b13      	ldr	r3, [pc, #76]	; (800dffc <__sinit+0x68>)
 800dfb0:	4a13      	ldr	r2, [pc, #76]	; (800e000 <__sinit+0x6c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dfb6:	42a3      	cmp	r3, r4
 800dfb8:	bf04      	itt	eq
 800dfba:	2301      	moveq	r3, #1
 800dfbc:	61a3      	streq	r3, [r4, #24]
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 f820 	bl	800e004 <__sfp>
 800dfc4:	6060      	str	r0, [r4, #4]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 f81c 	bl	800e004 <__sfp>
 800dfcc:	60a0      	str	r0, [r4, #8]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 f818 	bl	800e004 <__sfp>
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	60e0      	str	r0, [r4, #12]
 800dfd8:	2104      	movs	r1, #4
 800dfda:	6860      	ldr	r0, [r4, #4]
 800dfdc:	f7ff ff82 	bl	800dee4 <std>
 800dfe0:	68a0      	ldr	r0, [r4, #8]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	2109      	movs	r1, #9
 800dfe6:	f7ff ff7d 	bl	800dee4 <std>
 800dfea:	68e0      	ldr	r0, [r4, #12]
 800dfec:	2202      	movs	r2, #2
 800dfee:	2112      	movs	r1, #18
 800dff0:	f7ff ff78 	bl	800dee4 <std>
 800dff4:	2301      	movs	r3, #1
 800dff6:	61a3      	str	r3, [r4, #24]
 800dff8:	e7d2      	b.n	800dfa0 <__sinit+0xc>
 800dffa:	bf00      	nop
 800dffc:	0800e5a4 	.word	0x0800e5a4
 800e000:	0800df2d 	.word	0x0800df2d

0800e004 <__sfp>:
 800e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e006:	4607      	mov	r7, r0
 800e008:	f7ff ffac 	bl	800df64 <__sfp_lock_acquire>
 800e00c:	4b1e      	ldr	r3, [pc, #120]	; (800e088 <__sfp+0x84>)
 800e00e:	681e      	ldr	r6, [r3, #0]
 800e010:	69b3      	ldr	r3, [r6, #24]
 800e012:	b913      	cbnz	r3, 800e01a <__sfp+0x16>
 800e014:	4630      	mov	r0, r6
 800e016:	f7ff ffbd 	bl	800df94 <__sinit>
 800e01a:	3648      	adds	r6, #72	; 0x48
 800e01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e020:	3b01      	subs	r3, #1
 800e022:	d503      	bpl.n	800e02c <__sfp+0x28>
 800e024:	6833      	ldr	r3, [r6, #0]
 800e026:	b30b      	cbz	r3, 800e06c <__sfp+0x68>
 800e028:	6836      	ldr	r6, [r6, #0]
 800e02a:	e7f7      	b.n	800e01c <__sfp+0x18>
 800e02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e030:	b9d5      	cbnz	r5, 800e068 <__sfp+0x64>
 800e032:	4b16      	ldr	r3, [pc, #88]	; (800e08c <__sfp+0x88>)
 800e034:	60e3      	str	r3, [r4, #12]
 800e036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e03a:	6665      	str	r5, [r4, #100]	; 0x64
 800e03c:	f000 f847 	bl	800e0ce <__retarget_lock_init_recursive>
 800e040:	f7ff ff96 	bl	800df70 <__sfp_lock_release>
 800e044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e04c:	6025      	str	r5, [r4, #0]
 800e04e:	61a5      	str	r5, [r4, #24]
 800e050:	2208      	movs	r2, #8
 800e052:	4629      	mov	r1, r5
 800e054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e058:	f7ff fdb4 	bl	800dbc4 <memset>
 800e05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e064:	4620      	mov	r0, r4
 800e066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e068:	3468      	adds	r4, #104	; 0x68
 800e06a:	e7d9      	b.n	800e020 <__sfp+0x1c>
 800e06c:	2104      	movs	r1, #4
 800e06e:	4638      	mov	r0, r7
 800e070:	f7ff ff62 	bl	800df38 <__sfmoreglue>
 800e074:	4604      	mov	r4, r0
 800e076:	6030      	str	r0, [r6, #0]
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1d5      	bne.n	800e028 <__sfp+0x24>
 800e07c:	f7ff ff78 	bl	800df70 <__sfp_lock_release>
 800e080:	230c      	movs	r3, #12
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	e7ee      	b.n	800e064 <__sfp+0x60>
 800e086:	bf00      	nop
 800e088:	0800e5a4 	.word	0x0800e5a4
 800e08c:	ffff0001 	.word	0xffff0001

0800e090 <_fwalk_reent>:
 800e090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e094:	4606      	mov	r6, r0
 800e096:	4688      	mov	r8, r1
 800e098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e09c:	2700      	movs	r7, #0
 800e09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800e0a6:	d505      	bpl.n	800e0b4 <_fwalk_reent+0x24>
 800e0a8:	6824      	ldr	r4, [r4, #0]
 800e0aa:	2c00      	cmp	r4, #0
 800e0ac:	d1f7      	bne.n	800e09e <_fwalk_reent+0xe>
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0b4:	89ab      	ldrh	r3, [r5, #12]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d907      	bls.n	800e0ca <_fwalk_reent+0x3a>
 800e0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	d003      	beq.n	800e0ca <_fwalk_reent+0x3a>
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	47c0      	blx	r8
 800e0c8:	4307      	orrs	r7, r0
 800e0ca:	3568      	adds	r5, #104	; 0x68
 800e0cc:	e7e9      	b.n	800e0a2 <_fwalk_reent+0x12>

0800e0ce <__retarget_lock_init_recursive>:
 800e0ce:	4770      	bx	lr

0800e0d0 <__retarget_lock_acquire_recursive>:
 800e0d0:	4770      	bx	lr

0800e0d2 <__retarget_lock_release_recursive>:
 800e0d2:	4770      	bx	lr

0800e0d4 <__swhatbuf_r>:
 800e0d4:	b570      	push	{r4, r5, r6, lr}
 800e0d6:	460e      	mov	r6, r1
 800e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	b096      	sub	sp, #88	; 0x58
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	461d      	mov	r5, r3
 800e0e4:	da07      	bge.n	800e0f6 <__swhatbuf_r+0x22>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	89b3      	ldrh	r3, [r6, #12]
 800e0ec:	061a      	lsls	r2, r3, #24
 800e0ee:	d410      	bmi.n	800e112 <__swhatbuf_r+0x3e>
 800e0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0f4:	e00e      	b.n	800e114 <__swhatbuf_r+0x40>
 800e0f6:	466a      	mov	r2, sp
 800e0f8:	f000 f938 	bl	800e36c <_fstat_r>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	dbf2      	blt.n	800e0e6 <__swhatbuf_r+0x12>
 800e100:	9a01      	ldr	r2, [sp, #4]
 800e102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e10a:	425a      	negs	r2, r3
 800e10c:	415a      	adcs	r2, r3
 800e10e:	602a      	str	r2, [r5, #0]
 800e110:	e7ee      	b.n	800e0f0 <__swhatbuf_r+0x1c>
 800e112:	2340      	movs	r3, #64	; 0x40
 800e114:	2000      	movs	r0, #0
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	b016      	add	sp, #88	; 0x58
 800e11a:	bd70      	pop	{r4, r5, r6, pc}

0800e11c <malloc>:
 800e11c:	4b02      	ldr	r3, [pc, #8]	; (800e128 <malloc+0xc>)
 800e11e:	4601      	mov	r1, r0
 800e120:	6818      	ldr	r0, [r3, #0]
 800e122:	f000 b853 	b.w	800e1cc <_malloc_r>
 800e126:	bf00      	nop
 800e128:	20000218 	.word	0x20000218

0800e12c <_free_r>:
 800e12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e12e:	2900      	cmp	r1, #0
 800e130:	d048      	beq.n	800e1c4 <_free_r+0x98>
 800e132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e136:	9001      	str	r0, [sp, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f1a1 0404 	sub.w	r4, r1, #4
 800e13e:	bfb8      	it	lt
 800e140:	18e4      	addlt	r4, r4, r3
 800e142:	f000 f937 	bl	800e3b4 <__malloc_lock>
 800e146:	4a20      	ldr	r2, [pc, #128]	; (800e1c8 <_free_r+0x9c>)
 800e148:	9801      	ldr	r0, [sp, #4]
 800e14a:	6813      	ldr	r3, [r2, #0]
 800e14c:	4615      	mov	r5, r2
 800e14e:	b933      	cbnz	r3, 800e15e <_free_r+0x32>
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	6014      	str	r4, [r2, #0]
 800e154:	b003      	add	sp, #12
 800e156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e15a:	f000 b931 	b.w	800e3c0 <__malloc_unlock>
 800e15e:	42a3      	cmp	r3, r4
 800e160:	d90b      	bls.n	800e17a <_free_r+0x4e>
 800e162:	6821      	ldr	r1, [r4, #0]
 800e164:	1862      	adds	r2, r4, r1
 800e166:	4293      	cmp	r3, r2
 800e168:	bf04      	itt	eq
 800e16a:	681a      	ldreq	r2, [r3, #0]
 800e16c:	685b      	ldreq	r3, [r3, #4]
 800e16e:	6063      	str	r3, [r4, #4]
 800e170:	bf04      	itt	eq
 800e172:	1852      	addeq	r2, r2, r1
 800e174:	6022      	streq	r2, [r4, #0]
 800e176:	602c      	str	r4, [r5, #0]
 800e178:	e7ec      	b.n	800e154 <_free_r+0x28>
 800e17a:	461a      	mov	r2, r3
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	b10b      	cbz	r3, 800e184 <_free_r+0x58>
 800e180:	42a3      	cmp	r3, r4
 800e182:	d9fa      	bls.n	800e17a <_free_r+0x4e>
 800e184:	6811      	ldr	r1, [r2, #0]
 800e186:	1855      	adds	r5, r2, r1
 800e188:	42a5      	cmp	r5, r4
 800e18a:	d10b      	bne.n	800e1a4 <_free_r+0x78>
 800e18c:	6824      	ldr	r4, [r4, #0]
 800e18e:	4421      	add	r1, r4
 800e190:	1854      	adds	r4, r2, r1
 800e192:	42a3      	cmp	r3, r4
 800e194:	6011      	str	r1, [r2, #0]
 800e196:	d1dd      	bne.n	800e154 <_free_r+0x28>
 800e198:	681c      	ldr	r4, [r3, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	6053      	str	r3, [r2, #4]
 800e19e:	4421      	add	r1, r4
 800e1a0:	6011      	str	r1, [r2, #0]
 800e1a2:	e7d7      	b.n	800e154 <_free_r+0x28>
 800e1a4:	d902      	bls.n	800e1ac <_free_r+0x80>
 800e1a6:	230c      	movs	r3, #12
 800e1a8:	6003      	str	r3, [r0, #0]
 800e1aa:	e7d3      	b.n	800e154 <_free_r+0x28>
 800e1ac:	6825      	ldr	r5, [r4, #0]
 800e1ae:	1961      	adds	r1, r4, r5
 800e1b0:	428b      	cmp	r3, r1
 800e1b2:	bf04      	itt	eq
 800e1b4:	6819      	ldreq	r1, [r3, #0]
 800e1b6:	685b      	ldreq	r3, [r3, #4]
 800e1b8:	6063      	str	r3, [r4, #4]
 800e1ba:	bf04      	itt	eq
 800e1bc:	1949      	addeq	r1, r1, r5
 800e1be:	6021      	streq	r1, [r4, #0]
 800e1c0:	6054      	str	r4, [r2, #4]
 800e1c2:	e7c7      	b.n	800e154 <_free_r+0x28>
 800e1c4:	b003      	add	sp, #12
 800e1c6:	bd30      	pop	{r4, r5, pc}
 800e1c8:	20004bd4 	.word	0x20004bd4

0800e1cc <_malloc_r>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	1ccd      	adds	r5, r1, #3
 800e1d0:	f025 0503 	bic.w	r5, r5, #3
 800e1d4:	3508      	adds	r5, #8
 800e1d6:	2d0c      	cmp	r5, #12
 800e1d8:	bf38      	it	cc
 800e1da:	250c      	movcc	r5, #12
 800e1dc:	2d00      	cmp	r5, #0
 800e1de:	4606      	mov	r6, r0
 800e1e0:	db01      	blt.n	800e1e6 <_malloc_r+0x1a>
 800e1e2:	42a9      	cmp	r1, r5
 800e1e4:	d903      	bls.n	800e1ee <_malloc_r+0x22>
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	6033      	str	r3, [r6, #0]
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ee:	f000 f8e1 	bl	800e3b4 <__malloc_lock>
 800e1f2:	4921      	ldr	r1, [pc, #132]	; (800e278 <_malloc_r+0xac>)
 800e1f4:	680a      	ldr	r2, [r1, #0]
 800e1f6:	4614      	mov	r4, r2
 800e1f8:	b99c      	cbnz	r4, 800e222 <_malloc_r+0x56>
 800e1fa:	4f20      	ldr	r7, [pc, #128]	; (800e27c <_malloc_r+0xb0>)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	b923      	cbnz	r3, 800e20a <_malloc_r+0x3e>
 800e200:	4621      	mov	r1, r4
 800e202:	4630      	mov	r0, r6
 800e204:	f000 f83c 	bl	800e280 <_sbrk_r>
 800e208:	6038      	str	r0, [r7, #0]
 800e20a:	4629      	mov	r1, r5
 800e20c:	4630      	mov	r0, r6
 800e20e:	f000 f837 	bl	800e280 <_sbrk_r>
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	d123      	bne.n	800e25e <_malloc_r+0x92>
 800e216:	230c      	movs	r3, #12
 800e218:	6033      	str	r3, [r6, #0]
 800e21a:	4630      	mov	r0, r6
 800e21c:	f000 f8d0 	bl	800e3c0 <__malloc_unlock>
 800e220:	e7e3      	b.n	800e1ea <_malloc_r+0x1e>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	1b5b      	subs	r3, r3, r5
 800e226:	d417      	bmi.n	800e258 <_malloc_r+0x8c>
 800e228:	2b0b      	cmp	r3, #11
 800e22a:	d903      	bls.n	800e234 <_malloc_r+0x68>
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	441c      	add	r4, r3
 800e230:	6025      	str	r5, [r4, #0]
 800e232:	e004      	b.n	800e23e <_malloc_r+0x72>
 800e234:	6863      	ldr	r3, [r4, #4]
 800e236:	42a2      	cmp	r2, r4
 800e238:	bf0c      	ite	eq
 800e23a:	600b      	streq	r3, [r1, #0]
 800e23c:	6053      	strne	r3, [r2, #4]
 800e23e:	4630      	mov	r0, r6
 800e240:	f000 f8be 	bl	800e3c0 <__malloc_unlock>
 800e244:	f104 000b 	add.w	r0, r4, #11
 800e248:	1d23      	adds	r3, r4, #4
 800e24a:	f020 0007 	bic.w	r0, r0, #7
 800e24e:	1ac2      	subs	r2, r0, r3
 800e250:	d0cc      	beq.n	800e1ec <_malloc_r+0x20>
 800e252:	1a1b      	subs	r3, r3, r0
 800e254:	50a3      	str	r3, [r4, r2]
 800e256:	e7c9      	b.n	800e1ec <_malloc_r+0x20>
 800e258:	4622      	mov	r2, r4
 800e25a:	6864      	ldr	r4, [r4, #4]
 800e25c:	e7cc      	b.n	800e1f8 <_malloc_r+0x2c>
 800e25e:	1cc4      	adds	r4, r0, #3
 800e260:	f024 0403 	bic.w	r4, r4, #3
 800e264:	42a0      	cmp	r0, r4
 800e266:	d0e3      	beq.n	800e230 <_malloc_r+0x64>
 800e268:	1a21      	subs	r1, r4, r0
 800e26a:	4630      	mov	r0, r6
 800e26c:	f000 f808 	bl	800e280 <_sbrk_r>
 800e270:	3001      	adds	r0, #1
 800e272:	d1dd      	bne.n	800e230 <_malloc_r+0x64>
 800e274:	e7cf      	b.n	800e216 <_malloc_r+0x4a>
 800e276:	bf00      	nop
 800e278:	20004bd4 	.word	0x20004bd4
 800e27c:	20004bd8 	.word	0x20004bd8

0800e280 <_sbrk_r>:
 800e280:	b538      	push	{r3, r4, r5, lr}
 800e282:	4d06      	ldr	r5, [pc, #24]	; (800e29c <_sbrk_r+0x1c>)
 800e284:	2300      	movs	r3, #0
 800e286:	4604      	mov	r4, r0
 800e288:	4608      	mov	r0, r1
 800e28a:	602b      	str	r3, [r5, #0]
 800e28c:	f7f3 f88e 	bl	80013ac <_sbrk>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_sbrk_r+0x1a>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_sbrk_r+0x1a>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	20005824 	.word	0x20005824

0800e2a0 <__sread>:
 800e2a0:	b510      	push	{r4, lr}
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a8:	f000 f890 	bl	800e3cc <_read_r>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	bfab      	itete	ge
 800e2b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2b2:	89a3      	ldrhlt	r3, [r4, #12]
 800e2b4:	181b      	addge	r3, r3, r0
 800e2b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2ba:	bfac      	ite	ge
 800e2bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2be:	81a3      	strhlt	r3, [r4, #12]
 800e2c0:	bd10      	pop	{r4, pc}

0800e2c2 <__swrite>:
 800e2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c6:	461f      	mov	r7, r3
 800e2c8:	898b      	ldrh	r3, [r1, #12]
 800e2ca:	05db      	lsls	r3, r3, #23
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	4616      	mov	r6, r2
 800e2d2:	d505      	bpl.n	800e2e0 <__swrite+0x1e>
 800e2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d8:	2302      	movs	r3, #2
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f000 f858 	bl	800e390 <_lseek_r>
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2ea:	81a3      	strh	r3, [r4, #12]
 800e2ec:	4632      	mov	r2, r6
 800e2ee:	463b      	mov	r3, r7
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f6:	f000 b817 	b.w	800e328 <_write_r>

0800e2fa <__sseek>:
 800e2fa:	b510      	push	{r4, lr}
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e302:	f000 f845 	bl	800e390 <_lseek_r>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	bf15      	itete	ne
 800e30c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e30e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e316:	81a3      	strheq	r3, [r4, #12]
 800e318:	bf18      	it	ne
 800e31a:	81a3      	strhne	r3, [r4, #12]
 800e31c:	bd10      	pop	{r4, pc}

0800e31e <__sclose>:
 800e31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e322:	f000 b813 	b.w	800e34c <_close_r>
	...

0800e328 <_write_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4d07      	ldr	r5, [pc, #28]	; (800e348 <_write_r+0x20>)
 800e32c:	4604      	mov	r4, r0
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f2 feb4 	bl	80010a4 <_write>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_write_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_write_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	20005824 	.word	0x20005824

0800e34c <_close_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d06      	ldr	r5, [pc, #24]	; (800e368 <_close_r+0x1c>)
 800e350:	2300      	movs	r3, #0
 800e352:	4604      	mov	r4, r0
 800e354:	4608      	mov	r0, r1
 800e356:	602b      	str	r3, [r5, #0]
 800e358:	f7f2 fed0 	bl	80010fc <_close>
 800e35c:	1c43      	adds	r3, r0, #1
 800e35e:	d102      	bne.n	800e366 <_close_r+0x1a>
 800e360:	682b      	ldr	r3, [r5, #0]
 800e362:	b103      	cbz	r3, 800e366 <_close_r+0x1a>
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	20005824 	.word	0x20005824

0800e36c <_fstat_r>:
 800e36c:	b538      	push	{r3, r4, r5, lr}
 800e36e:	4d07      	ldr	r5, [pc, #28]	; (800e38c <_fstat_r+0x20>)
 800e370:	2300      	movs	r3, #0
 800e372:	4604      	mov	r4, r0
 800e374:	4608      	mov	r0, r1
 800e376:	4611      	mov	r1, r2
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	f7f2 ff0f 	bl	800119c <_fstat>
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	d102      	bne.n	800e388 <_fstat_r+0x1c>
 800e382:	682b      	ldr	r3, [r5, #0]
 800e384:	b103      	cbz	r3, 800e388 <_fstat_r+0x1c>
 800e386:	6023      	str	r3, [r4, #0]
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop
 800e38c:	20005824 	.word	0x20005824

0800e390 <_lseek_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	; (800e3b0 <_lseek_r+0x20>)
 800e394:	4604      	mov	r4, r0
 800e396:	4608      	mov	r0, r1
 800e398:	4611      	mov	r1, r2
 800e39a:	2200      	movs	r2, #0
 800e39c:	602a      	str	r2, [r5, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f7f2 fec3 	bl	800112a <_lseek>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d102      	bne.n	800e3ae <_lseek_r+0x1e>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	b103      	cbz	r3, 800e3ae <_lseek_r+0x1e>
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}
 800e3b0:	20005824 	.word	0x20005824

0800e3b4 <__malloc_lock>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__malloc_lock+0x8>)
 800e3b6:	f7ff be8b 	b.w	800e0d0 <__retarget_lock_acquire_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	2000581c 	.word	0x2000581c

0800e3c0 <__malloc_unlock>:
 800e3c0:	4801      	ldr	r0, [pc, #4]	; (800e3c8 <__malloc_unlock+0x8>)
 800e3c2:	f7ff be86 	b.w	800e0d2 <__retarget_lock_release_recursive>
 800e3c6:	bf00      	nop
 800e3c8:	2000581c 	.word	0x2000581c

0800e3cc <_read_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d07      	ldr	r5, [pc, #28]	; (800e3ec <_read_r+0x20>)
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	4608      	mov	r0, r1
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	602a      	str	r2, [r5, #0]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	f7f2 feb6 	bl	800114c <_read>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_read_r+0x1e>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_read_r+0x1e>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20005824 	.word	0x20005824

0800e3f0 <_init>:
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	bf00      	nop
 800e3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3f6:	bc08      	pop	{r3}
 800e3f8:	469e      	mov	lr, r3
 800e3fa:	4770      	bx	lr

0800e3fc <_fini>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	bf00      	nop
 800e400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e402:	bc08      	pop	{r3}
 800e404:	469e      	mov	lr, r3
 800e406:	4770      	bx	lr
